!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=199)}([function(e,t,n){e.exports=function(){"use strict";var e=Array.prototype.slice;function t(e,t){t&&(e.prototype=Object.create(t.prototype)),e.prototype.constructor=e}function n(e){return a(e)?e:W(e)}function r(e){return u(e)?e:J(e)}function o(e){return s(e)?e:H(e)}function i(e){return a(e)&&!c(e)?e:$(e)}function a(e){return!(!e||!e[f])}function u(e){return!(!e||!e[d])}function s(e){return!(!e||!e[p])}function c(e){return u(e)||s(e)}function l(e){return!(!e||!e[h])}t(r,n),t(o,n),t(i,n),n.isIterable=a,n.isKeyed=u,n.isIndexed=s,n.isAssociative=c,n.isOrdered=l,n.Keyed=r,n.Indexed=o,n.Set=i;var f="@@__IMMUTABLE_ITERABLE__@@",d="@@__IMMUTABLE_KEYED__@@",p="@@__IMMUTABLE_INDEXED__@@",h="@@__IMMUTABLE_ORDERED__@@",v=5,y=1<<v,m=y-1,g={},b={value:!1},k={value:!1};function w(e){return e.value=!1,e}function _(e){e&&(e.value=!0)}function x(){}function O(e,t){t=t||0;for(var n=Math.max(0,e.length-t),r=new Array(n),o=0;o<n;o++)r[o]=e[o+t];return r}function E(e){return void 0===e.size&&(e.size=e.__iterate(T)),e.size}function S(e,t){if("number"!=typeof t){var n=t>>>0;if(""+n!==t||4294967295===n)return NaN;t=n}return t<0?E(e)+t:t}function T(){return!0}function A(e,t,n){return(0===e||void 0!==n&&e<=-n)&&(void 0===t||void 0!==n&&t>=n)}function N(e,t){return j(e,t,0)}function C(e,t){return j(e,t,t)}function j(e,t,n){return void 0===e?n:e<0?Math.max(0,t+e):void 0===t?e:Math.min(t,e)}var P=0,F=1,I=2,R="function"==typeof Symbol&&Symbol.iterator,D="@@iterator",M=R||D;function B(e){this.next=e}function L(e,t,n,r){var o=0===e?t:1===e?n:[t,n];return r?r.value=o:r={value:o,done:!1},r}function z(){return{value:void 0,done:!0}}function q(e){return!!Q(e)}function U(e){return e&&"function"==typeof e.next}function V(e){var t=Q(e);return t&&t.call(e)}function Q(e){var t=e&&(R&&e[R]||e[D]);if("function"==typeof t)return t}function K(e){return e&&"number"==typeof e.length}function W(e){return null==e?ie():a(e)?e.toSeq():function(e){var t=se(e)||"object"==typeof e&&new te(e);if(!t)throw new TypeError("Expected Array or iterable object of values, or keyed object: "+e);return t}(e)}function J(e){return null==e?ie().toKeyedSeq():a(e)?u(e)?e.toSeq():e.fromEntrySeq():ae(e)}function H(e){return null==e?ie():a(e)?u(e)?e.entrySeq():e.toIndexedSeq():ue(e)}function $(e){return(null==e?ie():a(e)?u(e)?e.entrySeq():e:ue(e)).toSetSeq()}B.prototype.toString=function(){return"[Iterator]"},B.KEYS=P,B.VALUES=F,B.ENTRIES=I,B.prototype.inspect=B.prototype.toSource=function(){return this.toString()},B.prototype[M]=function(){return this},t(W,n),W.of=function(){return W(arguments)},W.prototype.toSeq=function(){return this},W.prototype.toString=function(){return this.__toString("Seq {","}")},W.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},W.prototype.__iterate=function(e,t){return ce(this,e,t,!0)},W.prototype.__iterator=function(e,t){return le(this,e,t,!0)},t(J,W),J.prototype.toKeyedSeq=function(){return this},t(H,W),H.of=function(){return H(arguments)},H.prototype.toIndexedSeq=function(){return this},H.prototype.toString=function(){return this.__toString("Seq [","]")},H.prototype.__iterate=function(e,t){return ce(this,e,t,!1)},H.prototype.__iterator=function(e,t){return le(this,e,t,!1)},t($,W),$.of=function(){return $(arguments)},$.prototype.toSetSeq=function(){return this},W.isSeq=oe,W.Keyed=J,W.Set=$,W.Indexed=H;var Y,G,X,Z="@@__IMMUTABLE_SEQ__@@";function ee(e){this._array=e,this.size=e.length}function te(e){var t=Object.keys(e);this._object=e,this._keys=t,this.size=t.length}function ne(e){this._iterable=e,this.size=e.length||e.size}function re(e){this._iterator=e,this._iteratorCache=[]}function oe(e){return!(!e||!e[Z])}function ie(){return Y||(Y=new ee([]))}function ae(e){var t=Array.isArray(e)?new ee(e).fromEntrySeq():U(e)?new re(e).fromEntrySeq():q(e)?new ne(e).fromEntrySeq():"object"==typeof e?new te(e):void 0;if(!t)throw new TypeError("Expected Array or iterable object of [k, v] entries, or keyed object: "+e);return t}function ue(e){var t=se(e);if(!t)throw new TypeError("Expected Array or iterable object of values: "+e);return t}function se(e){return K(e)?new ee(e):U(e)?new re(e):q(e)?new ne(e):void 0}function ce(e,t,n,r){var o=e._cache;if(o){for(var i=o.length-1,a=0;a<=i;a++){var u=o[n?i-a:a];if(!1===t(u[1],r?u[0]:a,e))return a+1}return a}return e.__iterateUncached(t,n)}function le(e,t,n,r){var o=e._cache;if(o){var i=o.length-1,a=0;return new B(function(){var e=o[n?i-a:a];return a++>i?{value:void 0,done:!0}:L(t,r?e[0]:a-1,e[1])})}return e.__iteratorUncached(t,n)}function fe(e,t){return t?function e(t,n,r,o){return Array.isArray(n)?t.call(o,r,H(n).map(function(r,o){return e(t,r,o,n)})):pe(n)?t.call(o,r,J(n).map(function(r,o){return e(t,r,o,n)})):n}(t,e,"",{"":e}):de(e)}function de(e){return Array.isArray(e)?H(e).map(de).toList():pe(e)?J(e).map(de).toMap():e}function pe(e){return e&&(e.constructor===Object||void 0===e.constructor)}function he(e,t){if(e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1;if("function"==typeof e.valueOf&&"function"==typeof t.valueOf){if((e=e.valueOf())===(t=t.valueOf())||e!=e&&t!=t)return!0;if(!e||!t)return!1}return!("function"!=typeof e.equals||"function"!=typeof t.equals||!e.equals(t))}function ve(e,t){if(e===t)return!0;if(!a(t)||void 0!==e.size&&void 0!==t.size&&e.size!==t.size||void 0!==e.__hash&&void 0!==t.__hash&&e.__hash!==t.__hash||u(e)!==u(t)||s(e)!==s(t)||l(e)!==l(t))return!1;if(0===e.size&&0===t.size)return!0;var n=!c(e);if(l(e)){var r=e.entries();return t.every(function(e,t){var o=r.next().value;return o&&he(o[1],e)&&(n||he(o[0],t))})&&r.next().done}var o=!1;if(void 0===e.size)if(void 0===t.size)"function"==typeof e.cacheResult&&e.cacheResult();else{o=!0;var i=e;e=t,t=i}var f=!0,d=t.__iterate(function(t,r){if(n?!e.has(t):o?!he(t,e.get(r,g)):!he(e.get(r,g),t))return f=!1,!1});return f&&e.size===d}function ye(e,t){if(!(this instanceof ye))return new ye(e,t);if(this._value=e,this.size=void 0===t?1/0:Math.max(0,t),0===this.size){if(G)return G;G=this}}function me(e,t){if(!e)throw new Error(t)}function ge(e,t,n){if(!(this instanceof ge))return new ge(e,t,n);if(me(0!==n,"Cannot step a Range by 0"),e=e||0,void 0===t&&(t=1/0),n=void 0===n?1:Math.abs(n),t<e&&(n=-n),this._start=e,this._end=t,this._step=n,this.size=Math.max(0,Math.ceil((t-e)/n-1)+1),0===this.size){if(X)return X;X=this}}function be(){throw TypeError("Abstract")}function ke(){}function we(){}function _e(){}W.prototype[Z]=!0,t(ee,H),ee.prototype.get=function(e,t){return this.has(e)?this._array[S(this,e)]:t},ee.prototype.__iterate=function(e,t){for(var n=this._array,r=n.length-1,o=0;o<=r;o++)if(!1===e(n[t?r-o:o],o,this))return o+1;return o},ee.prototype.__iterator=function(e,t){var n=this._array,r=n.length-1,o=0;return new B(function(){return o>r?{value:void 0,done:!0}:L(e,o,n[t?r-o++:o++])})},t(te,J),te.prototype.get=function(e,t){return void 0===t||this.has(e)?this._object[e]:t},te.prototype.has=function(e){return this._object.hasOwnProperty(e)},te.prototype.__iterate=function(e,t){for(var n=this._object,r=this._keys,o=r.length-1,i=0;i<=o;i++){var a=r[t?o-i:i];if(!1===e(n[a],a,this))return i+1}return i},te.prototype.__iterator=function(e,t){var n=this._object,r=this._keys,o=r.length-1,i=0;return new B(function(){var a=r[t?o-i:i];return i++>o?{value:void 0,done:!0}:L(e,a,n[a])})},te.prototype[h]=!0,t(ne,H),ne.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);var n=V(this._iterable),r=0;if(U(n))for(var o;!(o=n.next()).done&&!1!==e(o.value,r++,this););return r},ne.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=V(this._iterable);if(!U(n))return new B(z);var r=0;return new B(function(){var t=n.next();return t.done?t:L(e,r++,t.value)})},t(re,H),re.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);for(var n,r=this._iterator,o=this._iteratorCache,i=0;i<o.length;)if(!1===e(o[i],i++,this))return i;for(;!(n=r.next()).done;){var a=n.value;if(o[i]=a,!1===e(a,i++,this))break}return i},re.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=this._iterator,r=this._iteratorCache,o=0;return new B(function(){if(o>=r.length){var t=n.next();if(t.done)return t;r[o]=t.value}return L(e,o,r[o++])})},t(ye,H),ye.prototype.toString=function(){return 0===this.size?"Repeat []":"Repeat [ "+this._value+" "+this.size+" times ]"},ye.prototype.get=function(e,t){return this.has(e)?this._value:t},ye.prototype.includes=function(e){return he(this._value,e)},ye.prototype.slice=function(e,t){var n=this.size;return A(e,t,n)?this:new ye(this._value,C(t,n)-N(e,n))},ye.prototype.reverse=function(){return this},ye.prototype.indexOf=function(e){return he(this._value,e)?0:-1},ye.prototype.lastIndexOf=function(e){return he(this._value,e)?this.size:-1},ye.prototype.__iterate=function(e,t){for(var n=0;n<this.size;n++)if(!1===e(this._value,n,this))return n+1;return n},ye.prototype.__iterator=function(e,t){var n=this,r=0;return new B(function(){return r<n.size?L(e,r++,n._value):{value:void 0,done:!0}})},ye.prototype.equals=function(e){return e instanceof ye?he(this._value,e._value):ve(e)},t(ge,H),ge.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(1!==this._step?" by "+this._step:"")+" ]"},ge.prototype.get=function(e,t){return this.has(e)?this._start+S(this,e)*this._step:t},ge.prototype.includes=function(e){var t=(e-this._start)/this._step;return t>=0&&t<this.size&&t===Math.floor(t)},ge.prototype.slice=function(e,t){return A(e,t,this.size)?this:(e=N(e,this.size),(t=C(t,this.size))<=e?new ge(0,0):new ge(this.get(e,this._end),this.get(t,this._end),this._step))},ge.prototype.indexOf=function(e){var t=e-this._start;if(t%this._step==0){var n=t/this._step;if(n>=0&&n<this.size)return n}return-1},ge.prototype.lastIndexOf=function(e){return this.indexOf(e)},ge.prototype.__iterate=function(e,t){for(var n=this.size-1,r=this._step,o=t?this._start+n*r:this._start,i=0;i<=n;i++){if(!1===e(o,i,this))return i+1;o+=t?-r:r}return i},ge.prototype.__iterator=function(e,t){var n=this.size-1,r=this._step,o=t?this._start+n*r:this._start,i=0;return new B(function(){var a=o;return o+=t?-r:r,i>n?{value:void 0,done:!0}:L(e,i++,a)})},ge.prototype.equals=function(e){return e instanceof ge?this._start===e._start&&this._end===e._end&&this._step===e._step:ve(this,e)},t(be,n),t(ke,be),t(we,be),t(_e,be),be.Keyed=ke,be.Indexed=we,be.Set=_e;var xe="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(e,t){var n=65535&(e|=0),r=65535&(t|=0);return n*r+((e>>>16)*r+n*(t>>>16)<<16>>>0)|0};function Oe(e){return e>>>1&1073741824|3221225471&e}function Ee(e){if(!1===e||null==e)return 0;if("function"==typeof e.valueOf&&(!1===(e=e.valueOf())||null==e))return 0;if(!0===e)return 1;var t=typeof e;if("number"===t){if(e!=e||e===1/0)return 0;var n=0|e;for(n!==e&&(n^=4294967295*e);e>4294967295;)n^=e/=4294967295;return Oe(n)}if("string"===t)return e.length>Fe?function(e){var t=De[e];return void 0===t&&(t=Se(e),Re===Ie&&(Re=0,De={}),Re++,De[e]=t),t}(e):Se(e);if("function"==typeof e.hashCode)return e.hashCode();if("object"===t)return function(e){var t;if(Ce&&void 0!==(t=Te.get(e)))return t;if(void 0!==(t=e[Pe]))return t;if(!Ne){if(void 0!==(t=e.propertyIsEnumerable&&e.propertyIsEnumerable[Pe]))return t;if(void 0!==(t=function(e){if(e&&e.nodeType>0)switch(e.nodeType){case 1:return e.uniqueID;case 9:return e.documentElement&&e.documentElement.uniqueID}}(e)))return t}if(t=++je,1073741824&je&&(je=0),Ce)Te.set(e,t);else{if(void 0!==Ae&&!1===Ae(e))throw new Error("Non-extensible objects are not allowed as keys.");if(Ne)Object.defineProperty(e,Pe,{enumerable:!1,configurable:!1,writable:!1,value:t});else if(void 0!==e.propertyIsEnumerable&&e.propertyIsEnumerable===e.constructor.prototype.propertyIsEnumerable)e.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},e.propertyIsEnumerable[Pe]=t;else{if(void 0===e.nodeType)throw new Error("Unable to set a non-enumerable property on object.");e[Pe]=t}}return t}(e);if("function"==typeof e.toString)return Se(e.toString());throw new Error("Value type "+t+" cannot be hashed.")}function Se(e){for(var t=0,n=0;n<e.length;n++)t=31*t+e.charCodeAt(n)|0;return Oe(t)}var Te,Ae=Object.isExtensible,Ne=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}(),Ce="function"==typeof WeakMap;Ce&&(Te=new WeakMap);var je=0,Pe="__immutablehash__";"function"==typeof Symbol&&(Pe=Symbol(Pe));var Fe=16,Ie=255,Re=0,De={};function Me(e){me(e!==1/0,"Cannot perform this action with an infinite size.")}function Be(e){return null==e?Xe():Le(e)&&!l(e)?e:Xe().withMutations(function(t){var n=r(e);Me(n.size),n.forEach(function(e,n){return t.set(n,e)})})}function Le(e){return!(!e||!e[qe])}t(Be,ke),Be.of=function(){var t=e.call(arguments,0);return Xe().withMutations(function(e){for(var n=0;n<t.length;n+=2){if(n+1>=t.length)throw new Error("Missing value for key: "+t[n]);e.set(t[n],t[n+1])}})},Be.prototype.toString=function(){return this.__toString("Map {","}")},Be.prototype.get=function(e,t){return this._root?this._root.get(0,void 0,e,t):t},Be.prototype.set=function(e,t){return Ze(this,e,t)},Be.prototype.setIn=function(e,t){return this.updateIn(e,g,function(){return t})},Be.prototype.remove=function(e){return Ze(this,e,g)},Be.prototype.deleteIn=function(e){return this.updateIn(e,function(){return g})},Be.prototype.update=function(e,t,n){return 1===arguments.length?e(this):this.updateIn([e],t,n)},Be.prototype.updateIn=function(e,t,n){n||(n=t,t=void 0);var r=function e(t,n,r,o){var i=t===g,a=n.next();if(a.done){var u=i?r:t,s=o(u);return s===u?t:s}me(i||t&&t.set,"invalid keyPath");var c=a.value,l=i?g:t.get(c,g),f=e(l,n,r,o);return f===l?t:f===g?t.remove(c):(i?Xe():t).set(c,f)}(this,rn(e),t,n);return r===g?void 0:r},Be.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Xe()},Be.prototype.merge=function(){return rt(this,void 0,arguments)},Be.prototype.mergeWith=function(t){var n=e.call(arguments,1);return rt(this,t,n)},Be.prototype.mergeIn=function(t){var n=e.call(arguments,1);return this.updateIn(t,Xe(),function(e){return"function"==typeof e.merge?e.merge.apply(e,n):n[n.length-1]})},Be.prototype.mergeDeep=function(){return rt(this,ot,arguments)},Be.prototype.mergeDeepWith=function(t){var n=e.call(arguments,1);return rt(this,it(t),n)},Be.prototype.mergeDeepIn=function(t){var n=e.call(arguments,1);return this.updateIn(t,Xe(),function(e){return"function"==typeof e.mergeDeep?e.mergeDeep.apply(e,n):n[n.length-1]})},Be.prototype.sort=function(e){return Nt(Wt(this,e))},Be.prototype.sortBy=function(e,t){return Nt(Wt(this,t,e))},Be.prototype.withMutations=function(e){var t=this.asMutable();return e(t),t.wasAltered()?t.__ensureOwner(this.__ownerID):this},Be.prototype.asMutable=function(){return this.__ownerID?this:this.__ensureOwner(new x)},Be.prototype.asImmutable=function(){return this.__ensureOwner()},Be.prototype.wasAltered=function(){return this.__altered},Be.prototype.__iterator=function(e,t){return new He(this,e,t)},Be.prototype.__iterate=function(e,t){var n=this,r=0;return this._root&&this._root.iterate(function(t){return r++,e(t[1],t[0],n)},t),r},Be.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Ge(this.size,this._root,e,this.__hash):(this.__ownerID=e,this.__altered=!1,this)},Be.isMap=Le;var ze,qe="@@__IMMUTABLE_MAP__@@",Ue=Be.prototype;function Ve(e,t){this.ownerID=e,this.entries=t}function Qe(e,t,n){this.ownerID=e,this.bitmap=t,this.nodes=n}function Ke(e,t,n){this.ownerID=e,this.count=t,this.nodes=n}function We(e,t,n){this.ownerID=e,this.keyHash=t,this.entries=n}function Je(e,t,n){this.ownerID=e,this.keyHash=t,this.entry=n}function He(e,t,n){this._type=t,this._reverse=n,this._stack=e._root&&Ye(e._root)}function $e(e,t){return L(e,t[0],t[1])}function Ye(e,t){return{node:e,index:0,__prev:t}}function Ge(e,t,n,r){var o=Object.create(Ue);return o.size=e,o._root=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Xe(){return ze||(ze=Ge(0))}function Ze(e,t,n){var r,o;if(e._root){var i=w(b),a=w(k);if(r=et(e._root,e.__ownerID,0,void 0,t,n,i,a),!a.value)return e;o=e.size+(i.value?n===g?-1:1:0)}else{if(n===g)return e;o=1,r=new Ve(e.__ownerID,[[t,n]])}return e.__ownerID?(e.size=o,e._root=r,e.__hash=void 0,e.__altered=!0,e):r?Ge(o,r):Xe()}function et(e,t,n,r,o,i,a,u){return e?e.update(t,n,r,o,i,a,u):i===g?e:(_(u),_(a),new Je(t,r,[o,i]))}function tt(e){return e.constructor===Je||e.constructor===We}function nt(e,t,n,r,o){if(e.keyHash===r)return new We(t,r,[e.entry,o]);var i,a=(0===n?e.keyHash:e.keyHash>>>n)&m,u=(0===n?r:r>>>n)&m;return new Qe(t,1<<a|1<<u,a===u?[nt(e,t,n+v,r,o)]:(i=new Je(t,r,o),a<u?[e,i]:[i,e]))}function rt(e,t,n){for(var o=[],i=0;i<n.length;i++){var u=n[i],s=r(u);a(u)||(s=s.map(function(e){return fe(e)})),o.push(s)}return at(e,t,o)}function ot(e,t,n){return e&&e.mergeDeep&&a(t)?e.mergeDeep(t):he(e,t)?e:t}function it(e){return function(t,n,r){if(t&&t.mergeDeepWith&&a(n))return t.mergeDeepWith(e,n);var o=e(t,n,r);return he(t,o)?t:o}}function at(e,t,n){return 0===(n=n.filter(function(e){return 0!==e.size})).length?e:0!==e.size||e.__ownerID||1!==n.length?e.withMutations(function(e){for(var r=t?function(n,r){e.update(r,g,function(e){return e===g?n:t(e,n,r)})}:function(t,n){e.set(n,t)},o=0;o<n.length;o++)n[o].forEach(r)}):e.constructor(n[0])}function ut(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,e+=e>>8,127&(e+=e>>16)}function st(e,t,n,r){var o=r?e:O(e);return o[t]=n,o}Ue[qe]=!0,Ue.delete=Ue.remove,Ue.removeIn=Ue.deleteIn,Ve.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,a=o.length;i<a;i++)if(he(n,o[i][0]))return o[i][1];return r},Ve.prototype.update=function(e,t,n,r,o,i,a){for(var u=o===g,s=this.entries,c=0,l=s.length;c<l&&!he(r,s[c][0]);c++);var f=c<l;if(f?s[c][1]===o:u)return this;if(_(a),(u||!f)&&_(i),!u||1!==s.length){if(!f&&!u&&s.length>=ct)return function(e,t,n,r){e||(e=new x);for(var o=new Je(e,Ee(n),[n,r]),i=0;i<t.length;i++){var a=t[i];o=o.update(e,0,void 0,a[0],a[1])}return o}(e,s,r,o);var d=e&&e===this.ownerID,p=d?s:O(s);return f?u?c===l-1?p.pop():p[c]=p.pop():p[c]=[r,o]:p.push([r,o]),d?(this.entries=p,this):new Ve(e,p)}},Qe.prototype.get=function(e,t,n,r){void 0===t&&(t=Ee(n));var o=1<<((0===e?t:t>>>e)&m),i=this.bitmap;return 0==(i&o)?r:this.nodes[ut(i&o-1)].get(e+v,t,n,r)},Qe.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=Ee(r));var u=(0===t?n:n>>>t)&m,s=1<<u,c=this.bitmap,l=0!=(c&s);if(!l&&o===g)return this;var f=ut(c&s-1),d=this.nodes,p=l?d[f]:void 0,h=et(p,e,t+v,n,r,o,i,a);if(h===p)return this;if(!l&&h&&d.length>=lt)return function(e,t,n,r,o){for(var i=0,a=new Array(y),u=0;0!==n;u++,n>>>=1)a[u]=1&n?t[i++]:void 0;return a[r]=o,new Ke(e,i+1,a)}(e,d,c,u,h);if(l&&!h&&2===d.length&&tt(d[1^f]))return d[1^f];if(l&&h&&1===d.length&&tt(h))return h;var b=e&&e===this.ownerID,k=l?h?c:c^s:c|s,w=l?h?st(d,f,h,b):function(e,t,n){var r=e.length-1;if(n&&t===r)return e.pop(),e;for(var o=new Array(r),i=0,a=0;a<r;a++)a===t&&(i=1),o[a]=e[a+i];return o}(d,f,b):function(e,t,n,r){var o=e.length+1;if(r&&t+1===o)return e[t]=n,e;for(var i=new Array(o),a=0,u=0;u<o;u++)u===t?(i[u]=n,a=-1):i[u]=e[u+a];return i}(d,f,h,b);return b?(this.bitmap=k,this.nodes=w,this):new Qe(e,k,w)},Ke.prototype.get=function(e,t,n,r){void 0===t&&(t=Ee(n));var o=(0===e?t:t>>>e)&m,i=this.nodes[o];return i?i.get(e+v,t,n,r):r},Ke.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=Ee(r));var u=(0===t?n:n>>>t)&m,s=o===g,c=this.nodes,l=c[u];if(s&&!l)return this;var f=et(l,e,t+v,n,r,o,i,a);if(f===l)return this;var d=this.count;if(l){if(!f&&--d<ft)return function(e,t,n,r){for(var o=0,i=0,a=new Array(n),u=0,s=1,c=t.length;u<c;u++,s<<=1){var l=t[u];void 0!==l&&u!==r&&(o|=s,a[i++]=l)}return new Qe(e,o,a)}(e,c,d,u)}else d++;var p=e&&e===this.ownerID,h=st(c,u,f,p);return p?(this.count=d,this.nodes=h,this):new Ke(e,d,h)},We.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,a=o.length;i<a;i++)if(he(n,o[i][0]))return o[i][1];return r},We.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=Ee(r));var u=o===g;if(n!==this.keyHash)return u?this:(_(a),_(i),nt(this,e,t,n,[r,o]));for(var s=this.entries,c=0,l=s.length;c<l&&!he(r,s[c][0]);c++);var f=c<l;if(f?s[c][1]===o:u)return this;if(_(a),(u||!f)&&_(i),u&&2===l)return new Je(e,this.keyHash,s[1^c]);var d=e&&e===this.ownerID,p=d?s:O(s);return f?u?c===l-1?p.pop():p[c]=p.pop():p[c]=[r,o]:p.push([r,o]),d?(this.entries=p,this):new We(e,this.keyHash,p)},Je.prototype.get=function(e,t,n,r){return he(n,this.entry[0])?this.entry[1]:r},Je.prototype.update=function(e,t,n,r,o,i,a){var u=o===g,s=he(r,this.entry[0]);return(s?o===this.entry[1]:u)?this:(_(a),u?void _(i):s?e&&e===this.ownerID?(this.entry[1]=o,this):new Je(e,this.keyHash,[r,o]):(_(i),nt(this,e,t,Ee(r),[r,o])))},Ve.prototype.iterate=We.prototype.iterate=function(e,t){for(var n=this.entries,r=0,o=n.length-1;r<=o;r++)if(!1===e(n[t?o-r:r]))return!1},Qe.prototype.iterate=Ke.prototype.iterate=function(e,t){for(var n=this.nodes,r=0,o=n.length-1;r<=o;r++){var i=n[t?o-r:r];if(i&&!1===i.iterate(e,t))return!1}},Je.prototype.iterate=function(e,t){return e(this.entry)},t(He,B),He.prototype.next=function(){for(var e=this._type,t=this._stack;t;){var n,r=t.node,o=t.index++;if(r.entry){if(0===o)return $e(e,r.entry)}else if(r.entries){if(o<=(n=r.entries.length-1))return $e(e,r.entries[this._reverse?n-o:o])}else if(o<=(n=r.nodes.length-1)){var i=r.nodes[this._reverse?n-o:o];if(i){if(i.entry)return $e(e,i.entry);t=this._stack=Ye(i,t)}continue}t=this._stack=this._stack.__prev}return{value:void 0,done:!0}};var ct=y/4,lt=y/2,ft=y/4;function dt(e){var t=_t();if(null==e)return t;if(pt(e))return e;var n=o(e),r=n.size;return 0===r?t:(Me(r),r>0&&r<y?wt(0,r,v,null,new yt(n.toArray())):t.withMutations(function(e){e.setSize(r),n.forEach(function(t,n){return e.set(n,t)})}))}function pt(e){return!(!e||!e[ht])}t(dt,we),dt.of=function(){return this(arguments)},dt.prototype.toString=function(){return this.__toString("List [","]")},dt.prototype.get=function(e,t){if((e=S(this,e))>=0&&e<this.size){var n=Et(this,e+=this._origin);return n&&n.array[e&m]}return t},dt.prototype.set=function(e,t){return function(e,t,n){if((t=S(e,t))!=t)return e;if(t>=e.size||t<0)return e.withMutations(function(e){t<0?St(e,t).set(0,n):St(e,0,t+1).set(t,n)});t+=e._origin;var r=e._tail,o=e._root,i=w(k);return t>=At(e._capacity)?r=xt(r,e.__ownerID,0,t,n,i):o=xt(o,e.__ownerID,e._level,t,n,i),i.value?e.__ownerID?(e._root=o,e._tail=r,e.__hash=void 0,e.__altered=!0,e):wt(e._origin,e._capacity,e._level,o,r):e}(this,e,t)},dt.prototype.remove=function(e){return this.has(e)?0===e?this.shift():e===this.size-1?this.pop():this.splice(e,1):this},dt.prototype.insert=function(e,t){return this.splice(e,0,t)},dt.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=v,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):_t()},dt.prototype.push=function(){var e=arguments,t=this.size;return this.withMutations(function(n){St(n,0,t+e.length);for(var r=0;r<e.length;r++)n.set(t+r,e[r])})},dt.prototype.pop=function(){return St(this,0,-1)},dt.prototype.unshift=function(){var e=arguments;return this.withMutations(function(t){St(t,-e.length);for(var n=0;n<e.length;n++)t.set(n,e[n])})},dt.prototype.shift=function(){return St(this,1)},dt.prototype.merge=function(){return Tt(this,void 0,arguments)},dt.prototype.mergeWith=function(t){var n=e.call(arguments,1);return Tt(this,t,n)},dt.prototype.mergeDeep=function(){return Tt(this,ot,arguments)},dt.prototype.mergeDeepWith=function(t){var n=e.call(arguments,1);return Tt(this,it(t),n)},dt.prototype.setSize=function(e){return St(this,0,e)},dt.prototype.slice=function(e,t){var n=this.size;return A(e,t,n)?this:St(this,N(e,n),C(t,n))},dt.prototype.__iterator=function(e,t){var n=0,r=kt(this,t);return new B(function(){var t=r();return t===bt?{value:void 0,done:!0}:L(e,n++,t)})},dt.prototype.__iterate=function(e,t){for(var n,r=0,o=kt(this,t);(n=o())!==bt&&!1!==e(n,r++,this););return r},dt.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?wt(this._origin,this._capacity,this._level,this._root,this._tail,e,this.__hash):(this.__ownerID=e,this)},dt.isList=pt;var ht="@@__IMMUTABLE_LIST__@@",vt=dt.prototype;function yt(e,t){this.array=e,this.ownerID=t}vt[ht]=!0,vt.delete=vt.remove,vt.setIn=Ue.setIn,vt.deleteIn=vt.removeIn=Ue.removeIn,vt.update=Ue.update,vt.updateIn=Ue.updateIn,vt.mergeIn=Ue.mergeIn,vt.mergeDeepIn=Ue.mergeDeepIn,vt.withMutations=Ue.withMutations,vt.asMutable=Ue.asMutable,vt.asImmutable=Ue.asImmutable,vt.wasAltered=Ue.wasAltered,yt.prototype.removeBefore=function(e,t,n){if(n===t?1<<t:0===this.array.length)return this;var r=n>>>t&m;if(r>=this.array.length)return new yt([],e);var o,i=0===r;if(t>0){var a=this.array[r];if((o=a&&a.removeBefore(e,t-v,n))===a&&i)return this}if(i&&!o)return this;var u=Ot(this,e);if(!i)for(var s=0;s<r;s++)u.array[s]=void 0;return o&&(u.array[r]=o),u},yt.prototype.removeAfter=function(e,t,n){if(n===(t?1<<t:0)||0===this.array.length)return this;var r,o=n-1>>>t&m;if(o>=this.array.length)return this;if(t>0){var i=this.array[o];if((r=i&&i.removeAfter(e,t-v,n))===i&&o===this.array.length-1)return this}var a=Ot(this,e);return a.array.splice(o+1),r&&(a.array[o]=r),a};var mt,gt,bt={};function kt(e,t){var n=e._origin,r=e._capacity,o=At(r),i=e._tail;return a(e._root,e._level,0);function a(e,u,s){return 0===u?function(e,a){var u=a===o?i&&i.array:e&&e.array,s=a>n?0:n-a,c=r-a;return c>y&&(c=y),function(){if(s===c)return bt;var e=t?--c:s++;return u&&u[e]}}(e,s):function(e,o,i){var u,s=e&&e.array,c=i>n?0:n-i>>o,l=1+(r-i>>o);return l>y&&(l=y),function(){for(;;){if(u){var e=u();if(e!==bt)return e;u=null}if(c===l)return bt;var n=t?--l:c++;u=a(s&&s[n],o-v,i+(n<<o))}}}(e,u,s)}}function wt(e,t,n,r,o,i,a){var u=Object.create(vt);return u.size=t-e,u._origin=e,u._capacity=t,u._level=n,u._root=r,u._tail=o,u.__ownerID=i,u.__hash=a,u.__altered=!1,u}function _t(){return mt||(mt=wt(0,0,v))}function xt(e,t,n,r,o,i){var a,u=r>>>n&m,s=e&&u<e.array.length;if(!s&&void 0===o)return e;if(n>0){var c=e&&e.array[u],l=xt(c,t,n-v,r,o,i);return l===c?e:((a=Ot(e,t)).array[u]=l,a)}return s&&e.array[u]===o?e:(_(i),a=Ot(e,t),void 0===o&&u===a.array.length-1?a.array.pop():a.array[u]=o,a)}function Ot(e,t){return t&&e&&t===e.ownerID?e:new yt(e?e.array.slice():[],t)}function Et(e,t){if(t>=At(e._capacity))return e._tail;if(t<1<<e._level+v){for(var n=e._root,r=e._level;n&&r>0;)n=n.array[t>>>r&m],r-=v;return n}}function St(e,t,n){void 0!==t&&(t|=0),void 0!==n&&(n|=0);var r=e.__ownerID||new x,o=e._origin,i=e._capacity,a=o+t,u=void 0===n?i:n<0?i+n:o+n;if(a===o&&u===i)return e;if(a>=u)return e.clear();for(var s=e._level,c=e._root,l=0;a+l<0;)c=new yt(c&&c.array.length?[void 0,c]:[],r),l+=1<<(s+=v);l&&(a+=l,o+=l,u+=l,i+=l);for(var f=At(i),d=At(u);d>=1<<s+v;)c=new yt(c&&c.array.length?[c]:[],r),s+=v;var p=e._tail,h=d<f?Et(e,u-1):d>f?new yt([],r):p;if(p&&d>f&&a<i&&p.array.length){for(var y=c=Ot(c,r),g=s;g>v;g-=v){var b=f>>>g&m;y=y.array[b]=Ot(y.array[b],r)}y.array[f>>>v&m]=p}if(u<i&&(h=h&&h.removeAfter(r,0,u)),a>=d)a-=d,u-=d,s=v,c=null,h=h&&h.removeBefore(r,0,a);else if(a>o||d<f){for(l=0;c;){var k=a>>>s&m;if(k!==d>>>s&m)break;k&&(l+=(1<<s)*k),s-=v,c=c.array[k]}c&&a>o&&(c=c.removeBefore(r,s,a-l)),c&&d<f&&(c=c.removeAfter(r,s,d-l)),l&&(a-=l,u-=l)}return e.__ownerID?(e.size=u-a,e._origin=a,e._capacity=u,e._level=s,e._root=c,e._tail=h,e.__hash=void 0,e.__altered=!0,e):wt(a,u,s,c,h)}function Tt(e,t,n){for(var r=[],i=0,u=0;u<n.length;u++){var s=n[u],c=o(s);c.size>i&&(i=c.size),a(s)||(c=c.map(function(e){return fe(e)})),r.push(c)}return i>e.size&&(e=e.setSize(i)),at(e,t,r)}function At(e){return e<y?0:e-1>>>v<<v}function Nt(e){return null==e?Pt():Ct(e)?e:Pt().withMutations(function(t){var n=r(e);Me(n.size),n.forEach(function(e,n){return t.set(n,e)})})}function Ct(e){return Le(e)&&l(e)}function jt(e,t,n,r){var o=Object.create(Nt.prototype);return o.size=e?e.size:0,o._map=e,o._list=t,o.__ownerID=n,o.__hash=r,o}function Pt(){return gt||(gt=jt(Xe(),_t()))}function Ft(e,t,n){var r,o,i=e._map,a=e._list,u=i.get(t),s=void 0!==u;if(n===g){if(!s)return e;a.size>=y&&a.size>=2*i.size?(r=(o=a.filter(function(e,t){return void 0!==e&&u!==t})).toKeyedSeq().map(function(e){return e[0]}).flip().toMap(),e.__ownerID&&(r.__ownerID=o.__ownerID=e.__ownerID)):(r=i.remove(t),o=u===a.size-1?a.pop():a.set(u,void 0))}else if(s){if(n===a.get(u)[1])return e;r=i,o=a.set(u,[t,n])}else r=i.set(t,a.size),o=a.set(a.size,[t,n]);return e.__ownerID?(e.size=r.size,e._map=r,e._list=o,e.__hash=void 0,e):jt(r,o)}function It(e,t){this._iter=e,this._useKeys=t,this.size=e.size}function Rt(e){this._iter=e,this.size=e.size}function Dt(e){this._iter=e,this.size=e.size}function Mt(e){this._iter=e,this.size=e.size}function Bt(e){var t=en(e);return t._iter=e,t.size=e.size,t.flip=function(){return e},t.reverse=function(){var t=e.reverse.apply(this);return t.flip=function(){return e.reverse()},t},t.has=function(t){return e.includes(t)},t.includes=function(t){return e.has(t)},t.cacheResult=tn,t.__iterateUncached=function(t,n){var r=this;return e.__iterate(function(e,n){return!1!==t(n,e,r)},n)},t.__iteratorUncached=function(t,n){if(t===I){var r=e.__iterator(t,n);return new B(function(){var e=r.next();if(!e.done){var t=e.value[0];e.value[0]=e.value[1],e.value[1]=t}return e})}return e.__iterator(t===F?P:F,n)},t}function Lt(e,t,n){var r=en(e);return r.size=e.size,r.has=function(t){return e.has(t)},r.get=function(r,o){var i=e.get(r,g);return i===g?o:t.call(n,i,r,e)},r.__iterateUncached=function(r,o){var i=this;return e.__iterate(function(e,o,a){return!1!==r(t.call(n,e,o,a),o,i)},o)},r.__iteratorUncached=function(r,o){var i=e.__iterator(I,o);return new B(function(){var o=i.next();if(o.done)return o;var a=o.value,u=a[0];return L(r,u,t.call(n,a[1],u,e),o)})},r}function zt(e,t){var n=en(e);return n._iter=e,n.size=e.size,n.reverse=function(){return e},e.flip&&(n.flip=function(){var t=Bt(e);return t.reverse=function(){return e.flip()},t}),n.get=function(n,r){return e.get(t?n:-1-n,r)},n.has=function(n){return e.has(t?n:-1-n)},n.includes=function(t){return e.includes(t)},n.cacheResult=tn,n.__iterate=function(t,n){var r=this;return e.__iterate(function(e,n){return t(e,n,r)},!n)},n.__iterator=function(t,n){return e.__iterator(t,!n)},n}function qt(e,t,n,r){var o=en(e);return r&&(o.has=function(r){var o=e.get(r,g);return o!==g&&!!t.call(n,o,r,e)},o.get=function(r,o){var i=e.get(r,g);return i!==g&&t.call(n,i,r,e)?i:o}),o.__iterateUncached=function(o,i){var a=this,u=0;return e.__iterate(function(e,i,s){if(t.call(n,e,i,s))return u++,o(e,r?i:u-1,a)},i),u},o.__iteratorUncached=function(o,i){var a=e.__iterator(I,i),u=0;return new B(function(){for(;;){var i=a.next();if(i.done)return i;var s=i.value,c=s[0],l=s[1];if(t.call(n,l,c,e))return L(o,r?c:u++,l,i)}})},o}function Ut(e,t,n,r){var o=e.size;if(void 0!==t&&(t|=0),void 0!==n&&(n===1/0?n=o:n|=0),A(t,n,o))return e;var i=N(t,o),a=C(n,o);if(i!=i||a!=a)return Ut(e.toSeq().cacheResult(),t,n,r);var u,s=a-i;s==s&&(u=s<0?0:s);var c=en(e);return c.size=0===u?u:e.size&&u||void 0,!r&&oe(e)&&u>=0&&(c.get=function(t,n){return(t=S(this,t))>=0&&t<u?e.get(t+i,n):n}),c.__iterateUncached=function(t,n){var o=this;if(0===u)return 0;if(n)return this.cacheResult().__iterate(t,n);var a=0,s=!0,c=0;return e.__iterate(function(e,n){if(!s||!(s=a++<i))return c++,!1!==t(e,r?n:c-1,o)&&c!==u}),c},c.__iteratorUncached=function(t,n){if(0!==u&&n)return this.cacheResult().__iterator(t,n);var o=0!==u&&e.__iterator(t,n),a=0,s=0;return new B(function(){for(;a++<i;)o.next();if(++s>u)return{value:void 0,done:!0};var e=o.next();return r||t===F?e:L(t,s-1,t===P?void 0:e.value[1],e)})},c}function Vt(e,t,n,r){var o=en(e);return o.__iterateUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterate(o,i);var u=!0,s=0;return e.__iterate(function(e,i,c){if(!u||!(u=t.call(n,e,i,c)))return s++,o(e,r?i:s-1,a)}),s},o.__iteratorUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterator(o,i);var u=e.__iterator(I,i),s=!0,c=0;return new B(function(){var e,i,l;do{if((e=u.next()).done)return r||o===F?e:L(o,c++,o===P?void 0:e.value[1],e);var f=e.value;i=f[0],l=f[1],s&&(s=t.call(n,l,i,a))}while(s);return o===I?e:L(o,i,l,e)})},o}function Qt(e,t){var n=u(e),o=[e].concat(t).map(function(e){return a(e)?n&&(e=r(e)):e=n?ae(e):ue(Array.isArray(e)?e:[e]),e}).filter(function(e){return 0!==e.size});if(0===o.length)return e;if(1===o.length){var i=o[0];if(i===e||n&&u(i)||s(e)&&s(i))return i}var c=new ee(o);return n?c=c.toKeyedSeq():s(e)||(c=c.toSetSeq()),(c=c.flatten(!0)).size=o.reduce(function(e,t){if(void 0!==e){var n=t.size;if(void 0!==n)return e+n}},0),c}function Kt(e,t,n){var r=en(e);return r.__iterateUncached=function(r,o){var i=0,u=!1;return function e(s,c){var l=this;s.__iterate(function(o,s){return(!t||c<t)&&a(o)?e(o,c+1):!1===r(o,n?s:i++,l)&&(u=!0),!u},o)}(e,0),i},r.__iteratorUncached=function(r,o){var i=e.__iterator(r,o),u=[],s=0;return new B(function(){for(;i;){var e=i.next();if(!1===e.done){var c=e.value;if(r===I&&(c=c[1]),t&&!(u.length<t)||!a(c))return n?e:L(r,s++,c,e);u.push(i),i=c.__iterator(r,o)}else i=u.pop()}return{value:void 0,done:!0}})},r}function Wt(e,t,n){t||(t=nn);var r=u(e),o=0,i=e.toSeq().map(function(t,r){return[r,t,o++,n?n(t,r,e):t]}).toArray();return i.sort(function(e,n){return t(e[3],n[3])||e[2]-n[2]}).forEach(r?function(e,t){i[t].length=2}:function(e,t){i[t]=e[1]}),r?J(i):s(e)?H(i):$(i)}function Jt(e,t,n){if(t||(t=nn),n){var r=e.toSeq().map(function(t,r){return[t,n(t,r,e)]}).reduce(function(e,n){return Ht(t,e[1],n[1])?n:e});return r&&r[0]}return e.reduce(function(e,n){return Ht(t,e,n)?n:e})}function Ht(e,t,n){var r=e(n,t);return 0===r&&n!==t&&(null==n||n!=n)||r>0}function $t(e,t,r){var o=en(e);return o.size=new ee(r).map(function(e){return e.size}).min(),o.__iterate=function(e,t){for(var n,r=this.__iterator(F,t),o=0;!(n=r.next()).done&&!1!==e(n.value,o++,this););return o},o.__iteratorUncached=function(e,o){var i=r.map(function(e){return e=n(e),V(o?e.reverse():e)}),a=0,u=!1;return new B(function(){var n;return u||(n=i.map(function(e){return e.next()}),u=n.some(function(e){return e.done})),u?{value:void 0,done:!0}:L(e,a++,t.apply(null,n.map(function(e){return e.value})))})},o}function Yt(e,t){return oe(e)?t:e.constructor(t)}function Gt(e){if(e!==Object(e))throw new TypeError("Expected [K, V] tuple: "+e)}function Xt(e){return Me(e.size),E(e)}function Zt(e){return u(e)?r:s(e)?o:i}function en(e){return Object.create((u(e)?J:s(e)?H:$).prototype)}function tn(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):W.prototype.cacheResult.call(this)}function nn(e,t){return e>t?1:e<t?-1:0}function rn(e){var t=V(e);if(!t){if(!K(e))throw new TypeError("Expected iterable or array-like: "+e);t=V(n(e))}return t}function on(e,t){var n,r=function(i){if(i instanceof r)return i;if(!(this instanceof r))return new r(i);if(!n){n=!0;var a=Object.keys(e);!function(e,t){try{t.forEach(cn.bind(void 0,e))}catch(e){}}(o,a),o.size=a.length,o._name=t,o._keys=a,o._defaultValues=e}this._map=Be(i)},o=r.prototype=Object.create(an);return o.constructor=r,r}t(Nt,Be),Nt.of=function(){return this(arguments)},Nt.prototype.toString=function(){return this.__toString("OrderedMap {","}")},Nt.prototype.get=function(e,t){var n=this._map.get(e);return void 0!==n?this._list.get(n)[1]:t},Nt.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):Pt()},Nt.prototype.set=function(e,t){return Ft(this,e,t)},Nt.prototype.remove=function(e){return Ft(this,e,g)},Nt.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},Nt.prototype.__iterate=function(e,t){var n=this;return this._list.__iterate(function(t){return t&&e(t[1],t[0],n)},t)},Nt.prototype.__iterator=function(e,t){return this._list.fromEntrySeq().__iterator(e,t)},Nt.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e),n=this._list.__ensureOwner(e);return e?jt(t,n,e,this.__hash):(this.__ownerID=e,this._map=t,this._list=n,this)},Nt.isOrderedMap=Ct,Nt.prototype[h]=!0,Nt.prototype.delete=Nt.prototype.remove,t(It,J),It.prototype.get=function(e,t){return this._iter.get(e,t)},It.prototype.has=function(e){return this._iter.has(e)},It.prototype.valueSeq=function(){return this._iter.valueSeq()},It.prototype.reverse=function(){var e=this,t=zt(this,!0);return this._useKeys||(t.valueSeq=function(){return e._iter.toSeq().reverse()}),t},It.prototype.map=function(e,t){var n=this,r=Lt(this,e,t);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(e,t)}),r},It.prototype.__iterate=function(e,t){var n,r=this;return this._iter.__iterate(this._useKeys?function(t,n){return e(t,n,r)}:(n=t?Xt(this):0,function(o){return e(o,t?--n:n++,r)}),t)},It.prototype.__iterator=function(e,t){if(this._useKeys)return this._iter.__iterator(e,t);var n=this._iter.__iterator(F,t),r=t?Xt(this):0;return new B(function(){var o=n.next();return o.done?o:L(e,t?--r:r++,o.value,o)})},It.prototype[h]=!0,t(Rt,H),Rt.prototype.includes=function(e){return this._iter.includes(e)},Rt.prototype.__iterate=function(e,t){var n=this,r=0;return this._iter.__iterate(function(t){return e(t,r++,n)},t)},Rt.prototype.__iterator=function(e,t){var n=this._iter.__iterator(F,t),r=0;return new B(function(){var t=n.next();return t.done?t:L(e,r++,t.value,t)})},t(Dt,$),Dt.prototype.has=function(e){return this._iter.includes(e)},Dt.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate(function(t){return e(t,t,n)},t)},Dt.prototype.__iterator=function(e,t){var n=this._iter.__iterator(F,t);return new B(function(){var t=n.next();return t.done?t:L(e,t.value,t.value,t)})},t(Mt,J),Mt.prototype.entrySeq=function(){return this._iter.toSeq()},Mt.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate(function(t){if(t){Gt(t);var r=a(t);return e(r?t.get(1):t[1],r?t.get(0):t[0],n)}},t)},Mt.prototype.__iterator=function(e,t){var n=this._iter.__iterator(F,t);return new B(function(){for(;;){var t=n.next();if(t.done)return t;var r=t.value;if(r){Gt(r);var o=a(r);return L(e,o?r.get(0):r[0],o?r.get(1):r[1],t)}}})},Rt.prototype.cacheResult=It.prototype.cacheResult=Dt.prototype.cacheResult=Mt.prototype.cacheResult=tn,t(on,ke),on.prototype.toString=function(){return this.__toString(sn(this)+" {","}")},on.prototype.has=function(e){return this._defaultValues.hasOwnProperty(e)},on.prototype.get=function(e,t){if(!this.has(e))return t;var n=this._defaultValues[e];return this._map?this._map.get(e,n):n},on.prototype.clear=function(){if(this.__ownerID)return this._map&&this._map.clear(),this;var e=this.constructor;return e._empty||(e._empty=un(this,Xe()))},on.prototype.set=function(e,t){if(!this.has(e))throw new Error('Cannot set unknown key "'+e+'" on '+sn(this));if(this._map&&!this._map.has(e)&&t===this._defaultValues[e])return this;var n=this._map&&this._map.set(e,t);return this.__ownerID||n===this._map?this:un(this,n)},on.prototype.remove=function(e){if(!this.has(e))return this;var t=this._map&&this._map.remove(e);return this.__ownerID||t===this._map?this:un(this,t)},on.prototype.wasAltered=function(){return this._map.wasAltered()},on.prototype.__iterator=function(e,t){var n=this;return r(this._defaultValues).map(function(e,t){return n.get(t)}).__iterator(e,t)},on.prototype.__iterate=function(e,t){var n=this;return r(this._defaultValues).map(function(e,t){return n.get(t)}).__iterate(e,t)},on.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map&&this._map.__ensureOwner(e);return e?un(this,t,e):(this.__ownerID=e,this._map=t,this)};var an=on.prototype;function un(e,t,n){var r=Object.create(Object.getPrototypeOf(e));return r._map=t,r.__ownerID=n,r}function sn(e){return e._name||e.constructor.name||"Record"}function cn(e,t){Object.defineProperty(e,t,{get:function(){return this.get(t)},set:function(e){me(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})}function ln(e){return null==e?mn():fn(e)&&!l(e)?e:mn().withMutations(function(t){var n=i(e);Me(n.size),n.forEach(function(e){return t.add(e)})})}function fn(e){return!(!e||!e[pn])}an.delete=an.remove,an.deleteIn=an.removeIn=Ue.removeIn,an.merge=Ue.merge,an.mergeWith=Ue.mergeWith,an.mergeIn=Ue.mergeIn,an.mergeDeep=Ue.mergeDeep,an.mergeDeepWith=Ue.mergeDeepWith,an.mergeDeepIn=Ue.mergeDeepIn,an.setIn=Ue.setIn,an.update=Ue.update,an.updateIn=Ue.updateIn,an.withMutations=Ue.withMutations,an.asMutable=Ue.asMutable,an.asImmutable=Ue.asImmutable,t(ln,_e),ln.of=function(){return this(arguments)},ln.fromKeys=function(e){return this(r(e).keySeq())},ln.prototype.toString=function(){return this.__toString("Set {","}")},ln.prototype.has=function(e){return this._map.has(e)},ln.prototype.add=function(e){return vn(this,this._map.set(e,!0))},ln.prototype.remove=function(e){return vn(this,this._map.remove(e))},ln.prototype.clear=function(){return vn(this,this._map.clear())},ln.prototype.union=function(){var t=e.call(arguments,0);return 0===(t=t.filter(function(e){return 0!==e.size})).length?this:0!==this.size||this.__ownerID||1!==t.length?this.withMutations(function(e){for(var n=0;n<t.length;n++)i(t[n]).forEach(function(t){return e.add(t)})}):this.constructor(t[0])},ln.prototype.intersect=function(){var t=e.call(arguments,0);if(0===t.length)return this;t=t.map(function(e){return i(e)});var n=this;return this.withMutations(function(e){n.forEach(function(n){t.every(function(e){return e.includes(n)})||e.remove(n)})})},ln.prototype.subtract=function(){var t=e.call(arguments,0);if(0===t.length)return this;t=t.map(function(e){return i(e)});var n=this;return this.withMutations(function(e){n.forEach(function(n){t.some(function(e){return e.includes(n)})&&e.remove(n)})})},ln.prototype.merge=function(){return this.union.apply(this,arguments)},ln.prototype.mergeWith=function(t){var n=e.call(arguments,1);return this.union.apply(this,n)},ln.prototype.sort=function(e){return gn(Wt(this,e))},ln.prototype.sortBy=function(e,t){return gn(Wt(this,t,e))},ln.prototype.wasAltered=function(){return this._map.wasAltered()},ln.prototype.__iterate=function(e,t){var n=this;return this._map.__iterate(function(t,r){return e(r,r,n)},t)},ln.prototype.__iterator=function(e,t){return this._map.map(function(e,t){return t}).__iterator(e,t)},ln.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e);return e?this.__make(t,e):(this.__ownerID=e,this._map=t,this)},ln.isSet=fn;var dn,pn="@@__IMMUTABLE_SET__@@",hn=ln.prototype;function vn(e,t){return e.__ownerID?(e.size=t.size,e._map=t,e):t===e._map?e:0===t.size?e.__empty():e.__make(t)}function yn(e,t){var n=Object.create(hn);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function mn(){return dn||(dn=yn(Xe()))}function gn(e){return null==e?xn():bn(e)?e:xn().withMutations(function(t){var n=i(e);Me(n.size),n.forEach(function(e){return t.add(e)})})}function bn(e){return fn(e)&&l(e)}hn[pn]=!0,hn.delete=hn.remove,hn.mergeDeep=hn.merge,hn.mergeDeepWith=hn.mergeWith,hn.withMutations=Ue.withMutations,hn.asMutable=Ue.asMutable,hn.asImmutable=Ue.asImmutable,hn.__empty=mn,hn.__make=yn,t(gn,ln),gn.of=function(){return this(arguments)},gn.fromKeys=function(e){return this(r(e).keySeq())},gn.prototype.toString=function(){return this.__toString("OrderedSet {","}")},gn.isOrderedSet=bn;var kn,wn=gn.prototype;function _n(e,t){var n=Object.create(wn);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function xn(){return kn||(kn=_n(Pt()))}function On(e){return null==e?Cn():En(e)?e:Cn().unshiftAll(e)}function En(e){return!(!e||!e[Tn])}wn[h]=!0,wn.__empty=xn,wn.__make=_n,t(On,we),On.of=function(){return this(arguments)},On.prototype.toString=function(){return this.__toString("Stack [","]")},On.prototype.get=function(e,t){var n=this._head;for(e=S(this,e);n&&e--;)n=n.next;return n?n.value:t},On.prototype.peek=function(){return this._head&&this._head.value},On.prototype.push=function(){if(0===arguments.length)return this;for(var e=this.size+arguments.length,t=this._head,n=arguments.length-1;n>=0;n--)t={value:arguments[n],next:t};return this.__ownerID?(this.size=e,this._head=t,this.__hash=void 0,this.__altered=!0,this):Nn(e,t)},On.prototype.pushAll=function(e){if(0===(e=o(e)).size)return this;Me(e.size);var t=this.size,n=this._head;return e.reverse().forEach(function(e){t++,n={value:e,next:n}}),this.__ownerID?(this.size=t,this._head=n,this.__hash=void 0,this.__altered=!0,this):Nn(t,n)},On.prototype.pop=function(){return this.slice(1)},On.prototype.unshift=function(){return this.push.apply(this,arguments)},On.prototype.unshiftAll=function(e){return this.pushAll(e)},On.prototype.shift=function(){return this.pop.apply(this,arguments)},On.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Cn()},On.prototype.slice=function(e,t){if(A(e,t,this.size))return this;var n=N(e,this.size);if(C(t,this.size)!==this.size)return we.prototype.slice.call(this,e,t);for(var r=this.size-n,o=this._head;n--;)o=o.next;return this.__ownerID?(this.size=r,this._head=o,this.__hash=void 0,this.__altered=!0,this):Nn(r,o)},On.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Nn(this.size,this._head,e,this.__hash):(this.__ownerID=e,this.__altered=!1,this)},On.prototype.__iterate=function(e,t){if(t)return this.reverse().__iterate(e);for(var n=0,r=this._head;r&&!1!==e(r.value,n++,this);)r=r.next;return n},On.prototype.__iterator=function(e,t){if(t)return this.reverse().__iterator(e);var n=0,r=this._head;return new B(function(){if(r){var t=r.value;return r=r.next,L(e,n++,t)}return{value:void 0,done:!0}})},On.isStack=En;var Sn,Tn="@@__IMMUTABLE_STACK__@@",An=On.prototype;function Nn(e,t,n,r){var o=Object.create(An);return o.size=e,o._head=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Cn(){return Sn||(Sn=Nn(0))}function jn(e,t){var n=function(n){e.prototype[n]=t[n]};return Object.keys(t).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(n),e}An[Tn]=!0,An.withMutations=Ue.withMutations,An.asMutable=Ue.asMutable,An.asImmutable=Ue.asImmutable,An.wasAltered=Ue.wasAltered,n.Iterator=B,jn(n,{toArray:function(){Me(this.size);var e=new Array(this.size||0);return this.valueSeq().__iterate(function(t,n){e[n]=t}),e},toIndexedSeq:function(){return new Rt(this)},toJS:function(){return this.toSeq().map(function(e){return e&&"function"==typeof e.toJS?e.toJS():e}).__toJS()},toJSON:function(){return this.toSeq().map(function(e){return e&&"function"==typeof e.toJSON?e.toJSON():e}).__toJS()},toKeyedSeq:function(){return new It(this,!0)},toMap:function(){return Be(this.toKeyedSeq())},toObject:function(){Me(this.size);var e={};return this.__iterate(function(t,n){e[n]=t}),e},toOrderedMap:function(){return Nt(this.toKeyedSeq())},toOrderedSet:function(){return gn(u(this)?this.valueSeq():this)},toSet:function(){return ln(u(this)?this.valueSeq():this)},toSetSeq:function(){return new Dt(this)},toSeq:function(){return s(this)?this.toIndexedSeq():u(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return On(u(this)?this.valueSeq():this)},toList:function(){return dt(u(this)?this.valueSeq():this)},toString:function(){return"[Iterable]"},__toString:function(e,t){return 0===this.size?e+t:e+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+t},concat:function(){var t=e.call(arguments,0);return Yt(this,Qt(this,t))},includes:function(e){return this.some(function(t){return he(t,e)})},entries:function(){return this.__iterator(I)},every:function(e,t){Me(this.size);var n=!0;return this.__iterate(function(r,o,i){if(!e.call(t,r,o,i))return n=!1,!1}),n},filter:function(e,t){return Yt(this,qt(this,e,t,!0))},find:function(e,t,n){var r=this.findEntry(e,t);return r?r[1]:n},forEach:function(e,t){return Me(this.size),this.__iterate(t?e.bind(t):e)},join:function(e){Me(this.size),e=void 0!==e?""+e:",";var t="",n=!0;return this.__iterate(function(r){n?n=!1:t+=e,t+=null!=r?r.toString():""}),t},keys:function(){return this.__iterator(P)},map:function(e,t){return Yt(this,Lt(this,e,t))},reduce:function(e,t,n){var r,o;return Me(this.size),arguments.length<2?o=!0:r=t,this.__iterate(function(t,i,a){o?(o=!1,r=t):r=e.call(n,r,t,i,a)}),r},reduceRight:function(e,t,n){var r=this.toKeyedSeq().reverse();return r.reduce.apply(r,arguments)},reverse:function(){return Yt(this,zt(this,!0))},slice:function(e,t){return Yt(this,Ut(this,e,t,!0))},some:function(e,t){return!this.every(Dn(e),t)},sort:function(e){return Yt(this,Wt(this,e))},values:function(){return this.__iterator(F)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(e,t){return E(e?this.toSeq().filter(e,t):this)},countBy:function(e,t){return function(e,t,n){var r=Be().asMutable();return e.__iterate(function(o,i){r.update(t.call(n,o,i,e),0,function(e){return e+1})}),r.asImmutable()}(this,e,t)},equals:function(e){return ve(this,e)},entrySeq:function(){var e=this;if(e._cache)return new ee(e._cache);var t=e.toSeq().map(Rn).toIndexedSeq();return t.fromEntrySeq=function(){return e.toSeq()},t},filterNot:function(e,t){return this.filter(Dn(e),t)},findEntry:function(e,t,n){var r=n;return this.__iterate(function(n,o,i){if(e.call(t,n,o,i))return r=[o,n],!1}),r},findKey:function(e,t){var n=this.findEntry(e,t);return n&&n[0]},findLast:function(e,t,n){return this.toKeyedSeq().reverse().find(e,t,n)},findLastEntry:function(e,t,n){return this.toKeyedSeq().reverse().findEntry(e,t,n)},findLastKey:function(e,t){return this.toKeyedSeq().reverse().findKey(e,t)},first:function(){return this.find(T)},flatMap:function(e,t){return Yt(this,function(e,t,n){var r=Zt(e);return e.toSeq().map(function(o,i){return r(t.call(n,o,i,e))}).flatten(!0)}(this,e,t))},flatten:function(e){return Yt(this,Kt(this,e,!0))},fromEntrySeq:function(){return new Mt(this)},get:function(e,t){return this.find(function(t,n){return he(n,e)},void 0,t)},getIn:function(e,t){for(var n,r=this,o=rn(e);!(n=o.next()).done;){var i=n.value;if((r=r&&r.get?r.get(i,g):g)===g)return t}return r},groupBy:function(e,t){return function(e,t,n){var r=u(e),o=(l(e)?Nt():Be()).asMutable();e.__iterate(function(i,a){o.update(t.call(n,i,a,e),function(e){return(e=e||[]).push(r?[a,i]:i),e})});var i=Zt(e);return o.map(function(t){return Yt(e,i(t))})}(this,e,t)},has:function(e){return this.get(e,g)!==g},hasIn:function(e){return this.getIn(e,g)!==g},isSubset:function(e){return e="function"==typeof e.includes?e:n(e),this.every(function(t){return e.includes(t)})},isSuperset:function(e){return(e="function"==typeof e.isSubset?e:n(e)).isSubset(this)},keyOf:function(e){return this.findKey(function(t){return he(t,e)})},keySeq:function(){return this.toSeq().map(In).toIndexedSeq()},last:function(){return this.toSeq().reverse().first()},lastKeyOf:function(e){return this.toKeyedSeq().reverse().keyOf(e)},max:function(e){return Jt(this,e)},maxBy:function(e,t){return Jt(this,t,e)},min:function(e){return Jt(this,e?Mn(e):zn)},minBy:function(e,t){return Jt(this,t?Mn(t):zn,e)},rest:function(){return this.slice(1)},skip:function(e){return this.slice(Math.max(0,e))},skipLast:function(e){return Yt(this,this.toSeq().reverse().skip(e).reverse())},skipWhile:function(e,t){return Yt(this,Vt(this,e,t,!0))},skipUntil:function(e,t){return this.skipWhile(Dn(e),t)},sortBy:function(e,t){return Yt(this,Wt(this,t,e))},take:function(e){return this.slice(0,Math.max(0,e))},takeLast:function(e){return Yt(this,this.toSeq().reverse().take(e).reverse())},takeWhile:function(e,t){return Yt(this,function(e,t,n){var r=en(e);return r.__iterateUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterate(r,o);var a=0;return e.__iterate(function(e,o,u){return t.call(n,e,o,u)&&++a&&r(e,o,i)}),a},r.__iteratorUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterator(r,o);var a=e.__iterator(I,o),u=!0;return new B(function(){if(!u)return{value:void 0,done:!0};var e=a.next();if(e.done)return e;var o=e.value,s=o[0],c=o[1];return t.call(n,c,s,i)?r===I?e:L(r,s,c,e):(u=!1,{value:void 0,done:!0})})},r}(this,e,t))},takeUntil:function(e,t){return this.takeWhile(Dn(e),t)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(e){if(e.size===1/0)return 0;var t=l(e),n=u(e),r=t?1:0;return function(e,t){return t=xe(t,3432918353),t=xe(t<<15|t>>>-15,461845907),t=xe(t<<13|t>>>-13,5),t=xe((t=(t+3864292196|0)^e)^t>>>16,2246822507),t=Oe((t=xe(t^t>>>13,3266489909))^t>>>16)}(e.__iterate(n?t?function(e,t){r=31*r+qn(Ee(e),Ee(t))|0}:function(e,t){r=r+qn(Ee(e),Ee(t))|0}:t?function(e){r=31*r+Ee(e)|0}:function(e){r=r+Ee(e)|0}),r)}(this))}});var Pn=n.prototype;Pn[f]=!0,Pn[M]=Pn.values,Pn.__toJS=Pn.toArray,Pn.__toStringMapper=Bn,Pn.inspect=Pn.toSource=function(){return this.toString()},Pn.chain=Pn.flatMap,Pn.contains=Pn.includes,jn(r,{flip:function(){return Yt(this,Bt(this))},mapEntries:function(e,t){var n=this,r=0;return Yt(this,this.toSeq().map(function(o,i){return e.call(t,[i,o],r++,n)}).fromEntrySeq())},mapKeys:function(e,t){var n=this;return Yt(this,this.toSeq().flip().map(function(r,o){return e.call(t,r,o,n)}).flip())}});var Fn=r.prototype;function In(e,t){return t}function Rn(e,t){return[t,e]}function Dn(e){return function(){return!e.apply(this,arguments)}}function Mn(e){return function(){return-e.apply(this,arguments)}}function Bn(e){return"string"==typeof e?JSON.stringify(e):String(e)}function Ln(){return O(arguments)}function zn(e,t){return e<t?1:e>t?-1:0}function qn(e,t){return e^t+2654435769+(e<<6)+(e>>2)|0}return Fn[d]=!0,Fn[M]=Pn.entries,Fn.__toJS=Pn.toObject,Fn.__toStringMapper=function(e,t){return JSON.stringify(t)+": "+Bn(e)},jn(o,{toKeyedSeq:function(){return new It(this,!1)},filter:function(e,t){return Yt(this,qt(this,e,t,!1))},findIndex:function(e,t){var n=this.findEntry(e,t);return n?n[0]:-1},indexOf:function(e){var t=this.keyOf(e);return void 0===t?-1:t},lastIndexOf:function(e){var t=this.lastKeyOf(e);return void 0===t?-1:t},reverse:function(){return Yt(this,zt(this,!1))},slice:function(e,t){return Yt(this,Ut(this,e,t,!1))},splice:function(e,t){var n=arguments.length;if(t=Math.max(0|t,0),0===n||2===n&&!t)return this;e=N(e,e<0?this.count():this.size);var r=this.slice(0,e);return Yt(this,1===n?r:r.concat(O(arguments,2),this.slice(e+t)))},findLastIndex:function(e,t){var n=this.findLastEntry(e,t);return n?n[0]:-1},first:function(){return this.get(0)},flatten:function(e){return Yt(this,Kt(this,e,!1))},get:function(e,t){return(e=S(this,e))<0||this.size===1/0||void 0!==this.size&&e>this.size?t:this.find(function(t,n){return n===e},void 0,t)},has:function(e){return(e=S(this,e))>=0&&(void 0!==this.size?this.size===1/0||e<this.size:-1!==this.indexOf(e))},interpose:function(e){return Yt(this,function(e,t){var n=en(e);return n.size=e.size&&2*e.size-1,n.__iterateUncached=function(n,r){var o=this,i=0;return e.__iterate(function(e,r){return(!i||!1!==n(t,i++,o))&&!1!==n(e,i++,o)},r),i},n.__iteratorUncached=function(n,r){var o,i=e.__iterator(F,r),a=0;return new B(function(){return(!o||a%2)&&(o=i.next()).done?o:a%2?L(n,a++,t):L(n,a++,o.value,o)})},n}(this,e))},interleave:function(){var e=[this].concat(O(arguments)),t=$t(this.toSeq(),H.of,e),n=t.flatten(!0);return t.size&&(n.size=t.size*e.length),Yt(this,n)},keySeq:function(){return ge(0,this.size)},last:function(){return this.get(-1)},skipWhile:function(e,t){return Yt(this,Vt(this,e,t,!1))},zip:function(){var e=[this].concat(O(arguments));return Yt(this,$t(this,Ln,e))},zipWith:function(e){var t=O(arguments);return t[0]=this,Yt(this,$t(this,e,t))}}),o.prototype[p]=!0,o.prototype[h]=!0,jn(i,{get:function(e,t){return this.has(e)?e:t},includes:function(e){return this.has(e)},keySeq:function(){return this.valueSeq()}}),i.prototype.has=Pn.includes,i.prototype.contains=i.prototype.includes,jn(J,r.prototype),jn(H,o.prototype),jn($,i.prototype),jn(ke,r.prototype),jn(we,o.prototype),jn(_e,i.prototype),{Iterable:n,Seq:W,Collection:be,Map:Be,OrderedMap:Nt,List:dt,Stack:On,Set:ln,OrderedSet:gn,Record:on,Range:ge,Repeat:ye,is:he,fromJS:fe}}()},function(e,t,n){"use strict";e.exports=n(89)},function(e,t,n){"use strict";n.d(t,"c",function(){return o}),n.d(t,"a",function(){return i}),n.d(t,"e",function(){return a}),n.d(t,"b",function(){return u}),n.d(t,"d",function(){return s});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function u(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function u(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,u)}s((r=r.apply(e,t||[])).next())})}function s(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return L}),n.d(t,"b",function(){return d}),n.d(t,"c",function(){return E}),n.d(t,"d",function(){return U}),n.d(t,"e",function(){return Q}),n.d(t,"f",function(){return W}),n.d(t,"g",function(){return P}),n.d(t,"h",function(){return F}),n.d(t,"i",function(){return b}),n.d(t,"j",function(){return N}),n.d(t,"k",function(){return O}),n.d(t,"l",function(){return j}),n.d(t,"m",function(){return T}),n.d(t,"n",function(){return A}),n.d(t,"o",function(){return C}),n.d(t,"p",function(){return f}),n.d(t,"q",function(){return G}),n.d(t,"r",function(){return _}),n.d(t,"s",function(){return w}),n.d(t,"t",function(){return h}),n.d(t,"u",function(){return y}),n.d(t,"v",function(){return v}),n.d(t,"w",function(){return g}),n.d(t,"x",function(){return H}),n.d(t,"y",function(){return $}),n.d(t,"z",function(){return X}),n.d(t,"A",function(){return ee}),n.d(t,"B",function(){return te}),n.d(t,"C",function(){return V}),n.d(t,"D",function(){return q}),n.d(t,"E",function(){return p}),n.d(t,"F",function(){return k}),n.d(t,"G",function(){return c}),n.d(t,"H",function(){return m}),n.d(t,"I",function(){return Y});var r=n(12),o=n(5),i=n(2),a=n(87),u=n.n(a);n(82);function s(e,t,n,r){if(function(e){return"IntValue"===e.kind}(n)||function(e){return"FloatValue"===e.kind}(n))e[t.value]=Number(n.value);else if(function(e){return"BooleanValue"===e.kind}(n)||function(e){return"StringValue"===e.kind}(n))e[t.value]=n.value;else if(function(e){return"ObjectValue"===e.kind}(n)){var i={};n.fields.map(function(e){return s(i,e.name,e.value,r)}),e[t.value]=i}else if(function(e){return"Variable"===e.kind}(n)){var a=(r||{})[n.name.value];e[t.value]=a}else if(function(e){return"ListValue"===e.kind}(n))e[t.value]=n.values.map(function(e){var n={};return s(n,t,e,r),n[t.value]});else if(function(e){return"EnumValue"===e.kind}(n))e[t.value]=n.value;else{if(!function(e){return"NullValue"===e.kind}(n))throw new o.a(17);e[t.value]=null}}function c(e,t){var n=null;e.directives&&(n={},e.directives.forEach(function(e){n[e.name.value]={},e.arguments&&e.arguments.forEach(function(r){var o=r.name,i=r.value;return s(n[e.name.value],o,i,t)})}));var r=null;return e.arguments&&e.arguments.length&&(r={},e.arguments.forEach(function(e){var n=e.name,o=e.value;return s(r,n,o,t)})),f(e.name.value,r,n)}var l=["connection","include","skip","client","rest","export"];function f(e,t,n){if(n&&n.connection&&n.connection.key){if(n.connection.filter&&n.connection.filter.length>0){var r=n.connection.filter?n.connection.filter:[];r.sort();var o=t,i={};return r.forEach(function(e){i[e]=o[e]}),n.connection.key+"("+JSON.stringify(i)+")"}return n.connection.key}var a=e;if(t){var s=u()(t);a+="("+s+")"}return n&&Object.keys(n).forEach(function(e){-1===l.indexOf(e)&&(n[e]&&Object.keys(n[e]).length?a+="@"+e+"("+JSON.stringify(n[e])+")":a+="@"+e)}),a}function d(e,t){if(e.arguments&&e.arguments.length){var n={};return e.arguments.forEach(function(e){var r=e.name,o=e.value;return s(n,r,o,t)}),n}return null}function p(e){return e.alias?e.alias.value:e.name.value}function h(e){return"Field"===e.kind}function v(e){return"InlineFragment"===e.kind}function y(e){return e&&"id"===e.type&&"boolean"==typeof e.generated}function m(e,t){return void 0===t&&(t=!1),Object(i.a)({type:"id",generated:t},"string"==typeof e?{id:e,typename:void 0}:e)}function g(e){return null!=e&&"object"==typeof e&&"json"===e.type}function b(e,t){if(e.directives&&e.directives.length){var n={};return e.directives.forEach(function(e){n[e.name.value]=d(e,t)}),n}return null}function k(e,t){return void 0===t&&(t={}),(n=e.directives,n?n.filter(x).map(function(e){var t=e.arguments;e.name.value,Object(o.b)(t&&1===t.length,4);var n=t[0];Object(o.b)(n.name&&"if"===n.name.value,5);var r=n.value;return Object(o.b)(r&&("Variable"===r.kind||"BooleanValue"===r.kind),6),{directive:e,ifArgument:n}}):[]).every(function(e){var n=e.directive,r=e.ifArgument,i=!1;return"Variable"===r.value.kind?(i=t[r.value.name.value],Object(o.b)(void 0!==i,3)):i=r.value.value,"skip"===n.name.value?!i:i});var n}function w(e,t){return function(e){var t=[];return Object(r.b)(e,{Directive:function(e){t.push(e.name.value)}}),t}(t).some(function(t){return e.indexOf(t)>-1})}function _(e){return e&&w(["client"],e)&&w(["export"],e)}function x(e){var t=e.name.value;return"skip"===t||"include"===t}function O(e,t){var n=t,r=[];return e.definitions.forEach(function(e){if("OperationDefinition"===e.kind)throw new o.a(1);"FragmentDefinition"===e.kind&&r.push(e)}),void 0===n&&(Object(o.b)(1===r.length,2),n=r[0].name.value),Object(i.a)({},e,{definitions:[{kind:"OperationDefinition",operation:"query",selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:n}}]}}].concat(e.definitions)})}function E(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach(function(t){null!=t&&Object.keys(t).forEach(function(n){e[n]=t[n]})}),e}function S(e){Object(o.b)(e&&"Document"===e.kind,8);var t=e.definitions.filter(function(e){return"FragmentDefinition"!==e.kind}).map(function(e){if("OperationDefinition"!==e.kind)throw new o.a(9);return e});return Object(o.b)(t.length<=1,10),e}function T(e){return S(e),e.definitions.filter(function(e){return"OperationDefinition"===e.kind})[0]}function A(e){return e.definitions.filter(function(e){return"OperationDefinition"===e.kind&&e.name}).map(function(e){return e.name.value})[0]||null}function N(e){return e.definitions.filter(function(e){return"FragmentDefinition"===e.kind})}function C(e){var t=T(e);return Object(o.b)(t&&"query"===t.operation,12),t}function j(e){var t;S(e);for(var n=0,r=e.definitions;n<r.length;n++){var i=r[n];if("OperationDefinition"===i.kind){var a=i.operation;if("query"===a||"mutation"===a||"subscription"===a)return i}"FragmentDefinition"!==i.kind||t||(t=i)}if(t)return t;throw new o.a(16)}function P(e){void 0===e&&(e=[]);var t={};return e.forEach(function(e){t[e.name.value]=e}),t}function F(e){if(e&&e.variableDefinitions&&e.variableDefinitions.length){var t=e.variableDefinitions.filter(function(e){return e.defaultValue}).map(function(e){var t=e.variable,n=e.defaultValue,r={};return s(r,t.name,n),r});return E.apply(void 0,[{}].concat(t))}return{}}function I(e,t,n){var r=0;return e.forEach(function(n,o){t.call(this,n,o,e)&&(e[r++]=n)},n),e.length=r,e}var R={kind:"Field",name:{kind:"Name",value:"__typename"}};function D(e){return function e(t,n){return t.selectionSet.selections.every(function(t){return"FragmentSpread"===t.kind&&e(n[t.name.value],n)})}(T(e)||function(e){Object(o.b)("Document"===e.kind,13),Object(o.b)(e.definitions.length<=1,14);var t=e.definitions[0];return Object(o.b)("FragmentDefinition"===t.kind,15),t}(e),P(N(e)))?null:e}function M(e){return function(t){return e.some(function(e){return e.name&&e.name===t.name.value||e.test&&e.test(t)})}}function B(e,t){var n=Object.create(null),o=[],a=Object.create(null),u=[],s=D(Object(r.b)(t,{Variable:{enter:function(e,t,r){"VariableDefinition"!==r.kind&&(n[e.name.value]=!0)}},Field:{enter:function(t){if(e&&t.directives&&(e.some(function(e){return e.remove})&&t.directives&&t.directives.some(M(e))))return t.arguments&&t.arguments.forEach(function(e){"Variable"===e.value.kind&&o.push({name:e.value.name.value})}),t.selectionSet&&function e(t){var n=[];t.selections.forEach(function(t){(h(t)||v(t))&&t.selectionSet?e(t.selectionSet).forEach(function(e){return n.push(e)}):"FragmentSpread"===t.kind&&n.push(t)});return n}(t.selectionSet).forEach(function(e){u.push({name:e.name.value})}),null}},FragmentSpread:{enter:function(e){a[e.name.value]=!0}},Directive:{enter:function(t){if(M(e)(t))return null}}}));return s&&I(o,function(e){return!n[e.name]}).length&&(s=function(e,t){var n=function(e){return function(t){return e.some(function(e){return t.value&&"Variable"===t.value.kind&&t.value.name&&(e.name===t.value.name.value||e.test&&e.test(t))})}}(e);return D(Object(r.b)(t,{OperationDefinition:{enter:function(t){return Object(i.a)({},t,{variableDefinitions:t.variableDefinitions.filter(function(t){return!e.some(function(e){return e.name===t.variable.name.value})})})}},Field:{enter:function(t){if(e.some(function(e){return e.remove})){var r=0;if(t.arguments.forEach(function(e){n(e)&&(r+=1)}),1===r)return null}}},Argument:{enter:function(e){if(n(e))return null}}}))}(o,s)),s&&I(u,function(e){return!a[e.name]}).length&&(s=function(e,t){function n(t){if(e.some(function(e){return e.name===t.name.value}))return null}return D(Object(r.b)(t,{FragmentSpread:{enter:n},FragmentDefinition:{enter:n}}))}(u,s)),s}function L(e){return Object(r.b)(S(e),{SelectionSet:{enter:function(e,t,n){if(!n||"OperationDefinition"!==n.kind){var r=e.selections;if(r)if(!r.some(function(e){return h(e)&&("__typename"===e.name.value||0===e.name.value.lastIndexOf("__",0))})){var o=n;if(!(h(o)&&o.directives&&o.directives.some(function(e){return"export"===e.name.value})))return Object(i.a)({},e,{selections:r.concat([R])})}}}}})}var z={test:function(e){var t="connection"===e.name.value;return t&&(!e.arguments||e.arguments.some(function(e){return"key"===e.name.value})),t}};function q(e){return B([z],S(e))}function U(e){return"query"===j(e).operation?e:Object(r.b)(e,{OperationDefinition:{enter:function(e){return Object(i.a)({},e,{operation:"query"})}}})}function V(e){S(e);var t=B([{test:function(e){return"client"===e.name.value},remove:!0}],e);return t&&(t=Object(r.b)(t,{FragmentDefinition:{enter:function(e){if(e.selectionSet&&e.selectionSet.selections.every(function(e){return h(e)&&"__typename"===e.name.value}))return null}}})),t}var Q="function"==typeof WeakMap&&!("object"==typeof navigator&&"ReactNative"===navigator.product),K=Object.prototype.toString;function W(e){return function e(t,n){switch(K.call(t)){case"[object Array]":if(n.has(t))return n.get(t);var r=t.slice(0);return n.set(t,r),r.forEach(function(t,o){r[o]=e(t,n)}),r;case"[object Object]":if(n.has(t))return n.get(t);var o=Object.create(Object.getPrototypeOf(t));return n.set(t,o),Object.keys(t).forEach(function(r){o[r]=e(t[r],n)}),o;default:return t}}(e,new Map)}function J(t){return(void 0!==e?"production":"development")===t}function H(){return!0===J("production")}function $(){return!0===J("test")}function Y(e){try{return e()}catch(e){console.error&&console.error(e)}}function G(e){return e.errors&&e.errors.length}function X(e){if((!0===J("development")||$())&&!("function"==typeof Symbol&&"string"==typeof Symbol("")))return function e(t){return Object.freeze(t),Object.getOwnPropertyNames(t).forEach(function(n){null===t[n]||"object"!=typeof t[n]&&"function"!=typeof t[n]||Object.isFrozen(t[n])||e(t[n])}),t}(e);return e}var Z=Object.prototype.hasOwnProperty;function ee(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return te(e)}function te(e){var t=e[0]||{},n=e.length;if(n>1){var r=[];t=oe(t,r);for(var o=1;o<n;++o)t=re(t,e[o],r)}return t}function ne(e){return null!==e&&"object"==typeof e}function re(e,t,n){return ne(t)&&ne(e)?(Object.isExtensible&&!Object.isExtensible(e)&&(e=oe(e,n)),Object.keys(t).forEach(function(r){var o=t[r];if(Z.call(e,r)){var i=e[r];o!==i&&(e[r]=re(oe(i,n),o,n))}else e[r]=o}),e):t}function oe(e,t){return null!==e&&"object"==typeof e&&t.indexOf(e)<0&&(e=Array.isArray(e)?e.slice(0):Object(i.a)({__proto__:Object.getPrototypeOf(e)},e),t.push(e)),e}Object.create({})}).call(this,n(30))},function(e,t,n){"use strict";t.a=function(e,t){0}},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return u}),n.d(t,"b",function(){return s});var r=n(2),o="Invariant Violation",i=Object.setPrototypeOf,a=void 0===i?function(e,t){return e.__proto__=t,e}:i,u=function(e){function t(n){void 0===n&&(n=o);var r=e.call(this,"number"==typeof n?o+": "+n+" (see https://github.com/apollographql/invariant-packages)":n)||this;return r.framesToPop=1,r.name=o,a(r,t.prototype),r}return Object(r.c)(t,e),t}(Error);function s(e,t){if(!e)throw new u(t)}function c(e){return function(){return console[e].apply(console,arguments)}}!function(e){e.warn=c("warn"),e.error=c("error")}(s||(s={}));var l={env:{}};if("object"==typeof e)l=e;else try{Function("stub","process = stub")(l)}catch(e){}}).call(this,n(30))},function(e,t,n){e.exports=n(93)()},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return fe}),n.d(t,"b",function(){return _e}),n.d(t,"c",function(){return V}),n.d(t,"d",function(){return re}),n.d(t,"e",function(){return ht}),n.d(t,"f",function(){return ie}),n.d(t,"g",function(){return gt}),n.d(t,"h",function(){return K}),n.d(t,"i",function(){return ce}),n.d(t,"j",function(){return z}),n.d(t,"k",function(){return Z}),n.d(t,"l",function(){return $}),n.d(t,"m",function(){return se}),n.d(t,"n",function(){return pe});var r=n(0),o=n(8),i=n.n(o),a=n(4),u=n(10),s=n(40),c=n.n(s),l=n(58),f=n(24),d=n.n(f),p=n(23),h=n.n(p),v=n(84),y=n.n(v),m=void 0,g=void 0;function b(){m=0,g=function(){return""+m++}}b();var k={create:function(e){if(null==e)return g();if("string"==typeof e)return e;throw new Error("Keys must be strings, but you passed: "+e)},setGenerator:function(e){g=e},resetGenerator:b},w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},x=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),O=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},S=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},T=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},A=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},N=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},C=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)};function j(e,t){for(var n=L(e,t),r=0;r<n;r++){var o=e.get(r),i=t.get(r);if(o<i)return-1;if(o>i)return 1}return e.size===t.size?0:null}function P(e){if(null==e)return null;if(r.List.isList(e))return e;if(Array.isArray(e))return Object(r.List)(e);throw new Error("Paths can only be created from arrays or lists, but you passed: "+e)}function F(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:L(e,t);return[e.slice(0,n),t.slice(0,n)]}function I(e){return R(e,0-(arguments.length>1&&void 0!==arguments[1]?arguments[1]:1),arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.size-1)}function R(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.size-1,r=e.get(n)+t;return e.set(n,r)}function D(e,t){var n=F(e,t),r=N(n,2),o=r[0],i=r[1];return e.size<t.size&&0===j(o,i)}function M(e,t){return e.equals(t)}function B(e,t){var n=e.size-1,r=F(e,t,n),o=N(r,2),i=o[0],a=o[1],u=e.get(n),s=t.get(n);return M(i,a)&&u<s}function L(e,t){return Math.min(e.size,t.size)}var z={compare:j,create:P,crop:F,decrement:I,getAncestors:function(e){return Object(r.List)().withMutations(function(t){for(var n=0;n<e.size;n++)t.push(e.slice(0,n))})},increment:R,isAbove:D,isAfter:function(e,t){var n=F(e,t),r=N(n,2);return 1===j(r[0],r[1])},isBefore:function(e,t){var n=F(e,t),r=N(n,2);return-1===j(r[0],r[1])},isEqual:M,isOlder:function(e,t){var n=e.size-1,r=F(e,t,n),o=N(r,2),i=o[0],a=o[1],u=e.get(n),s=t.get(n);return M(i,a)&&u>s},isPath:function(e){return(r.List.isList(e)||Array.isArray(e))&&e.every(function(e){return"number"==typeof e})},isSibling:function(e,t){if(e.size!==t.size)return!1;var n=e.butLast(),r=t.butLast();return n.equals(r)},isYounger:B,lift:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e.slice(0,-1*t)},drop:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return e.slice(t)},max:function(e,t){return Math.max(e.size,t.size)},min:L,relate:function(e,t){for(var n=[],r=0;r<e.size&&r<t.size;r++){var o=e.get(r);if(o!==t.get(r))break;n.push(o)}return P(n)},transform:function(e,t){var n=t.type,o=t.position,i=t.path;if("add_mark"===n||"insert_text"===n||"remove_mark"===n||"remove_text"===n||"set_mark"===n||"set_node"===n||"set_selection"===n||"set_value"===n||"add_annotation"===n||"remove_annotation"===n||"set_annotation"===n||0===e.size)return Object(r.List)([e]);var a=i.size-1,u=M(i,e),s=B(i,e),c=D(i,e);if("insert_node"===n&&(u||s||c)&&(e=R(e,1,a)),"remove_node"===n&&(s?e=I(e,1,a):(u||c)&&(e=[])),"merge_node"===n&&(u||s?e=I(e,1,a):c&&(e=R(e=I(e,1,a),o,a+1))),"split_node"===n&&(u?e=[e,R(e)]:s?e=R(e,1,a):c&&e.get(a+1)>=o&&(e=I(e=R(e,1,a),o,a+1))),"move_node"===n){var l=t.newPath;if(M(i,l))return Object(r.List)([e]);c||u?e=B(i,l)&&i.size<l.size?I(l,1,L(l,i)-1).concat(e.slice(i.size)):l.concat(e.slice(i.size)):(s&&(e=I(e,1,a)),(B(l,e)||M(l,e)||D(l,e))&&(e=R(e,1,l.size-1)))}var f=Array.isArray(e)?e:[e];return Object(r.List)(f)}},q={key:void 0,offset:void 0,path:void 0},U=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"isAfterPoint",value:function(e){return!this.isUnset&&(this.key===e.key&&this.offset>e.offset||1===z.compare(this.path,e.path))}},{key:"isAfterRange",value:function(e){return!this.isUnset&&this.isAfterPoint(e.end)}},{key:"isAtEndOfRange",value:function(e){return!this.isUnset&&this.equals(e.end)}},{key:"isAtStartOfRange",value:function(e){return!this.isUnset&&this.equals(e.start)}},{key:"isBeforePoint",value:function(e){return!this.isUnset&&(this.key===e.key&&this.offset<e.offset||-1===z.compare(this.path,e.path))}},{key:"isBeforeRange",value:function(e){return!this.isUnset&&this.isBeforePoint(e.start)}},{key:"isInRange",value:function(e){return!this.isUnset&&(this.equals(e.start)||this.equals(e.end)||this.isAfterPoint(e.start)&&this.isBeforePoint(e.end))}},{key:"isAtEndOfNode",value:function(e){if(this.isUnset)return!1;var t=e.getLastText();return this.key===t.key&&this.offset===t.text.length}},{key:"isAtStartOfNode",value:function(e){if(this.isUnset)return!1;if(0!==this.offset)return!1;var t=e.getFirstText();return this.key===t.key}},{key:"isInNode",value:function(e){return!this.isUnset&&("text"===e.object&&e.key===this.key||!!e.hasNode(this.key))}},{key:"moveBackward",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;if(0===e)return this;if(e<0)return this.moveForward(-e);var t=this.setOffset(this.offset-e);return t}},{key:"moveForward",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;if(0===e)return this;if(e<0)return this.moveBackward(-e);var t=this.setOffset(this.offset+e);return t}},{key:"moveTo",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.key;"number"==typeof e?(t=e,e=this.path):"string"==typeof e?e=(n=e)===this.key?this.path:null:n=e.equals(this.path)?this.key:null;var r=this.merge({key:n,path:e,offset:t});return r}},{key:"moveToStartOfNode",value:function(e){var t=e.getFirstText();return this.moveTo(t.key,0)}},{key:"moveToEndOfNode",value:function(e){var t=e.getLastText();return this.moveTo(t.key,t.text.length)}},{key:"normalize",value:function(e){if(null==this.key&&null==this.path)return this.setOffset(null);var n=this.key,r=this.offset,o=this.path,i=o&&e.getNode(o);if(!i&&(i=e.getNode(n)))return this.merge({path:e.getPath(n)});if(!i){Object(a.a)(!1,"A point's `path` or `key` invalid and was reset!");var u=e.getFirstText();return u?this.merge({key:u.key,offset:0,path:e.getPath(u.key)}):t.create()}if("text"!==i.object){Object(a.a)(!1,"A point should not reference a non-text node!");var s=i.getTextAtOffset(r),c=i.getOffset(s.key);return this.merge({offset:r-c,key:s.key,path:e.getPath(s.key)})}i&&o&&n&&n!==i.key&&Object(a.a)(!1,"A point's `key` did not match its `path`!");var l=this.merge({key:i.key,path:null==o?e.getPath(i.key):o,offset:null==r?0:Math.min(r,i.text.length)});if(l.offset===i.text.length){var f=e.getClosestBlock(l.path).getNextText();f&&(l=l.merge({key:f.key,path:e.getPath(f.key),offset:0}))}return l}},{key:"setKey",value:function(e){return null!=e&&(e=k.create(e)),this.set("key",e)}},{key:"setOffset",value:function(e){return this.set("offset",e)}},{key:"setPath",value:function(e){return null!=e&&(e=z.create(e)),this.set("path",e)}},{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,key:this.key,offset:this.offset,path:this.path&&this.path.toArray()};return e.preserveKeys||delete t.key,t}},{key:"unset",value:function(){return this.merge({key:null,offset:null,path:null})}},{key:"isSet",get:function(){return null!=this.key&&null!=this.offset&&null!=this.path}},{key:"isUnset",get:function(){return!this.isSet}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isPoint(e))return e;if(i()(e))return t.fromJSON(e);throw new Error("`Point.create` only accepts objects or points, but you passed it: "+e)}},{key:"createProperties",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isPoint(e))return{key:e.key,offset:e.offset,path:e.path};if(i()(e)){var n={};return"key"in e&&(n.key=e.key),"offset"in e&&(n.offset=e.offset),"path"in e&&(n.path=z.create(e.path)),"path"in e&&!("key"in e)&&(n.key=null),"key"in e&&!("path"in e)&&(n.path=null),n}throw new Error("`Point.createProperties` only accepts objects or points, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var n=e.key,r=void 0===n?null:n,o=e.offset,i=void 0===o?null:o,a=e.path,u=void 0===a?null:a;return new t({key:r,offset:i,path:z.create(u)})}}]),t}(Object(r.Record)(q)),V=function(){function e(){_(this,e)}return x(e,null,[{key:"create",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(r.Map.isMap(t))return t;if(i()(t))return e.fromJSON(t);throw new Error("`Data.create` only accepts objects or maps, but you passed it: "+t)}},{key:"fromJSON",value:function(e){return new r.Map(e)}}]),e}();V.fromJS=V.fromJSON;var Q={data:void 0,type:void 0},K=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"toJSON",value:function(){return{object:this.object,type:this.type,data:this.data.toJSON()}}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isMark(e))return e;if("string"==typeof e&&(e={type:e}),i()(e))return t.fromJSON(e);throw new Error("`Mark.create` only accepts objects, strings or marks, but you passed it: "+e)}},{key:"createSet",value:function(e){if(r.Set.isSet(e)||Array.isArray(e))return new r.Set(e.map(t.create));if(null==e)return Object(r.Set)();throw new Error("`Mark.createSet` only accepts sets, arrays or null, but you passed it: "+e)}},{key:"createProperties",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isMark(e))return{data:e.data,type:e.type};if("string"==typeof e)return{type:e};if(i()(e)){var n={};return"type"in e&&(n.type=e.type),"data"in e&&(n.data=V.create(e.data)),n}throw new Error("`Mark.createProperties` only accepts objects, strings or marks, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var n=e.data,o=void 0===n?{}:n,i=e.type;if("string"!=typeof i)throw new Error("`Mark.fromJS` requires a `type` string.");return new t({type:i,data:new r.Map(o)})}},{key:"isMarkSet",value:function(e){return r.Set.isSet(e)&&e.every(function(e){return t.isMark(e)})}}]),t}(Object(r.Record)(Q)),W={type:void 0,data:void 0,anchor:void 0,focus:void 0},J=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"setProperties",value:function(e){return e=t.createProperties(e),this.merge(e)}},{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,type:this.type,data:this.data.toJSON(),anchor:this.anchor.toJSON(e),focus:this.focus.toJSON(e)};return t}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isDecoration(e))return e;if(Z.isRange(e))return t.fromJSON(Z.createProperties(e));if(i()(e))return t.fromJSON(e);throw new Error("`Decoration.create` only accepts objects or decorations, but you passed it: "+e)}},{key:"createList",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.List.isList(e)||Array.isArray(e)){var n=new r.List(e.map(t.create));return n}throw new Error("`Decoration.createList` only accepts arrays or lists, but you passed it: "+e)}},{key:"createProperties",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isDecoration(e))return{type:e.type,data:e.data,anchor:U.createProperties(e.anchor),focus:U.createProperties(e.focus),mark:K.create(e.mark)};if(i()(e)){var n={};return"type"in e&&(n.type=e.type),"data"in e&&(n.data=V.create(e.data)),"anchor"in e&&(n.anchor=U.create(e.anchor)),"focus"in e&&(n.focus=U.create(e.focus)),n}throw new Error("`Decoration.createProperties` only accepts objects or decorations, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var n=e.anchor,r=e.focus,o=e.type,i=e.data;if(e.mark&&!o&&(Object(a.a)(!1,"As of slate@0.47 the `decoration.mark` property has been changed to `decoration.type` and `decoration.data` directly."),o=e.mark.type,i=e.mark.data),!o)throw new Error("Decorations must be created with a `type`, but you passed: "+JSON.stringify(e));return new t({type:o,data:V.create(i||{}),anchor:U.fromJSON(n||{}),focus:U.fromJSON(r||{})})}}]),t}(Object(r.Record)(W)),H={anchor:void 0,focus:void 0,isFocused:void 0,marks:void 0},$=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"setIsFocused",value:function(e){return this.set("isFocused",e)}},{key:"setMarks",value:function(e){return this.set("marks",e)}},{key:"setProperties",value:function(e){var n=e=t.createProperties(e),r=n.anchor,o=n.focus,i=T(n,["anchor","focus"]);return r&&(i.anchor=U.create(r)),o&&(i.focus=U.create(o)),this.merge(i)}},{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,anchor:this.anchor.toJSON(e),focus:this.focus.toJSON(e),isFocused:this.isFocused,marks:null==this.marks?null:this.marks.toArray().map(function(e){return e.toJSON()})};return t}},{key:"isBlurred",get:function(){return!this.isFocused}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isSelection(e))return e;if(Z.isRange(e))return t.fromJSON(Z.createProperties(e));if(i()(e))return t.fromJSON(e);throw new Error("`Selection.create` only accepts objects, ranges or selections, but you passed it: "+e)}},{key:"createProperties",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isSelection(e))return{anchor:U.createProperties(e.anchor),focus:U.createProperties(e.focus),isFocused:e.isFocused,marks:e.marks};if(Z.isRange(e))return{anchor:U.createProperties(e.anchor),focus:U.createProperties(e.focus)};if(i()(e)){var n={};return"anchor"in e&&(n.anchor=U.create(e.anchor)),"focus"in e&&(n.focus=U.create(e.focus)),"isFocused"in e&&(n.isFocused=e.isFocused),"marks"in e&&(n.marks=null==e.marks?null:K.createSet(e.marks)),n}throw new Error("`Selection.createProperties` only accepts objects, ranges or selections, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var n=e.anchor,o=e.focus,i=e.isFocused,a=void 0!==i&&i,u=e.marks,s=void 0===u?null:u;return new t({anchor:U.fromJSON(n||{}),focus:U.fromJSON(o||{}),isFocused:a,marks:null==s?null:new r.Set(s.map(K.fromJSON))})}}]),t}(Object(r.Record)(H)),Y={annotation:"@@__SLATE_ANNOTATION__@@",block:"@@__SLATE_BLOCK__@@",change:"@@__SLATE_CHANGE__@@",decoration:"@@__SLATE_DECORATION__@@",document:"@@__SLATE_DOCUMENT__@@",editor:"@@__SLATE_EDITOR__@@",inline:"@@__SLATE_INLINE__@@",leaf:"@@__SLATE_LEAF__@@",mark:"@@__SLATE_MARK__@@",operation:"@@__SLATE_OPERATION__@@",point:"@@__SLATE_POINT__@@",range:"@@__SLATE_RANGE__@@",selection:"@@__SLATE_SELECTION__@@",text:"@@__SLATE_TEXT__@@",value:"@@__SLATE_VALUE__@@"};function G(e,t){return!(!t||!t[Y[e]])}var X={anchor:void 0,focus:void 0},Z=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,anchor:this.anchor.toJSON(e),focus:this.focus.toJSON(e)};return t}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isRange(e))return"range"===e.object?e:t.fromJSON(t.createProperties(e));if(i()(e))return t.fromJSON(e);throw new Error("`Range.create` only accepts objects or ranges, but you passed it: "+e)}},{key:"createList",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.List.isList(e)||Array.isArray(e)){var n=new r.List(e.map(t.create));return n}throw new Error("`Range.createList` only accepts arrays or lists, but you passed it: "+e)}},{key:"createProperties",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isRange(e))return{anchor:U.createProperties(e.anchor),focus:U.createProperties(e.focus)};if(i()(e)){var n={};return"anchor"in e&&(n.anchor=U.create(e.anchor)),"focus"in e&&(n.focus=U.create(e.focus)),n}throw new Error("`Range.createProperties` only accepts objects, annotations, decorations, ranges or selections, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var n=e.anchor,r=e.focus;return new t({anchor:U.fromJSON(n||{}),focus:U.fromJSON(r||{})})}},{key:"isRange",value:function(e){return G("range",e)||J.isDecoration(e)||$.isSelection(e)}}]),t}(Object(r.Record)(X)),ee={key:void 0,type:void 0,data:void 0,anchor:void 0,focus:void 0},te=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"setProperties",value:function(e){return e=t.createProperties(e),this.merge(e)}},{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,key:this.key,type:this.type,data:this.data.toJSON(),anchor:this.anchor.toJSON(e),focus:this.focus.toJSON(e)};return t}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isAnnotation(e))return e;if(Z.isRange(e))return t.fromJSON(Z.createProperties(e));if(i()(e))return t.fromJSON(e);throw new Error("`Annotation.create` only accepts objects or annotations, but you passed it: "+e)}},{key:"createMap",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.Map.isMap(e))return e;if(i()(e)){var n={};for(var o in e){var a=e[o],u=t.create(a);n[o]=u}return Object(r.Map)(n)}throw new Error("`Annotation.createMap` only accepts arrays or lists, but you passed it: "+e)}},{key:"createProperties",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isAnnotation(e))return{key:e.key,type:e.type,data:e.data,anchor:U.createProperties(e.anchor),focus:U.createProperties(e.focus)};if(i()(e)){var n={};return"key"in e&&(n.key=e.key),"type"in e&&(n.type=e.type),"data"in e&&(n.data=V.create(e.data)),"anchor"in e&&(n.anchor=U.create(e.anchor)),"focus"in e&&(n.focus=U.create(e.focus)),n}throw new Error("`Annotation.createProperties` only accepts objects or annotations, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var n=e.key,r=e.type,o=e.data,i=e.anchor,a=e.focus;if(!n)throw new Error("Annotations must be created with a `key`, but you passed: "+JSON.stringify(e));if(!r)throw new Error("Annotations must be created with a `type`, but you passed: "+JSON.stringify(e));return new t({key:n,type:r,data:V.create(o||{}),anchor:U.fromJSON(i||{}),focus:U.fromJSON(a||{})})}}]),t}(Object(r.Record)(ee)),ne={data:void 0,key:void 0,nodes:void 0},re=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,data:this.data.toJSON(),nodes:this.nodes.toArray().map(function(t){return t.toJSON(e)})};return e.preserveKeys&&(t.key=this.key),t}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isDocument(e))return e;if((r.List.isList(e)||Array.isArray(e))&&(e={nodes:e}),i()(e))return t.fromJSON(e);throw new Error("`Document.create` only accepts objects, arrays, lists or documents, but you passed it: "+e)}},{key:"fromJSON",value:function(e){if(t.isDocument(e))return e;var n=e.data,o=void 0===n?{}:n,i=e.key,a=void 0===i?k.create():i,u=e.nodes,s=void 0===u?[]:u;return new t({key:a,data:new r.Map(o),nodes:ce.createList(s)})}}]),t}(Object(r.Record)(ne)),oe={data:void 0,key:void 0,nodes:void 0,type:void 0},ie=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,type:this.type,data:this.data.toJSON(),nodes:this.nodes.toArray().map(function(t){return t.toJSON(e)})};return e.preserveKeys&&(t.key=this.key),t}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isInline(e))return e;if("string"==typeof e&&(e={type:e}),i()(e))return t.fromJSON(e);throw new Error("`Inline.create` only accepts objects, strings or inlines, but you passed it: "+e)}},{key:"createList",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.List.isList(e)||Array.isArray(e)){var n=new r.List(e.map(t.create));return n}throw new Error("`Inline.createList` only accepts arrays or lists, but you passed it: "+e)}},{key:"fromJSON",value:function(e){if(t.isInline(e))return e;var n=e.data,o=void 0===n?{}:n,i=e.key,a=void 0===i?k.create():i,u=e.nodes,s=void 0===u?[]:u,c=e.type;if("string"!=typeof c)throw new Error("`Inline.fromJS` requires a `type` string.");return new t({key:a,type:c,data:new r.Map(o),nodes:ce.createList(s)})}},{key:"isInlineList",value:function(e){return r.List.isList(e)&&e.every(function(e){return t.isInline(e)})}}]),t}(Object(r.Record)(oe)),ae={key:void 0,marks:void 0,text:void 0},ue=Object(r.Record)({text:void 0,marks:void 0,annotations:void 0,decorations:void 0}),se=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"addMark",value:function(e){e=K.create(e);var t=this.marks.add(e);return this.set("marks",t)}},{key:"addMarks",value:function(e){return e=K.createSet(e),this.set("marks",this.marks.union(e))}},{key:"getLeaves",value:function(e,t){var n=[{text:this.text,marks:this.marks,annotations:[],decorations:[]}],o=function(e,t){return[{text:e.text.slice(0,t),marks:e.marks,annotations:[].concat(C(e.annotations)),decorations:[].concat(C(e.decorations))},{text:e.text.slice(t),marks:e.marks,annotations:[].concat(C(e.annotations)),decorations:[].concat(C(e.decorations))}]},i=function(r){var i="annotations"===r?e.values():t,a=!0,u=!1,s=void 0;try{for(var c,l=i[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var f=c.value,d=f.start,p=f.end,h=[],v=0,y=!0,m=!1,g=void 0;try{for(var b,k=n[Symbol.iterator]();!(y=(b=k.next()).done);y=!0){var w=b.value,_=w.text.length,x=v;if(v+=_,d.offset<=x&&p.offset>=x+_)w[r].push(f),h.push(w);else if(d.offset>x+_||p.offset<x||p.offset===x&&0!==x)h.push(w);else{var O=w,E=void 0,S=void 0;if(p.offset<x+_){var T=o(O,p.offset-x),A=N(T,2);O=A[0],S=A[1]}if(d.offset>x){var C=o(O,d.offset-x),j=N(C,2);E=j[0],O=j[1]}O[r].push(f),E&&h.push(E),h.push(O),S&&h.push(S)}}}catch(e){m=!0,g=e}finally{try{!y&&k.return&&k.return()}finally{if(m)throw g}}n=h}}catch(e){u=!0,s=e}finally{try{!a&&l.return&&l.return()}finally{if(u)throw s}}};return i("annotations"),i("decorations"),n=n.map(function(e){return new ue(E({},e,{annotations:Object(r.List)(e.annotations),decorations:Object(r.List)(e.decorations)}))}),Object(r.List)(n)}},{key:"insertText",value:function(e,t){var n=this.text,r=n.slice(0,e)+t+n.slice(e);return this.set("text",r)}},{key:"removeMark",value:function(e){e=K.create(e);var t=this.marks.remove(e);return this.set("marks",t)}},{key:"removeText",value:function(e,t){var n=this.text,r=n.slice(0,e)+n.slice(e+t);return this.set("text",r)}},{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,text:this.text,marks:this.marks.toArray().map(function(e){return e.toJSON()})};return e.preserveKeys&&(t.key=this.key),t}},{key:"setMark",value:function(e,t){var n=this.marks,r=K.create(e),o=r.merge(t),i=n.remove(r).add(o);return this.set("marks",i)}},{key:"splitText",value:function(e){var t=this.text;return[this.set("text",t.slice(0,e)),this.set("text",t.slice(e)).regenerateKey()]}},{key:"mergeText",value:function(e){var t=this.text+e.text;return this.set("text",t)}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(t.isText(e))return e;if("string"==typeof e&&(e={text:e}),i()(e))return t.fromJSON(e);throw new Error("`Text.create` only accepts objects, arrays, strings or texts, but you passed it: "+e)}},{key:"createList",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.List.isList(e)||Array.isArray(e)){var n=new r.List(e.map(t.create));return n}throw new Error("`Text.createList` only accepts arrays or lists, but you passed it: "+e)}},{key:"fromJSON",value:function(e){if(t.isText(e))return e;Object(u.a)(null==e.leaves,"As of slate@0.46, the `leaves` property of text nodes has been removed! Each individual leaf should be created as a text node instead.");var n=e.text,r=void 0===n?"":n,o=e.marks,i=void 0===o?[]:o,a=e.key;return new t({key:void 0===a?k.create():a,text:r,marks:K.createSet(i)})}},{key:"isTextList",value:function(e){return r.List.isList(e)&&e.every(function(e){return t.isText(e)})}}]),t}(Object(r.Record)(ae)),ce=function(){function e(){_(this,e)}return x(e,null,[{key:"create",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(e.isNode(t))return t;if(i()(t)){var n=t.object;switch(!n&&t.kind&&(Object(a.a)(!1,"As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`."),n=t.kind),n){case"block":return fe.create(t);case"document":return re.create(t);case"inline":return ie.create(t);case"text":return se.create(t);default:throw new Error("`Node.create` requires a `object` string.")}}throw new Error("`Node.create` only accepts objects or nodes but you passed it: "+t)}},{key:"createList",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.List.isList(t)||Array.isArray(t)){var n=[];t.forEach(function(t){if(t&&"text"===t.object&&t.leaves&&Array.isArray(t.leaves)){Object(a.a)(!1,"As of slate@0.46, the `leaves` property of Text nodes has been removed. Instead, each text node contains a string of text and a unique set of marks and leaves are unnecessary.");var r=se.createList(t.leaves).toArray();n=n.concat(r)}else{var o=e.create(t);n.push(o)}});var o=Object(r.List)(n);return o}throw new Error("`Node.createList` only accepts lists or arrays, but you passed it: "+t)}},{key:"createProperties",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(fe.isBlock(e)||ie.isInline(e))return{data:e.data,type:e.type};if("string"==typeof e)return{type:e};if(i()(e)){var t={};return"type"in e&&(t.type=e.type),"data"in e&&(t.data=V.create(e.data)),t}throw new Error("`Node.createProperties` only accepts objects, strings, blocks or inlines, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var t=e.object;switch(!t&&e.kind&&(Object(a.a)(!1,"As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`."),t=e.kind),t){case"block":return fe.fromJSON(e);case"document":return re.fromJSON(e);case"inline":return ie.fromJSON(e);case"text":return se.fromJSON(e);default:throw new Error("`Node.fromJSON` requires an `object` of either 'block', 'document', 'inline' or 'text', but you passed: "+e)}}},{key:"isNode",value:function(e){return fe.isBlock(e)||re.isDocument(e)||ie.isInline(e)||se.isText(e)}},{key:"isNodeList",value:function(t){return r.List.isList(t)&&t.every(function(t){return e.isNode(t)})}}]),e}(),le={data:void 0,key:void 0,nodes:void 0,type:void 0},fe=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,type:this.type,data:this.data.toJSON(),nodes:this.nodes.toArray().map(function(t){return t.toJSON(e)})};return e.preserveKeys&&(t.key=this.key),t}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isBlock(e))return e;if("string"==typeof e&&(e={type:e}),i()(e))return t.fromJSON(e);throw new Error("`Block.create` only accepts objects, strings or blocks, but you passed it: "+e)}},{key:"createList",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.List.isList(e)||Array.isArray(e)){var n=new r.List(e.map(t.create));return n}throw new Error("`Block.createList` only accepts arrays or lists, but you passed it: "+e)}},{key:"fromJSON",value:function(e){if(t.isBlock(e))return e;var n=e.data,o=void 0===n?{}:n,i=e.key,a=void 0===i?k.create():i,u=e.nodes,s=void 0===u?[]:u,c=e.type;if("string"!=typeof c)throw new Error("`Block.fromJSON` requires a `type` string.");return new t({key:a,type:c,data:Object(r.Map)(o),nodes:ce.createList(s)})}},{key:"isBlockList",value:function(e){return r.List.isList(e)&&e.every(function(e){return t.isBlock(e)})}}]),t}(Object(r.Record)(le)),de={annotations:void 0,data:void 0,document:void 0,selection:void 0},pe=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"addAnnotation",value:function(e){e=te.create(e);var t=this,n=t,r=n.annotations,o=n.document,i=e.key;return e=e.updatePoints(function(e){return e.normalize(o)}),r=r.set(i,e),t=t.set("annotations",r)}},{key:"addMark",value:function(e,t){t=K.create(t);var n=this,r=n.document;return r=r.addMark(e,t),n=n.set("document",r)}},{key:"insertNode",value:function(e,t){var n=this,r=n.document;return r=r.insertNode(e,t),n=(n=n.set("document",r)).mapRanges(function(e){return e.updatePoints(function(e){return e.setPath(null)})})}},{key:"insertText",value:function(e,t,n){var r=this,o=r.document,i=o.assertNode(e);return o=o.insertText(e,t,n),i=o.assertNode(e),r=(r=r.set("document",o)).mapPoints(function(e){return e.key===i.key&&e.offset>=t?e.setOffset(e.offset+n.length):e})}},{key:"mergeNode",value:function(e){var t=this,n=t.document,r=n.mergeNode(e);e=n.resolvePath(e);var o=z.decrement(e),i=n.getNode(o),a=n.getNode(e);return t=(t=t.set("document",r)).mapRanges(function(e){if("text"===a.object){var t=i.text.length;e.anchor.key===a.key&&(e=e.moveAnchorTo(i.key,t+e.anchor.offset)),e.focus.key===a.key&&(e=e.moveFocusTo(i.key,t+e.focus.offset))}return e=e.updatePoints(function(e){return e.setPath(null)})})}},{key:"moveNode",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=this,o=r,i=o.document;return z.isEqual(e,t)?r:(i=i.moveNode(e,t,n),r=(r=r.set("document",i)).mapPoints(function(e){return e.setPath(null)}))}},{key:"removeAnnotation",value:function(e){e=te.create(e);var t=this,n=t.annotations,r=e.key;return n=n.delete(r),t=t.set("annotations",n)}},{key:"removeMark",value:function(e,t){t=K.create(t);var n=this,r=n.document;return r=r.removeMark(e,t),n=n.set("document",r)}},{key:"removeNode",value:function(e){var t=this,n=t.document,r=n.assertNode(e),o="text"===r.object?r:r.getFirstText()||r,i="text"===r.object?r:r.getLastText()||r,a=n.getPreviousText(o.key),u=n.getNextText(i.key);return n=n.removeNode(e),t=(t=t.set("document",n)).mapRanges(function(e){var t=e,n=t.anchor,o=t.focus;return r.hasNode(n.key)&&(e=a?e.moveAnchorTo(a.key,a.text.length):u?e.moveAnchorTo(u.key,0):e.unset()),r.hasNode(o.key)&&(e=a?e.moveFocusTo(a.key,a.text.length):u?e.moveFocusTo(u.key,0):e.unset()),e=e.updatePoints(function(e){return e.setPath(null)})})}},{key:"removeText",value:function(e,t,n){var r=this,o=r.document,i=o.assertNode(e);o=o.removeText(e,t,n),r=r.set("document",o);var a=n.length,u=t,s=t+a;return r=r.mapPoints(function(e){return e.key!==i.key?e:e.offset>=s?e.setOffset(e.offset-a):e.offset>u?e.setOffset(u):e})}},{key:"setAnnotation",value:function(e,t){t=te.createProperties(t);var n=te.create(e),r=n.merge(t),o=this,i=o.annotations,a=n.key;return i=i.set(a,r),o=o.set("annotations",i)}},{key:"setNode",value:function(e,t){var n=this,r=n.document;return r=r.setNode(e,t),n=n.set("document",r)}},{key:"setMark",value:function(e,t,n){var r=this,o=r.document;return o=o.setMark(e,t,n),r=r.set("document",o)}},{key:"setProperties",value:function(e){var t=this,n=t.document,r=e.data,o=e.annotations,i={};return r&&(i.data=r),o&&(i.annotations=o.map(function(e){return e.isSet?e:n.resolveAnnotation(e)})),t=t.merge(i)}},{key:"setSelection",value:function(e){var t=this,n=t,r=n.document,o=n.selection,i=o.setProperties(e);return o=r.resolveSelection(i),t=t.set("selection",o)}},{key:"splitNode",value:function(e,t,n){var r=this,o=r.document,i=o.splitNode(e,t,n),a=o.assertNode(e);return r=(r=r.set("document",i)).mapRanges(function(e){var n=i.getNextText(a.key),r=e,o=r.anchor,u=r.focus;return a.key===o.key&&t<=o.offset&&(e=e.moveAnchorTo(n.key,o.offset-t)),a.key===u.key&&t<=u.offset&&(e=e.moveFocusTo(n.key,u.offset-t)),e=e.updatePoints(function(e){return e.setPath(null)})})}},{key:"mapRanges",value:function(e){var t=this,n=t,r=n.document,o=n.selection,i=n.annotations,a=o.isSet?e(o):o;a||(a=o.unset()),a!==o&&(a=r.createSelection(a)),t=t.set("selection",a);var u=i.map(function(t){var n=t.isSet?e(t):t;return n&&n!==t&&(n=r.createAnnotation(n)),n});return u=u.filter(function(e){return!!e}),t=t.set("annotations",u)}},{key:"mapPoints",value:function(e){return this.mapRanges(function(t){return t.updatePoints(e)})}},{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,document:this.document.toJSON(e)};return e.preserveData&&(t.data=this.data.toJSON(e)),e.preserveAnnotations&&(t.annotations=this.annotations.map(function(t){return t.toJSON(e)}).toObject()),e.preserveSelection&&(t.selection=this.selection.toJSON(e)),t}},{key:"change",value:function(){Object(u.a)(!1,"As of Slate 0.42.0, value object are no longer schema-aware, and the `value.change()` method is no longer available. Use the `editor.change()` method on the new `Editor` controller instead.")}},{key:"startBlock",get:function(){return this.selection.start.key&&this.document.getClosestBlock(this.selection.start.key)}},{key:"endBlock",get:function(){return this.selection.end.key&&this.document.getClosestBlock(this.selection.end.key)}},{key:"anchorBlock",get:function(){return this.selection.anchor.key&&this.document.getClosestBlock(this.selection.anchor.key)}},{key:"focusBlock",get:function(){return this.selection.focus.key&&this.document.getClosestBlock(this.selection.focus.key)}},{key:"startInline",get:function(){return this.selection.start.key&&this.document.getClosestInline(this.selection.start.key)}},{key:"endInline",get:function(){return this.selection.end.key&&this.document.getClosestInline(this.selection.end.key)}},{key:"anchorInline",get:function(){return this.selection.anchor.key&&this.document.getClosestInline(this.selection.anchor.key)}},{key:"focusInline",get:function(){return this.selection.focus.key&&this.document.getClosestInline(this.selection.focus.key)}},{key:"startText",get:function(){return this.selection.start.key&&this.document.getDescendant(this.selection.start.key)}},{key:"endText",get:function(){return this.selection.end.key&&this.document.getDescendant(this.selection.end.key)}},{key:"anchorText",get:function(){return this.selection.anchor.key&&this.document.getDescendant(this.selection.anchor.key)}},{key:"focusText",get:function(){return this.selection.focus.key&&this.document.getDescendant(this.selection.focus.key)}},{key:"nextBlock",get:function(){return this.selection.end.key&&this.document.getNextBlock(this.selection.end.key)}},{key:"previousBlock",get:function(){return this.selection.start.key&&this.document.getPreviousBlock(this.selection.start.key)}},{key:"nextInline",get:function(){return this.selection.end.key&&this.document.getNextInline(this.selection.end.key)}},{key:"previousInline",get:function(){return this.selection.start.key&&this.document.getPreviousInline(this.selection.start.key)}},{key:"nextText",get:function(){return this.selection.end.key&&this.document.getNextText(this.selection.end.key)}},{key:"previousText",get:function(){return this.selection.start.key&&this.document.getPreviousText(this.selection.start.key)}},{key:"marks",get:function(){return this.selection.isUnset?new r.Set:this.selection.marks||this.document.getMarksAtRange(this.selection)}},{key:"activeMarks",get:function(){return this.selection.isUnset?new r.Set:this.selection.marks||this.document.getActiveMarksAtRange(this.selection)}},{key:"blocks",get:function(){return this.selection.isUnset?new r.List:this.document.getLeafBlocksAtRange(this.selection)}},{key:"fragment",get:function(){return this.selection.isUnset?re.create():this.document.getFragmentAtRange(this.selection)}},{key:"inlines",get:function(){return this.selection.isUnset?new r.List:this.document.getLeafInlinesAtRange(this.selection)}},{key:"texts",get:function(){return this.selection.isUnset?new r.List:this.document.getTextsAtRange(this.selection)}},{key:"history",get:function(){Object(u.a)(!1,"As of Slate 0.42.0, the `value.history` model no longer exists, and the history is stored in `value.data` instead using plugins.")}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t.isValue(e))return e;if(i()(e))return t.fromJSON(e,n);throw new Error("`Value.create` only accepts objects or values, but you passed it: "+e)}},{key:"createProperties",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isValue(e))return{annotations:e.annotations,data:e.data};if(i()(e)){var n={};return"annotations"in e&&(n.annotations=te.createMap(e.annotations)),"data"in e&&(n.data=V.create(e.data)),n}throw new Error("`Value.createProperties` only accepts objects or values, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var n=e.data,r=void 0===n?{}:n,o=e.annotations,i=void 0===o?{}:o,a=e.document,u=void 0===a?{}:a,s=e.selection,c=void 0===s?{}:s;if(r=V.fromJSON(r),c=(u=re.fromJSON(u)).createSelection(c),i=te.createMap(i),c.isUnset){var l=u.getFirstText();l&&(c=c.moveToStartOfNode(l)),c=u.createSelection(c)}return new t({annotations:i,data:r,document:u,selection:c})}}]),t}(Object(r.Record)(de)),he=c()("slate:operation:apply");function ve(e,t){var n=(t=ke.create(t)).type;switch(he(n,t),n){case"add_annotation":var r=t.annotation;return e.addAnnotation(r);case"add_mark":var o=t,i=o.path,a=o.mark;return e.addMark(i,a);case"insert_node":var u=t,s=u.path,c=u.node;return e.insertNode(s,c);case"insert_text":var l=t,f=l.path,d=l.offset,p=l.text,h=l.marks;return e.insertText(f,d,p,h);case"merge_node":var v=t.path;return e.mergeNode(v);case"move_node":var y=t,m=y.path,g=y.newPath;return e.moveNode(m,g);case"remove_annotation":var b=t.annotation;return e.removeAnnotation(b);case"remove_mark":var k=t,w=k.path,_=k.mark;return e.removeMark(w,_);case"remove_node":var x=t.path;return e.removeNode(x);case"remove_text":var O=t,E=O.path,S=O.offset,T=O.text;return e.removeText(E,S,T);case"set_annotation":var A=t,N=A.properties,C=A.newProperties;return e.setAnnotation(N,C);case"set_mark":var j=t,P=j.path,F=j.properties,I=j.newProperties;return e.setMark(P,F,I);case"set_node":var R=t,D=R.path,M=R.newProperties;return e.setNode(D,M);case"set_selection":var B=t.newProperties;return e.setSelection(B);case"set_value":var L=t.newProperties;return e.setProperties(L);case"split_node":var z=t,q=z.path,U=z.position,V=z.properties;return e.splitNode(q,U,V);default:throw new Error('Unknown operation type: "'+n+'".')}}var ye=c()("slate:operation:invert");function me(e){var t=(e=ke.create(e)).type;switch(ye(t,e),t){case"move_node":var n=e,r=n.newPath,o=n.path;if(z.isEqual(r,o))return e;var i=z.transform(o,e).first(),a=z.transform(z.increment(o),e).first();return e.set("path",i).set("newPath",a);case"merge_node":var u=e.path,s=z.decrement(u);return e.set("type","split_node").set("path",s);case"split_node":var c=e.path,l=z.increment(c);return e.set("type","merge_node").set("path",l);case"set_annotation":case"set_node":case"set_value":case"set_selection":case"set_mark":var f=e,d=f.properties,p=f.newProperties;return e.set("properties",p).set("newProperties",d);case"insert_node":case"insert_text":return e.set("type",t.replace("insert_","remove_"));case"remove_node":case"remove_text":return e.set("type",t.replace("remove_","insert_"));case"add_annotation":case"add_mark":return e.set("type",t.replace("add_","remove_"));case"remove_annotation":case"remove_mark":return e.set("type",t.replace("remove_","add_"));default:throw new Error('Unknown operation type: "'+t+'".')}}var ge={add_mark:["path","mark","data"],add_annotation:["annotation","data"],insert_node:["path","node","data"],insert_text:["path","offset","text","data"],merge_node:["path","position","properties","target","data"],move_node:["path","newPath","data"],remove_annotation:["annotation","data"],remove_mark:["path","mark","data"],remove_node:["path","node","data"],remove_text:["path","offset","text","data"],set_annotation:["properties","newProperties","data"],set_mark:["path","properties","newProperties","data"],set_node:["path","properties","newProperties","data"],set_selection:["properties","newProperties","data"],set_value:["properties","newProperties","data"],split_node:["path","position","properties","target","data"]},be={annotation:void 0,data:void 0,length:void 0,mark:void 0,marks:void 0,newPath:void 0,newProperties:void 0,node:void 0,offset:void 0,path:void 0,position:void 0,properties:void 0,target:void 0,text:void 0,type:void 0},ke=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"apply",value:function(e){return ve(e,this)}},{key:"invert",value:function(){return me(this)}},{key:"toJSON",value:function(){var e=this.object,t=this.type,n={object:e,type:t},r=ge[t],o=!0,i=!1,a=void 0;try{for(var u,s=r[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value,l=this[c];if("annotation"!==c&&"mark"!==c&&"marks"!==c&&"node"!==c&&"path"!==c&&"newPath"!==c||(l=l.toJSON()),"properties"===c&&"merge_node"===t){var f={};"data"in l&&(f.data=l.data.toJS()),"type"in l&&(f.type=l.type),l=f}if(("properties"===c||"newProperties"===c)&&"set_annotation"===t){var d={};"anchor"in l&&(d.anchor=l.anchor.toJS()),"focus"in l&&(d.focus=l.focus.toJS()),"key"in l&&(d.key=l.key),"mark"in l&&(d.mark=l.mark.toJS()),l=d}if(("properties"===c||"newProperties"===c)&&"set_mark"===t){var p={};"data"in l&&(p.data=l.data.toJS()),"type"in l&&(p.type=l.type),l=p}if(("properties"===c||"newProperties"===c)&&"set_node"===t){var h={};"data"in l&&(h.data=l.data.toJS()),"type"in l&&(h.type=l.type),l=h}if(("properties"===c||"newProperties"===c)&&"set_selection"===t){var v={};"anchor"in l&&(v.anchor=l.anchor.toJSON()),"focus"in l&&(v.focus=l.focus.toJSON()),"isFocused"in l&&(v.isFocused=l.isFocused),"marks"in l&&(v.marks=l.marks&&l.marks.toJSON()),l=v}if(("properties"===c||"newProperties"===c)&&"set_value"===t){var y={};"data"in l&&(y.data=l.data.toJS()),l=y}if("properties"===c&&"split_node"===t){var m={};"data"in l&&(m.data=l.data.toJS()),"type"in l&&(m.type=l.type),l=m}"data"===c&&(l=l.toJSON()),n[c]=l}}catch(e){i=!0,a=e}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}return n}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isOperation(e))return e;if(i()(e))return t.fromJSON(e);throw new Error("`Operation.create` only accepts objects or operations, but you passed it: "+e)}},{key:"createList",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.List.isList(e)||Array.isArray(e)){var n=new r.List(e.map(t.create));return n}throw new Error("`Operation.createList` only accepts arrays or lists, but you passed it: "+e)}},{key:"fromJSON",value:function(e){if(t.isOperation(e))return e;var n=e.type,o=ge[n],i={type:n};if(!o)throw new Error('`Operation.fromJSON` was passed an unrecognized operation type: "'+n+'"');var a=!0,u=!1,s=void 0;try{for(var c,l=o[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var f=c.value,d=e[f];if("data"===f&&void 0===d&&(d={}),void 0===d)throw new Error('`Operation.fromJSON` was passed a "'+n+'" operation without the required "'+f+'" attribute.');"annotation"===f&&(d=te.create(d)),"path"!==f&&"newPath"!==f||(d=z.create(d)),"mark"===f&&(d=K.create(d)),"node"===f&&(d=ce.create(d)),"properties"!==f&&"newProperties"!==f||"set_annotation"!==n||(d=te.createProperties(d)),"properties"!==f&&"newProperties"!==f||"set_mark"!==n||(d=K.createProperties(d)),"properties"!==f&&"newProperties"!==f||"set_node"!==n&&"merge_node"!==n&&"split_node"!==n||(d=ce.createProperties(d)),"properties"!==f&&"newProperties"!==f||"set_selection"!==n||(d=$.createProperties(d)),"properties"!==f&&"newProperties"!==f||"set_value"!==n||(d=pe.createProperties(d)),"data"===f&&(d=Object(r.Map)(d)),i[f]=d}}catch(e){u=!0,s=e}finally{try{!a&&l.return&&l.return()}finally{if(u)throw s}}return new t(i)}},{key:"isOperationList",value:function(e){return r.List.isList(e)&&e.every(function(e){return t.isOperation(e)})}}]),t}(Object(r.Record)(be)),we={operations:void 0,value:void 0},_e=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,value:this.value.toJSON(e),operations:this.operations.toArray().map(function(t){return t.toJSON(e)})};return t}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.isChange(e))return e;if(i()(e))return t.fromJSON(e);throw new Error("`Change.create` only accepts objects or changes, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var n=e.value,r=e.operations,o=void 0===r?[]:r;return new t({value:pe.create(n),operations:ke.createList(o)})}}]),t}(Object(r.Record)(we));function xe(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{onCommand:function(t,n,r){var o=t.type,i=t.args,a=e[o];if(!a)return r();n.command.apply(n,[a].concat(C(i)))},onConstruct:function(t,n){for(var r in e)t.registerCommand(r);return n()}}}var Oe=55296,Ee=57343,Se=/\s/,Te=/['\u2018\u2019]/,Ae=/[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;function Ne(e){return Oe<=e&&e<=Ee}function Ce(e,t){if(Se.test(e))return!1;if(Te.test(e)){var n=t.charAt(0),r=je(n);if(Ce(n=t.slice(0,r),t.slice(r)))return!0}return!Ae.test(e)}function je(e){return Ne(e.charCodeAt(0))?2:1}function Pe(e){return je(e.charAt(0))}function Fe(e){for(var t=0,n=0,r=!1,o=void 0;o=e.charAt(n);){var i=je(o);if(Ce(o=e.slice(n,n+i),e.slice(n+i)))r=!0,t+=i;else{if(r)break;t+=i}n+=i}return t}var Ie={getCharLength:je,getCharOffset:Pe,getCharOffsetBackward:function(e,t){return e=e.slice(0,t),Pe(e=Object(l.reverse)(e))},getCharOffsetForward:function(e,t){return Pe(e=e.slice(t))},getWordOffset:Fe,getWordOffsetBackward:function(e,t){return e=e.slice(0,t),Fe(e=Object(l.reverse)(e))},getWordOffsetForward:function(e,t){return Fe(e=e.slice(t))},isSurrogate:Ne,isWord:Ce};function Re(e,t){t.isExpanded&&e.deleteAtRange(t);var n=e.value.document,r=t,o=r.start,i=r.end;return t=n.hasDescendant(o.path)?t.moveToStart():t.moveTo(i.path,0).normalize(n)}var De={addMarkAtRange:function(e,t,n){if(!t.isCollapsed){var r=e.value.document,o=t.start,i=t.end,a=r.getTextsAtRange(t);e.withoutNormalizing(function(){a.forEach(function(t){var r=t.key,a=0,u=t.text.length;r===o.key&&(a=o.offset),r===i.key&&(u=i.offset),r===o.key&&r===i.key&&(u=i.offset-o.offset),e.addMarkByKey(r,a,u,n)})})}},addMarksAtRange:function(e,t,n){n.forEach(function(n){return e.addMarkAtRange(t,n)})},deleteAtRange:function(e,t){e.snapshotSelection();var n=e.value,r=t.start,o=t.end,i=r.key,a=r.offset,u=o.key,s=o.offset,c=n.document,l=c.hasVoidParent(i,e),f=c.hasVoidParent(u,e),d=c.getClosestBlock(i),p=c.getClosestBlock(u),h=0===a&&0===s&&!1===l&&i===d.getFirstText().key&&u===p.getFirstText().key&&i!==u;if(h&&f){var v=c.getPreviousText(u);u=v.key,s=v.text.length,f=c.hasVoidParent(u,e)}e.withoutNormalizing(function(){for(;l;){var t=c.getClosestVoid(i,e),n=c.getNextText(i);if(e.removeNodeByKey(t.key),i===u)return;if(!n)return;c=e.value.document,i=n.key,a=0,l=c.hasVoidParent(i,e)}for(;f;){var r=c.getClosestVoid(u,e),o=c.getPreviousText(u);e.removeNodeByKey(r.key),c=e.value.document,u=o.key,s=o.text.length,f=c.hasVoidParent(u,e)}if(i===u&&h)e.removeNodeByKey(d.key);else if(i!==u){d=c.getClosestBlock(i),p=c.getClosestBlock(u);var v=c.getNode(i),y=c.getNode(u),m=v.text.length-a,g=s,b=c.getCommonAncestor(i,u),k=b.getFurthestChild(i),w=b.getFurthestChild(u),_=c.getParent(d.key),x=_.nodes.indexOf(d),O=_.nodes.indexOf(p),E=void 0;for(E=v;E.key!==k.key;){var S=c.getParent(E.key),T=S.nodes.indexOf(E);S.nodes.slice(T+1).reverse().forEach(function(t){e.removeNodeByKey(t.key)}),E=S}var A=b.nodes.indexOf(k),C=b.nodes.indexOf(w);for(b.nodes.slice(A+1,C).reverse().forEach(function(t){e.removeNodeByKey(t.key)}),E=y;E.key!==w.key;){var j=c.getParent(E.key),P=j.nodes.indexOf(E);j.nodes.slice(0,P).reverse().forEach(function(t){e.removeNodeByKey(t.key)}),E=j}if(0!==m&&e.removeTextByKey(i,a,m),0!==g&&e.removeTextByKey(u,0,s),d.key!==p.key){c=e.value.document;var F=void 0,I=!0,R=!1,D=void 0;try{for(var M,B=c.ancestors(p.key)[Symbol.iterator]();!(I=(M=B.next()).done);I=!0){var L=M.value,z=N(L,1)[0];if(z.nodes.size>1)break;F=z}}catch(e){R=!0,D=e}finally{try{!I&&B.return&&B.return()}finally{if(R)throw D}}O!==x+1&&e.moveNodeByKey(p.key,_.key,x+1),h?e.removeNodeByKey(d.key):e.mergeNodeByKey(p.key),F&&e.removeNodeByKey(F.key)}}else{var q=a,U=s-a;e.removeTextByKey(i,q,U)}})},deleteBackwardAtRange:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;if(0!==n){var r=e.value,o=r.document,i=t,a=i.start,u=i.focus;if(t.isExpanded)e.deleteAtRange(t);else{var s=o.getClosestVoid(a.path,e);if(s)e.removeNodeByKey(s.key);else if(!a.isAtStartOfNode(o)){var c=o.getClosestBlock(a.path);if(1!==o.nodes.size&&c&&""===c.text&&1===c.nodes.size)e.removeNodeByKey(c.key);else{var l=o.getDescendant(a.path);if(a.isAtStartOfNode(l)){var f=o.getPreviousText(l.key),d=o.getClosestInline(l.key);d&&""===f.text&&(f=o.getPreviousText(f.key));var p=o.getClosestBlock(f.key),h=o.getClosestVoid(f.key,e);if(h)return void e.removeNodeByKey(h.key);if(1===n&&p!==c)return t=t.moveAnchorTo(f.key,f.text.length),void e.deleteAtRange(t)}if(n<=u.offset)return t=t.moveFocusBackward(n),void e.deleteAtRange(t);for(var v=l,y=0,m=u.offset;n>m;){var g=m+(v=o.getPreviousText(v.key)).text.length;if(n<=g){y=g-n;break}m=g}t=t.moveAnchorTo(v.key,y),e.deleteAtRange(t)}}}}},deleteCharBackwardAtRange:function(e,t){if(t.isExpanded)e.deleteAtRange(t);else{var n=e.value.document,r=t.start,o=n.getClosestBlock(r.path),i=o.getOffset(r.key)+r.offset,a=o.text,u=Ie.getCharOffsetBackward(a,i);e.deleteBackwardAtRange(t,u)}},deleteCharForwardAtRange:function(e,t){if(t.isExpanded)e.deleteAtRange(t);else{var n=e.value.document,r=t.start,o=n.getClosestBlock(r.path),i=o.getOffset(r.key)+r.offset,a=o.text,u=Ie.getCharOffsetForward(a,i);e.deleteForwardAtRange(t,u)}},deleteForwardAtRange:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;if(0!==n){var r=e.value,o=r.document,i=t,a=i.start,u=i.focus;if(t.isExpanded)e.deleteAtRange(t);else{var s=o.getClosestVoid(a.path,e);if(s)e.removeNodeByKey(s.key);else{var c=o.getClosestBlock(a.path);if(c&&!e.isVoid(c)&&""===c.text&&1!==o.nodes.size){var l=o.getNextBlock(c.key);return e.removeNodeByKey(c.key),void(l&&l.key&&e.moveToStartOfNode(l))}if(!a.isAtEndOfNode(o)){var f=o.getDescendant(a.path);if(a.isAtEndOfNode(f)){var d=o.getNextText(f.key),p=o.getClosestBlock(d.key),h=o.getClosestVoid(d.key,e);if(h)return void e.removeNodeByKey(h.key);if(1===n&&p!==c)return t=t.moveFocusTo(d.key,0),void e.deleteAtRange(t)}if(n<=f.text.length-u.offset)return t=t.moveFocusForward(n),void e.deleteAtRange(t);for(var v=f,y=u.offset,m=f.text.length-u.offset;n>m;){var g=m+(v=o.getNextText(v.key)).text.length;if(n<=g){y=n-m;break}m=g}t=t.moveFocusTo(v.key,y),e.deleteAtRange(t)}}}}},deleteLineBackwardAtRange:function(e,t){if(t.isExpanded)e.deleteAtRange(t);else{var n=e.value.document,r=t.start,o=n.getClosestBlock(r.path).getOffset(r.key)+r.offset;e.deleteBackwardAtRange(t,o)}},deleteLineForwardAtRange:function(e,t){if(t.isExpanded)e.deleteAtRange(t);else{var n=e.value.document,r=t.start,o=n.getClosestBlock(r.path),i=o.getOffset(r.key)+r.offset;e.deleteForwardAtRange(t,o.text.length-i)}},deleteWordBackwardAtRange:function(e,t){if(t.isExpanded)e.deleteAtRange(t);else{var n=e.value.document,r=t.start,o=n.getClosestBlock(r.path),i=o.getOffset(r.key)+r.offset,a=o.text,u=0===i?1:Ie.getWordOffsetBackward(a,i);e.deleteBackwardAtRange(t,u)}},deleteWordForwardAtRange:function(e,t){if(t.isExpanded)e.deleteAtRange(t);else{var n=e.value.document,r=t.start,o=n.getClosestBlock(r.path),i=o.getOffset(r.key)+r.offset,a=o.text,u=Ie.getWordOffsetForward(a,i),s=0===u?1:u;e.deleteForwardAtRange(t,s)}},insertBlockAtRange:function(e,t,n){t=Re(e,t),n=fe.create(n);var r=e.value.document,o=t.start,i=o.key,a=o.offset,u=r.getClosestBlock(i),s=r.getClosestInline(i),c=r.getParent(u.key),l=c.nodes.indexOf(u),f=Me(e,t);if("before"===f)e.insertNodeByKey(c.key,l,n);else if("behind"===f)e.insertNodeByKey(c.key,l+1,n);else{if(s&&e.isVoid(s)){var d=o.isAtEndOfNode(s),p=d?r.getNextText(i):r.getPreviousText(i),h=d?t.moveToStartOfNode(p):t.moveToEndOfNode(p);i=h.start.key,a=h.start.offset}e.withoutNormalizing(function(){e.splitDescendantsByKey(u.key,i,a),e.insertNodeByKey(c.key,l+1,n)})}}},Me=function(e,t){var n=e.value.document,r=t.start,o=r.key,i=n.getClosestBlock(o),a=n.getClosestInline(o);return e.isVoid(i)?r.isAtEndOfNode(i)?"behind":"before":a||""!==i.text?r.isAtStartOfNode(i)?"before":r.isAtEndOfNode(i)?"behind":"split":"behind"};De.insertFragmentAtRange=function(e,t,n){e.withoutNormalizing(function(){if(t=Re(e,t),n.nodes.size){n=n.mapDescendants(function(e){return e.regenerateKey()});var o=t.start,i=e.value.document,a=i.getDescendant(o.path),u=i.getClosestBlock(a.key),s=u.getFurthestChild(a.key),c=o.isAtStartOfNode(u),l=i.getParent(u.key),f=l.nodes.indexOf(u),d=n.getBlocks(),p=n.nodes.first(),h=n.nodes.last(),v=d.first(),y=d.last(),m=Be(n,i,u.key);if(v===y&&e.isVoid(v))e.insertBlockAtRange(t,v);else if(m!==n||!p.hasBlockChildren()&&!h.hasBlockChildren()){if(v!==y){var g=m.getFurthest(v.key,function(e){return 1===e.nodes.size})||v,b=l.nodes.indexOf(u);m.removeNode(g.key).nodes.forEach(function(t,n){var r=b+n+1;e.insertNodeByKey(l.key,r,t)})}if(0!==o.offset&&e.splitDescendantsByKey(s.key,o.key,o.offset),a=(i=e.value.document).getDescendant(o.key),s=(u=i.getClosestBlock(o.key)).getFurthestChild(a.key),v!==y){var k=c?s:u.getNextSibling(s.key),w=k?u.nodes.skipUntil(function(e){return e.key===k.key}):Object(r.List)(),_=y.nodes.size;w.forEach(function(t,n){var r=_+n;e.moveNodeByKey(t.key,y.key,r)})}if(e.isVoid(u)||""!==u.text||u.findDescendant(function(t){return e.isVoid(t)})){var x=u.getFurthestChild(a.key),O=u.nodes.indexOf(x);v.nodes.forEach(function(t,n){var r=0===o.offset?0:1,i=O+n+r;e.insertNodeByKey(u.key,i,t)})}else e.removeNodeByKey(u.key),e.insertNodeByKey(l.key,f,v)}else{("before"===Me(e,t)?n.nodes:n.nodes.reverse()).forEach(function(n){e.insertBlockAtRange(t,n)})}}})};var Be=function(e,t,n){var r=function(e){if(e&&"text"!==e.object)return 1===e.nodes.size},o=function(e){return e&&e.nodes.first()},i=e;if(r(e)){var a=o(e),u=t.getFurthest(n,function(e){return e.type===a.type});for(u===t.getParent(n)&&(i=a);r(a)&&r(u)&&(a=o(a),u=o(u),a.type===u.type);)i=a}return i};De.insertInlineAtRange=function(e,t,n){n=ie.create(n),e.withoutNormalizing(function(){t=Re(e,t);var r=e.value.document,o=t.start,i=r.getParent(o.path),a=r.assertDescendant(o.path),u=i.nodes.indexOf(a);e.isVoid(i)||(e.splitNodeByPath(o.path,o.offset),e.insertNodeByKey(i.key,u+1,n))})},De.insertTextAtRange=function(e,t,n,r){e.withoutNormalizing(function(){t=Re(e,t);var o=e.value.document,i=t.start,a=i.offset,u=o.getParent(i.path);e.isVoid(u)||e.insertTextByPath(i.path,a,n,r)})},De.removeMarkAtRange=function(e,t,n){if(!t.isCollapsed){var r=e.value.document.getTextsAtRange(t),o=t.start,i=t.end;e.withoutNormalizing(function(){r.forEach(function(t){var r=t.key,a=0,u=t.text.length;r===o.key&&(a=o.offset),r===i.key&&(u=i.offset),r===o.key&&r===i.key&&(u=i.offset-o.offset),e.removeMarkByKey(r,a,u,n)})})}},De.setBlocksAtRange=function(e,t,n){var r=e.value.document,o=r.getLeafBlocksAtRange(t),i=t.start,a=t.end,u=t.isCollapsed,s=r.hasVoidParent(i.path,e),c=r.getClosestBlock(i.path),l=r.getClosestBlock(a.key),f=!1===u&&0===i.offset&&0===a.offset&&!1===s&&i.key===c.getFirstText().key&&a.key===l.getFirstText().key?o.slice(0,-1):o;e.withoutNormalizing(function(){f.forEach(function(t){e.setNodeByKey(t.key,n)})})},De.setInlinesAtRange=function(e,t,n){var r=e.value.document.getLeafInlinesAtRange(t);e.withoutNormalizing(function(){r.forEach(function(t){e.setNodeByKey(t.key,n)})})},De.splitBlockAtRange=function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=t=Re(e,t),o=r.start,i=r.end,a=e.value,u=a,s=u.document,c=s.assertDescendant(o.path),l=s.getClosestBlock(c.key),f=0;l&&"block"===l.object&&f<n;)c=l,l=s.getClosestBlock(l.key),f++;e.withoutNormalizing(function(){if(e.splitDescendantsByKey(c.key,o.path,o.offset),a=e.value,s=a.document,t.isExpanded){t.isBackward&&(t=t.flip());var n=s.getNextBlock(c.key);t=(t=t.moveAnchorToStartOfNode(n)).setFocus(t.focus.setPath(null)),o.path.equals(i.path)&&(t=t.moveFocusTo(t.anchor.key,i.offset-o.offset)),t=s.resolveRange(t),e.deleteAtRange(t)}})},De.splitInlineAtRange=function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1/0,r=t=Re(e,t),o=r.start,i=e.value,a=i.document,u=a.assertDescendant(o.path),s=a.getClosestInline(u.key),c=0;s&&"inline"===s.object&&c<n;)u=s,s=a.getClosestInline(s.key),c++;e.splitDescendantsByKey(u.key,o.path,o.offset)},De.toggleMarkAtRange=function(e,t,n){t.isCollapsed||(n=K.create(n),e.value.document.getActiveMarksAtRange(t).some(function(e){return e.equals(n)})?e.removeMarkAtRange(t,n):e.addMarkAtRange(t,n))},De.unwrapBlockAtRange=function(e,t,n){n=ce.createProperties(n);var r=e.value.document,o=r.getLeafBlocksAtRange(t),i=o.map(function(e){return r.getClosest(e.key,function(e){return"block"===e.object&&((null==n.type||e.type===n.type)&&!(null!=n.data&&!e.data.isSuperset(n.data)))})}).filter(function(e){return e}).toOrderedSet().toList();e.withoutNormalizing(function(){i.forEach(function(t){var n=t.nodes.first(),i=t.nodes.last(),a=e.value.document.getParent(t.key),u=a.nodes.indexOf(t),s=t.nodes.filter(function(e){return o.some(function(t){return e===t||e.hasDescendant(t.key)})}),c=s.first(),l=s.last();if(n===c&&i===l)t.nodes.forEach(function(t,n){e.moveNodeByKey(t.key,a.key,u+n)}),e.removeNodeByKey(t.key);else if(i===l)t.nodes.skipUntil(function(e){return e===c}).forEach(function(t,n){e.moveNodeByKey(t.key,a.key,u+1+n)});else if(n===c)t.nodes.takeUntil(function(e){return e===l}).push(l).forEach(function(t,n){e.moveNodeByKey(t.key,a.key,u+n)});else{var f=c.getFirstText();e.splitDescendantsByKey(t.key,f.key,0),r=e.value.document,s.forEach(function(t,n){if(0===n){var o=t;t=r.getNextBlock(t.key),e.removeNodeByKey(o.key)}e.moveNodeByKey(t.key,a.key,u+1+n)})}})})},De.unwrapInlineAtRange=function(e,t,n){n=ce.createProperties(n);var r=e.value.document,o=r.getTextsAtRange(t).map(function(e){return r.getClosest(e.key,function(e){return"inline"===e.object&&((null==n.type||e.type===n.type)&&!(null!=n.data&&!e.data.isSuperset(n.data)))})}).filter(function(e){return e}).toOrderedSet().toList();e.withoutNormalizing(function(){o.forEach(function(t){var n=e.value.document.getParent(t.key),r=n.nodes.indexOf(t);t.nodes.forEach(function(t,o){e.moveNodeByKey(t.key,n.key,r+o)}),e.removeNodeByKey(t.key)})})},De.wrapBlockAtRange=function(e,t,n){n=(n=fe.create(n)).set("nodes",n.nodes.clear());var r=e.value.document,o=r.getLeafBlocksAtRange(t),i=o.first(),a=o.last(),u=void 0,s=void 0,c=void 0;if(1===o.length?(u=r.getParent(i.key),s=o):u=r.getClosest(i.key,function(e){return!!r.getClosest(a.key,function(t){return e===t})}),null==u&&(u=r),null==s){var l=u.nodes.reduce(function(e,t,n){return(t===i||t.hasDescendant(i.key))&&(e[0]=n),(t===a||t.hasDescendant(a.key))&&(e[1]=n),e},[]);c=l[0],s=u.nodes.slice(l[0],l[1]+1)}null==c&&(c=u.nodes.indexOf(s.first())),e.withoutNormalizing(function(){e.insertNodeByKey(u.key,c,n),s.forEach(function(t,r){e.moveNodeByKey(t.key,n.key,r)})})},De.wrapInlineAtRange=function(e,t,n){var r=e.value.document,o=t.start,i=t.end;if(t.isCollapsed){var a=r.getClosestInline(o.path);if(!a)return;if(!e.isVoid(a))return;return e.wrapInlineByKey(a.key,n)}n=(n=ie.create(n)).set("nodes",n.nodes.clear());var u=r.getLeafBlocksAtRange(t),s=r.getClosestBlock(o.path),c=r.getClosestBlock(i.path),l=r.getClosestInline(o.path),f=r.getClosestInline(i.path),d=s.getFurthestChild(o.key),p=c.getFurthestChild(i.key);e.withoutNormalizing(function(){l&&l===f||(e.splitDescendantsByKey(p.key,i.key,i.offset),e.splitDescendantsByKey(d.key,o.key,o.offset)),r=e.value.document,s=r.getDescendant(s.key),c=r.getDescendant(c.key),d=s.getFurthestChild(o.key),p=c.getFurthestChild(i.key);var a=s.nodes.indexOf(d),h=c.nodes.indexOf(p);if(l&&l===f){var v=s.getTextsAtRange(t).map(function(e){return o.key===e.key&&i.key===e.key?e.splitText(o.offset)[1].splitText(i.offset-o.offset)[0].regenerateKey():o.key===e.key?e.splitText(o.offset)[1].regenerateKey():i.key===e.key?e.splitText(i.offset)[0].regenerateKey():e.regenerateKey()});n=n.set("nodes",v),e.insertInlineAtRange(t,n)}else if(s===c){r=e.value.document,s=r.getClosestBlock(o.key),d=s.getFurthestChild(o.key);var y=r.getNextSibling(d.key),m=s.nodes.indexOf(y),g=o.key===i.key?y:s.getFurthestChild(i.key),b=s.nodes.skipUntil(function(e){return e===y}).takeUntil(function(e){return e===g}).push(g),k=n.regenerateKey();e.insertNodeByKey(s.key,m,k),b.forEach(function(t,n){e.moveNodeByKey(t.key,k.key,n)})}else{var w=s.nodes.slice(a+1),_=c.nodes.slice(0,h+1),x=n.regenerateKey(),O=n.regenerateKey();e.insertNodeByKey(s.key,a+1,x),e.insertNodeByKey(c.key,h,O),w.forEach(function(t,n){e.moveNodeByKey(t.key,x.key,n)}),_.forEach(function(t,n){e.moveNodeByKey(t.key,O.key,n)}),u.slice(1,-1).forEach(function(t){var r=n.regenerateKey();e.insertNodeByKey(t.key,0,r),t.nodes.forEach(function(t,n){e.moveNodeByKey(t.key,r.key,n)})})}})},De.wrapTextAtRange=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:n,o=t.start,i=t.end,a=t.moveToStart(),u=t.moveToEnd();o.path.equals(i.path)&&(u=u.moveForward(n.length)),e.withoutNormalizing(function(){e.insertTextAtRange(a,n),e.insertTextAtRange(u,r)})};var Le={addMarkByPath:function(e,t,n,r,o){o=K.create(o),e.addMarksByPath(t,n,r,[o])},addMarksByPath:function(e,t,n,r,o){if((o=K.createSet(o)).size){var i=e.value.document.assertNode(t);e.withoutNormalizing(function(){n+r<i.text.length&&e.splitNodeByPath(t,n+r),n>0&&(e.splitNodeByPath(t,n),t=z.increment(t),n=0),o.forEach(function(n){e.applyOperation({type:"add_mark",path:t,mark:K.create(n)})})})}},replaceMarksByPath:function(e,t,n,r,o){var i=K.createSet(o),a=e.value.document.assertNode(t);a.marks.equals(i)||e.withoutNormalizing(function(){n+r<a.text.length&&e.splitNodeByPath(t,n+r),n>0&&(e.splitNodeByPath(t,n),t=z.increment(t),n=0);var o=i.subtract(a.marks);a.marks.subtract(i).forEach(function(n){e.applyOperation({type:"remove_mark",path:t,mark:K.create(n)})}),o.forEach(function(n){e.applyOperation({type:"add_mark",path:t,mark:K.create(n)})})})},insertFragmentByPath:function(e,t,n,r){r.nodes.forEach(function(r,o){e.insertNodeByPath(t,n+o,r)})},insertNodeByPath:function(e,t,n,r){e.applyOperation({type:"insert_node",path:t.concat(n),node:r})},insertTextByPath:function(e,t,n,r,o){var i=e.value,a=i.annotations;i.document.assertNode(t),e.withoutNormalizing(function(){var i=!0,u=!1,s=void 0;try{for(var c,l=a.values()[Symbol.iterator]();!(i=(c=l.next()).done);i=!0){var f=c.value,d=f.start,p=f.end;e.isAtomic(f)&&(d.path.equals(t)&&d.offset<n&&(!p.path.equals(t)||p.offset>n)&&e.removeAnnotation(f))}}catch(e){u=!0,s=e}finally{try{!i&&l.return&&l.return()}finally{if(u)throw s}}e.applyOperation({type:"insert_text",path:t,offset:n,text:r}),o&&e.replaceMarksByPath(t,n,r.length,o)})},mergeNodeByPath:function(e,t){var n=e.value.document,r=n.getDescendant(t),o=n.getPreviousSibling(t);if(!o)throw new Error('Unable to merge node with path "'+t+'", because it has no previous sibling.');var i="text"===o.object?o.text.length:o.nodes.size;e.applyOperation({type:"merge_node",path:t,position:i,properties:{type:r.type,data:r.data},target:null})},moveNodeByPath:function(e,t,n,r){if(z.isEqual(t,n))return e;var o=n.concat(r);if(z.isEqual(t,o))return e;e.applyOperation({type:"move_node",path:t,newPath:o})},removeMarkByPath:function(e,t,n,r,o){o=K.create(o),e.removeMarksByPath(t,n,r,[o])},removeMarksByPath:function(e,t,n,r,o){if((o=K.createSet(o)).size){var i=e.value.document.assertNode(t);o.intersect(i.marks).isEmpty()||e.withoutNormalizing(function(){n+r<i.text.length&&e.splitNodeByPath(t,n+r),n>0&&(e.splitNodeByPath(t,n),t=z.increment(t),n=0),o.forEach(function(o){e.applyOperation({type:"remove_mark",path:t,offset:n,length:r,mark:o})})})}},removeAllMarksByPath:function(e,t){var n=e.state.document.assertNode(t);e.withoutNormalizing(function(){if("text"!==n.object){var r=!0,o=!1,i=void 0;try{for(var a,u=n.texts()[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var s=a.value,c=N(s,2),l=c[0],f=c[1],d=t.concat(f);e.removeMarksByPath(d,0,l.text.length,l.marks)}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}}else e.removeMarksByPath(t,0,n.text.length,n.marks)})},removeNodeByPath:function(e,t){var n=e.value.document.assertNode(t);e.applyOperation({type:"remove_node",path:t,node:n})},removeTextByPath:function(e,t,n,r){var o=e.value,i=o.document,a=o.annotations,u=i.assertNode(t).text.slice(n,n+r);e.withoutNormalizing(function(){var r=!0,o=!1,i=void 0;try{for(var s,c=a.values()[Symbol.iterator]();!(r=(s=c.next()).done);r=!0){var l=s.value,f=l.start,d=l.end;e.isAtomic(l)&&(f.path.equals(t)&&f.offset<n&&(!d.path.equals(t)||d.offset>n)&&e.removeAnnotation(l))}}catch(e){o=!0,i=e}finally{try{!r&&c.return&&c.return()}finally{if(o)throw i}}e.applyOperation({type:"remove_text",path:t,offset:n,text:u})})},replaceNodeByPath:function(e,t,n){n=ce.create(n);var r=t.last(),o=z.lift(t);e.withoutNormalizing(function(){e.removeNodeByPath(t),e.insertNodeByPath(o,r,n)})},replaceTextByPath:function(e,t,n,r,o,i){e.withoutNormalizing(function(){e.removeTextByPath(t,n,r),e.insertTextByPath(t,n,o,i)})},setMarkByPath:function(e,t,n,r,o,i){o=K.create(o),i=K.createProperties(i);var a=e.value.document.assertNode(t);e.withoutNormalizing(function(){n+r<a.text.length&&e.splitNodeByPath(t,n+r),n>0&&(e.splitNodeByPath(t,n),t=z.increment(t),n=0),e.applyOperation({type:"set_mark",path:t,properties:o,newProperties:i})})},setNodeByPath:function(e,t,n){var r=e.value.document.assertNode(t);n=ce.createProperties(n);var o=d()(r,Object.keys(n));e.applyOperation({type:"set_node",path:t,properties:o,newProperties:n})},setTextByPath:function(e,t,n,r){var o=e.value.document.assertNode(t).text.length;e.replaceTextByPath(t,0,o,n,r)},splitNodeByPath:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=r.target,i=void 0===o?null:o,a=e.value,u=a.document,s=u.getDescendant(t);e.applyOperation({type:"split_node",path:t,position:n,target:i,properties:{type:s.type,data:s.data}})},splitDescendantsByPath:function(e,t,n,r){if(t.equals(n))e.splitNodeByPath(n,r);else{var o=e.value.document,i=r,a=n;e.withoutNormalizing(function(){e.splitNodeByKey(n,r);var u=!0,s=!1,c=void 0;try{for(var l,f=o.ancestors(n)[Symbol.iterator]();!(u=(l=f.next()).done);u=!0){var d=l.value,p=N(d,2)[1],h=i;if(i=a.last()+1,a=p,e.splitNodeByPath(p,i,{target:h}),p.equals(t))break}}catch(e){s=!0,c=e}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}})}},unwrapInlineByPath:function(e,t,n){var r=e.value,o=r.document,i=r.selection,a=o.assertNode(t),u=a.getFirstText(),s=a.getLastText(),c=i.moveToRangeOfNode(u,s);e.unwrapInlineAtRange(c,n)},unwrapBlockByPath:function(e,t,n){var r=e.value,o=r.document,i=r.selection,a=o.assertNode(t),u=a.getFirstText(),s=a.getLastText(),c=i.moveToRangeOfNode(u,s);e.unwrapBlockAtRange(c,n)},unwrapNodeByPath:function(e,t){var n=e.value.document;n.assertNode(t);var r=z.lift(t),o=n.assertNode(r),i=t.last(),a=r.last(),u=z.lift(r),s=0===i,c=i===o.nodes.size-1;e.withoutNormalizing(function(){if(1===o.nodes.size)e.moveNodeByPath(t,u,a+1),e.removeNodeByPath(r);else if(s)e.moveNodeByPath(t,u,a);else if(c)e.moveNodeByPath(t,u,a+1);else{var n=z.increment(t,1,r.size-1);n=n.set(n.size-1,0),e.splitNodeByPath(r,i),e.moveNodeByPath(n,u,a+1)}})},unwrapChildrenByPath:function(e,t){t=z.create(t);var n=e.value.document.assertNode(t),r=z.lift(t),o=t.last(),i=n.nodes;e.withoutNormalizing(function(){i.reverse().forEach(function(n,a){var u=i.size-a-1,s=t.push(u);e.moveNodeByPath(s,r,o+1)}),e.removeNodeByPath(t)})},wrapBlockByPath:function(e,t,n){n=(n=fe.create(n)).set("nodes",n.nodes.clear());var r=z.lift(t),o=t.last(),i=z.increment(t);e.withoutNormalizing(function(){e.insertNodeByPath(r,o,n),e.moveNodeByPath(i,t,0)})},wrapInlineByPath:function(e,t,n){n=(n=ie.create(n)).set("nodes",n.nodes.clear());var r=z.lift(t),o=t.last(),i=z.increment(t);e.withoutNormalizing(function(){e.insertNodeByPath(r,o,n),e.moveNodeByPath(i,t,0)})},wrapNodeByPath:function(e,t,n){"block"===(n=ce.create(n)).object?e.wrapBlockByPath(t,n):"inline"===n.object&&e.wrapInlineByPath(t,n)}},ze=function(e){Le[e+"ByKey"]=function(t,n){for(var r=arguments.length,o=Array(r>2?r-2:0),i=2;i<r;i++)o[i-2]=arguments[i];var a=t.value,u=a.document,s=u.assertPath(n);t[e+"ByPath"].apply(t,[s].concat(o))}},qe=!0,Ue=!1,Ve=void 0;try{for(var Qe,Ke=["addMark","insertFragment","insertNode","insertText","mergeNode","removeAllMarks","removeMark","removeNode","removeText","replaceMarks","replaceNode","replaceText","setMark","setNode","setText","splitNode","unwrapBlock","unwrapChildren","unwrapInline","unwrapNode","wrapBlock","wrapInline","wrapNode"][Symbol.iterator]();!(qe=(Qe=Ke.next()).done);qe=!0){ze(Qe.value)}}catch(e){Ue=!0,Ve=e}finally{try{!qe&&Ke.return&&Ke.return()}finally{if(Ue)throw Ve}}Le.moveNodeByKey=function(e,t,n){for(var r=arguments.length,o=Array(r>3?r-3:0),i=3;i<r;i++)o[i-3]=arguments[i];var a=e.value,u=a.document,s=u.assertPath(t),c=u.assertPath(n);e.moveNodeByPath.apply(e,[s,c].concat(o))},Le.splitDescendantsByKey=function(e,t,n){for(var r=arguments.length,o=Array(r>3?r-3:0),i=3;i<r;i++)o[i-3]=arguments[i];var a=e.value,u=a.document,s=u.assertPath(t),c=u.assertPath(n);e.splitDescendantsByPath.apply(e,[s,c].concat(o))};var We={};We.save=function(e,t){var n=e.operations,o=e.value.data,i=e.tmp,a=i.save,u=i.merge;if(!1!==a&&function(e){if("set_selection"===e.type){var t=e.newProperties,n=t.isFocused,r=t.anchor,o=t.focus;if(void 0!==n&&!r&&!o)return!1}return!0}(t)){var s,c,l=o.get("undos")||Object(r.List)(),f=l.last(),d=f&&f.last();if(null==u&&(0!==n.size?u=!0:(s=t,u=!!(c=d)&&("set_selection"===s.type&&"set_selection"===c.type||"insert_text"===s.type&&"insert_text"===c.type&&s.offset===c.offset+c.text.length&&s.path.equals(c.path)||"remove_text"===s.type&&"remove_text"===c.type&&s.offset+s.text.length===c.offset&&s.path.equals(c.path)))),u&&f){var p=f.push(t);l=(l=l.pop()).push(p)}else{var h=Object(r.List)([t]);l=l.push(h)}l.size>100&&(l=l.takeLast(100)),e.withoutSaving(function(){var t=Object(r.List)(),n=o.set("undos",l).set("redos",t);e.setData(n)})}},We.redo=function(e){var t=e.value.data,n=t.get("redos")||Object(r.List)(),o=t.get("undos")||Object(r.List)(),i=n.last();i&&e.withoutSaving(function(){e.withoutNormalizing(function(){i.forEach(function(t){var n=t,r=n.type,o=n.newProperties;"set_selection"===r&&(t=t.set("newProperties",h()(o,"isFocused"))),e.applyOperation(t)}),n=n.pop(),o=o.push(i);var r=t.set("undos",o).set("redos",n);e.setData(r)})})},We.undo=function(e){var t=e.value.data,n=t.get("redos")||Object(r.List)(),o=t.get("undos")||Object(r.List)(),i=o.last();i&&e.withoutSaving(function(){e.withoutNormalizing(function(){i.slice().reverse().map(function(e){return e.invert()}).forEach(function(t){var n=t,r=n.type,o=n.newProperties;"set_selection"===r&&(t=t.set("newProperties",h()(o,"isFocused"))),e.applyOperation(t)}),n=n.push(i),o=o.pop();var r=t.set("undos",o).set("redos",n);e.setData(r)})})},We.withoutMerging=function(e,t){var n=e.tmp.merge;e.tmp.merge=!1,t(e),e.tmp.merge=n},We.withoutSaving=function(e,t){var n=e.tmp.save;e.tmp.save=!1,t(e),e.tmp.save=n};var Je={};function He(e,t){for(var n,r=arguments.length,o=Array(r>2?r-2:0),i=2;i<r;i++)o[i-2]=arguments[i];var a=(n=e.value.selection)[t].apply(n,o);e.select(a)}function $e(e,t,n,r){var o=t.slice(0,1).toUpperCase()+t.slice(1),i=n.slice(0,1).toUpperCase()+n.slice(1),a=r.slice(0,1).toUpperCase()+r.slice(1),u="move"+o+"To"+i+"OfNode",s="text"===r?"getNode":"getClosest"+a,c=e.value,l=c.document,f=c.selection[t],d=l[s](f.key);d&&e[u](d)}function Ye(e,t,n,r,o){var i=t.slice(0,1).toUpperCase()+t.slice(1),a=n.slice(0,1).toUpperCase()+n.slice(1),u=r.slice(0,1).toUpperCase()+r.slice(1),s=o.slice(0,1).toUpperCase()+o.slice(1),c="move"+i+"To"+a+"OfNode",l="text"===o?"getNode":"getClosest"+s,f="get"+u+s,d=e.value,p=d.document,h=d.selection[t],v=p[l](h.key);if(v){var y=p[f](v.key);y&&e[c](y)}}function Ge(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;if(0!==n){if(n<0)return Xe(e,t,-n);var r=t.slice(0,1).toUpperCase()+t.slice(1),o=e.value,i=o.document,a=o.selection,u=a[t],s=i.hasVoidParent(u.path,e);if(!s&&u.offset-n>=0){var c=a["move"+r+"Backward"](n);e.select(c)}else{var l=i.getPreviousText(u.path);if(l){var f=i.getClosestBlock(u.path).hasNode(l.key),d=l&&i.hasVoidParent(l.key,e);if(e["move"+r+"ToEndOfNode"](l),!s&&!d&&f){var p=e.value.selection["move"+r+"Backward"](n);e.select(p)}}}}}function Xe(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;if(0!==n){if(n<0)return Ge(e,t,-n);var r=t.slice(0,1).toUpperCase()+t.slice(1),o=e.value,i=o.document,a=o.selection,u=a[t],s=i.getNode(u.path),c=i.hasVoidParent(u.path,e);if(!c&&u.offset+n<=s.text.length){var l=a["move"+r+"Forward"](n);e.select(l)}else{var f=i.getNextText(u.path);if(f){var d=i.getClosestBlock(u.path).hasNode(f.key),p=i.hasVoidParent(f.key,e);if(e["move"+r+"ToStartOfNode"](f),!c&&!p&&d){var h=e.value.selection["move"+r+"Forward"](n);e.select(h)}}}}}function Ze(e,t){var n=e.value,r=n.document,o=n.selection[t],i=r.getClosestBlock(o.key),a=i.getOffset(o.key)+o.offset,u=i.text,s=Ie.getWordOffsetBackward(u,a);e.command(Ge,t,s>0?s:1)}function et(e,t){var n=e.value,r=n.document,o=n.selection[t],i=r.getClosestBlock(o.key),a=i.getOffset(o.key)+o.offset,u=i.text,s=Ie.getWordOffsetForward(u,a);e.command(Xe,t,s>0?s:1)}Je.blur=function(e){e.select({isFocused:!1})},Je.deselect=function(e){var t=$.create();e.select(t)},Je.focus=function(e){e.select({isFocused:!0})},Je.flip=function(e){e.command(He,"flip")},Je.moveAnchorBackward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Ge,"anchor"].concat(n))},Je.moveAnchorWordBackward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Ze,"anchor"].concat(n))},Je.moveAnchorForward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Xe,"anchor"].concat(n))},Je.moveAnchorWordForward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[et,"anchor"].concat(n))},Je.moveAnchorTo=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveAnchorTo"].concat(n))},Je.moveAnchorToEndOfBlock=function(e){e.command($e,"anchor","end","block")},Je.moveAnchorToEndOfInline=function(e){e.command($e,"anchor","end","inline")},Je.moveAnchorToEndOfDocument=function(e){e.moveAnchorToEndOfNode(e.value.document).moveToAnchor()},Je.moveAnchorToEndOfNextBlock=function(e){e.command(Ye,"anchor","end","next","block")},Je.moveAnchorToEndOfNextInline=function(e){e.command(Ye,"anchor","end","next","inline")},Je.moveAnchorToEndOfNextText=function(e){e.command(Ye,"anchor","end","next","text")},Je.moveAnchorToEndOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveAnchorToEndOfNode"].concat(n))},Je.moveAnchorToEndOfPreviousBlock=function(e){e.command(Ye,"anchor","end","previous","block")},Je.moveAnchorToEndOfPreviousInline=function(e){e.command(Ye,"anchor","end","previous","inline")},Je.moveAnchorToEndOfPreviousText=function(e){e.command(Ye,"anchor","end","previous","text")},Je.moveAnchorToEndOfText=function(e){e.command($e,"anchor","end","text")},Je.moveAnchorToStartOfBlock=function(e){e.command($e,"anchor","start","block")},Je.moveAnchorToStartOfDocument=function(e){e.moveAnchorToStartOfNode(e.value.document).moveToAnchor()},Je.moveAnchorToStartOfInline=function(e){e.command($e,"anchor","start","inline")},Je.moveAnchorToStartOfNextBlock=function(e){e.command(Ye,"anchor","start","next","block")},Je.moveAnchorToStartOfNextInline=function(e){e.command(Ye,"anchor","start","next","inline")},Je.moveAnchorToStartOfNextText=function(e){e.command(Ye,"anchor","start","next","text")},Je.moveAnchorToStartOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveAnchorToStartOfNode"].concat(n))},Je.moveAnchorToStartOfPreviousBlock=function(e){e.command(Ye,"anchor","start","previous","block")},Je.moveAnchorToStartOfPreviousInline=function(e){e.command(Ye,"anchor","start","previous","inline")},Je.moveAnchorToStartOfPreviousText=function(e){e.command(Ye,"anchor","start","previous","text")},Je.moveAnchorToStartOfText=function(e){e.command($e,"anchor","start","text")},Je.moveBackward=function(e){for(var t,n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];(t=e.moveAnchorBackward.apply(e,r)).moveFocusBackward.apply(t,r)},Je.moveWordBackward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.moveFocusWordBackward.apply(e,n).moveToFocus()},Je.moveEndBackward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Ge,"end"].concat(n))},Je.moveEndWordBackward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Ze,"end"].concat(n))},Je.moveEndForward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Xe,"end"].concat(n))},Je.moveEndWordForward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[et,"end"].concat(n))},Je.moveEndTo=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveEndTo"].concat(n))},Je.moveEndToEndOfBlock=function(e){e.command($e,"end","end","block")},Je.moveEndToEndOfDocument=function(e){e.moveEndToEndOfNode(e.value.document).moveToEnd()},Je.moveEndToEndOfInline=function(e){e.command($e,"end","end","inline")},Je.moveEndToEndOfNextBlock=function(e){e.command(Ye,"end","end","next","block")},Je.moveEndToEndOfNextInline=function(e){e.command(Ye,"end","end","next","inline")},Je.moveEndToEndOfNextText=function(e){e.command(Ye,"end","end","next","text")},Je.moveEndToEndOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveEndToEndOfNode"].concat(n))},Je.moveEndToEndOfPreviousBlock=function(e){e.command(Ye,"end","end","previous","block")},Je.moveEndToEndOfPreviousInline=function(e){e.command(Ye,"end","end","previous","inline")},Je.moveEndToEndOfPreviousText=function(e){e.command(Ye,"end","end","previous","text")},Je.moveEndToEndOfText=function(e){e.command($e,"end","end","text")},Je.moveEndToStartOfBlock=function(e){e.command($e,"end","start","block")},Je.moveEndToStartOfDocument=function(e){e.moveEndToStartOfNode(e.value.document).moveToEnd()},Je.moveEndToStartOfInline=function(e){e.command($e,"end","start","inline")},Je.moveEndToStartOfNextBlock=function(e){e.command(Ye,"end","start","next","block")},Je.moveEndToStartOfNextInline=function(e){e.command(Ye,"end","start","next","inline")},Je.moveEndToStartOfNextText=function(e){e.command(Ye,"end","start","next","text")},Je.moveEndToStartOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveEndToStartOfNode"].concat(n))},Je.moveEndToStartOfPreviousBlock=function(e){e.command(Ye,"end","start","previous","block")},Je.moveEndToStartOfPreviousInline=function(e){e.command(Ye,"end","start","previous","inline")},Je.moveEndToStartOfPreviousText=function(e){e.command(Ye,"end","start","previous","text")},Je.moveEndToStartOfText=function(e){e.command($e,"end","start","text")},Je.moveFocusBackward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Ge,"focus"].concat(n))},Je.moveFocusWordBackward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Ze,"focus"].concat(n))},Je.moveFocusForward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Xe,"focus"].concat(n))},Je.moveFocusWordForward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[et,"focus"].concat(n))},Je.moveFocusTo=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveFocusTo"].concat(n))},Je.moveFocusToEndOfBlock=function(e){e.command($e,"focus","end","block")},Je.moveFocusToEndOfDocument=function(e){e.moveFocusToEndOfNode(e.value.document).moveToFocus()},Je.moveFocusToEndOfInline=function(e){e.command($e,"focus","end","inline")},Je.moveFocusToEndOfNextBlock=function(e){e.command(Ye,"focus","end","next","block")},Je.moveFocusToEndOfNextInline=function(e){e.command(Ye,"focus","end","next","inline")},Je.moveFocusToEndOfNextText=function(e){e.command(Ye,"focus","end","next","text")},Je.moveFocusToEndOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveFocusToEndOfNode"].concat(n))},Je.moveFocusToEndOfPreviousBlock=function(e){e.command(Ye,"focus","end","previous","block")},Je.moveFocusToEndOfPreviousInline=function(e){e.command(Ye,"focus","end","previous","inline")},Je.moveFocusToEndOfPreviousText=function(e){e.command(Ye,"focus","end","previous","text")},Je.moveFocusToEndOfText=function(e){e.command($e,"focus","end","text")},Je.moveFocusToStartOfBlock=function(e){e.command($e,"focus","start","block")},Je.moveFocusToStartOfDocument=function(e){e.moveFocusToStartOfNode(e.value.document).moveToFocus()},Je.moveFocusToStartOfInline=function(e){e.command($e,"focus","start","inline")},Je.moveFocusToStartOfNextBlock=function(e){e.command(Ye,"focus","start","next","block")},Je.moveFocusToStartOfNextInline=function(e){e.command(Ye,"focus","start","next","inline")},Je.moveFocusToStartOfNextText=function(e){e.command(Ye,"focus","start","next","text")},Je.moveFocusToStartOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveFocusToStartOfNode"].concat(n))},Je.moveFocusToStartOfPreviousBlock=function(e){e.command(Ye,"focus","start","previous","block")},Je.moveFocusToStartOfPreviousInline=function(e){e.command(Ye,"focus","start","previous","inline")},Je.moveFocusToStartOfPreviousText=function(e){e.command(Ye,"focus","start","previous","text")},Je.moveFocusToStartOfText=function(e){e.command($e,"focus","start","text")},Je.moveForward=function(e){for(var t,n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];(t=e.moveAnchorForward.apply(e,r)).moveFocusForward.apply(t,r)},Je.moveWordForward=function(e){for(var t,n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];(t=e.moveFocusWordForward.apply(e,r)).moveToFocus.apply(t,r)},Je.moveStartBackward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Ge,"start"].concat(n))},Je.moveStartWordBackward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Ze,"start"].concat(n))},Je.moveStartForward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[Xe,"start"].concat(n))},Je.moveStartWordForward=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[et,"start"].concat(n))},Je.moveStartTo=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveStartTo"].concat(n))},Je.moveStartToEndOfBlock=function(e){e.command($e,"start","end","block")},Je.moveStartToEndOfDocument=function(e){e.moveStartToEndOfNode(e.value.document).moveToStart()},Je.moveStartToEndOfInline=function(e){e.command($e,"start","end","inline")},Je.moveStartToEndOfNextBlock=function(e){e.command(Ye,"start","end","next","block")},Je.moveStartToEndOfNextInline=function(e){e.command(Ye,"start","end","next","inline")},Je.moveStartToEndOfNextText=function(e){e.command(Ye,"start","end","next","text")},Je.moveStartToEndOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveStartToEndOfNode"].concat(n))},Je.moveStartToEndOfPreviousBlock=function(e){e.command(Ye,"start","end","previous","block")},Je.moveStartToEndOfPreviousInline=function(e){e.command(Ye,"start","end","previous","inline")},Je.moveStartToEndOfPreviousText=function(e){e.command(Ye,"start","end","previous","text")},Je.moveStartToEndOfText=function(e){e.command($e,"start","end","text")},Je.moveStartToStartOfBlock=function(e){e.command($e,"start","start","block")},Je.moveStartToStartOfDocument=function(e){e.moveStartToStartOfNode(e.value.document).moveToStart()},Je.moveStartToStartOfInline=function(e){e.command($e,"start","start","inline")},Je.moveStartToStartOfNextBlock=function(e){e.command(Ye,"start","start","next","block")},Je.moveStartToStartOfNextInline=function(e){e.command(Ye,"start","start","next","inline")},Je.moveStartToStartOfNextText=function(e){e.command(Ye,"start","start","next","text")},Je.moveStartToStartOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveStartToStartOfNode"].concat(n))},Je.moveStartToStartOfPreviousBlock=function(e){e.command(Ye,"start","start","previous","block")},Je.moveStartToStartOfPreviousInline=function(e){e.command(Ye,"start","start","previous","inline")},Je.moveStartToStartOfPreviousText=function(e){e.command(Ye,"start","start","previous","text")},Je.moveStartToStartOfText=function(e){e.command($e,"start","start","text")},Je.moveTo=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveTo"].concat(n))},Je.moveToAnchor=function(e){e.command(He,"moveToAnchor")},Je.moveToEnd=function(e){e.command(He,"moveToEnd")},Je.moveToEndOfBlock=function(e){e.moveEndToEndOfBlock().moveToEnd()},Je.moveToEndOfDocument=function(e){e.moveEndToEndOfNode(e.value.document).moveToEnd()},Je.moveToEndOfInline=function(e){e.moveEndToEndOfInline().moveToEnd()},Je.moveToEndOfNextBlock=function(e){e.moveEndToEndOfNextBlock().moveToEnd()},Je.moveToEndOfNextInline=function(e){e.moveEndToEndOfNextInline().moveToEnd()},Je.moveToEndOfNextText=function(e){e.moveEndToEndOfNextText().moveToEnd()},Je.moveToEndOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveToEndOfNode"].concat(n))},Je.moveToEndOfPreviousBlock=function(e){e.moveStartToEndOfPreviousBlock().moveToStart()},Je.moveToEndOfPreviousInline=function(e){e.moveStartToEndOfPreviousInline().moveToStart()},Je.moveToEndOfPreviousText=function(e){e.moveStartToEndOfPreviousText().moveToStart()},Je.moveToEndOfText=function(e){e.moveEndToEndOfText().moveToEnd()},Je.moveToFocus=function(e){e.command(He,"moveToFocus")},Je.moveToRangeOfDocument=function(e){e.moveToRangeOfNode(e.value.document)},Je.moveToRangeOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveToRangeOfNode"].concat(n))},Je.moveToStart=function(e){e.command(He,"moveToStart")},Je.moveToStartOfBlock=function(e){e.moveStartToStartOfBlock().moveToStart()},Je.moveToStartOfDocument=function(e){e.moveStartToStartOfNode(e.value.document).moveToStart()},Je.moveToStartOfInline=function(e){e.moveStartToStartOfInline().moveToStart()},Je.moveToStartOfNextBlock=function(e){e.moveEndToStartOfNextBlock().moveToEnd()},Je.moveToStartOfNextInline=function(e){e.moveEndToStartOfNextInline().moveToEnd()},Je.moveToStartOfNextText=function(e){e.moveEndToStartOfNextText().moveToEnd()},Je.moveToStartOfNode=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"moveToStartOfNode"].concat(n))},Je.moveToStartOfPreviousBlock=function(e){e.moveStartToStartOfPreviousBlock().moveToStart()},Je.moveToStartOfPreviousInline=function(e){e.moveStartToStartOfPreviousInline().moveToStart()},Je.moveToStartOfPreviousText=function(e){e.moveStartToStartOfPreviousText().moveToStart()},Je.moveToStartOfText=function(e){e.moveStartToStartOfText().moveToStart()},Je.select=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};t=$.createProperties(t);var o=n.snapshot,i=void 0!==o&&o,a=e.value,u=a.document,s=a.selection,c={},l=s.setProperties(t);for(var f in l=u.resolveSelection(l),t=d()(l,Object.keys(t)))!0!==i&&Object(r.is)(t[f],s[f])||(c[f]=t[f]);if(s.marks&&!c.marks&&(c.anchor||c.focus)&&(c.marks=null),0!==Object.keys(c).length){var p=d()(s.toJSON(),Object.keys(c));e.applyOperation({type:"set_selection",value:a,properties:p,newProperties:c},i?{skip:!1,merge:!1}:{})}},Je.setAnchor=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"setAnchor"].concat(n))},Je.setEnd=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"setEnd"].concat(n))},Je.setFocus=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"setFocus"].concat(n))},Je.setStart=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.command.apply(e,[He,"setStart"].concat(n))},Je.snapshotSelection=function(e){e.withoutMerging(function(){e.select(e.value.selection,{snapshot:!0})})};var tt={};function nt(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{onConstruct:function(t,n){for(var r in e)t.registerQuery(r);return n()},onQuery:function(t,n,r){var o=t.type,i=t.args,a=e[o];if(!a)return r();var u=a.apply(void 0,[n].concat(C(i)));return void 0===u?r():u}}}tt.setData=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.value,r=pe.createProperties({data:t}),o=d()(n,Object.keys(r));e.applyOperation({type:"set_value",properties:o,newProperties:r})},tt.addAnnotation=function(e,t){t=te.create(t),e.applyOperation({type:"add_annotation",annotation:t})},tt.removeAnnotation=function(e,t){t=te.create(t),e.applyOperation({type:"remove_annotation",annotation:t})},tt.setAnnotation=function(e,t,n){t=te.create(t),n=te.createProperties(n),e.applyOperation({type:"set_annotation",properties:t,newProperties:n})},tt.setAnnotations=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=e.value,r=pe.createProperties({annotations:t}),o=d()(n,Object.keys(r));e.applyOperation({type:"set_value",properties:o,newProperties:r})};var rt=function(e){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};_(this,t);var r=A(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));for(var o in r.code=e,n)r[o]=n[o];return Error.captureStackTrace?Error.captureStackTrace(r,r.constructor):r.stack=(new Error).stack,r}return S(t,e),t}(Error);function ot(e){var t=e.rules,n=e.document,r=e.blocks,o=e.inlines,i=e.marks,a=e.annotations,u=e.decorations,s=[];if(t&&(s=s.concat(t)),n&&s.push(E({match:[{object:"document"}]},n)),r)for(var c in r)s.push(E({match:[{object:"block",type:c}]},r[c]));if(o)for(var l in o)s.push(E({match:[{object:"inline",type:l}]},o[l]));if(i)for(var f in i)s.push(E({match:[{object:"mark",type:f}]},i[f]));if(a)for(var d in a)s.push(E({match:[{object:"annotation",type:d}]},a[d]));if(u)for(var p in u)s.push(E({match:[{object:"decoration",type:p}]},u[p]));function h(e,t,n){var r=s.filter(function(t){return it(e,t.match)}),o=at(e,r,s,{every:!0});return o?new rt(o.code,o):n()}return[{normalizeNode:function(e,t,n){var r=h(e,t,function(){});return r?function(){var e=r.rule,n=t.operations.size;e.normalize&&e.normalize(t,r),t.operations.size===n&&function(e,t){var n=t.code,r=t.node,o=t.child,i=t.next,a=t.previous,u=t.key,s=t.mark;switch(n){case"child_max_invalid":case"child_object_invalid":case"child_type_invalid":case"child_unknown":case"first_child_object_invalid":case"first_child_type_invalid":case"last_child_object_invalid":case"last_child_type_invalid":return"text"===o.object&&"block"===r.object&&1===r.nodes.size?e.removeNodeByKey(r.key):e.removeNodeByKey(o.key);case"previous_sibling_object_invalid":case"previous_sibling_type_invalid":return"text"===a.object&&"block"===r.object&&1===r.nodes.size?e.removeNodeByKey(r.key):e.removeNodeByKey(a.key);case"next_sibling_object_invalid":case"next_sibling_type_invalid":return"text"===i.object&&"block"===r.object&&1===r.nodes.size?e.removeNodeByKey(r.key):e.removeNodeByKey(i.key);case"child_min_invalid":case"node_text_invalid":case"parent_object_invalid":case"parent_type_invalid":return"document"===r.object?r.nodes.forEach(function(t){return e.removeNodeByKey(t.key)}):e.removeNodeByKey(r.key);case"node_data_invalid":return void 0===r.data.get(u)&&"document"!==r.object?e.removeNodeByKey(r.key):e.setNodeByKey(r.key,{data:r.data.delete(u)});case"node_mark_invalid":return r.getTexts().forEach(function(t){return e.removeMarkByKey(t.key,0,t.text.length,s)});default:e.removeNodeByKey(r.key)}}(t,r)}:n()},validateNode:h},nt({isAtomic:function(e,t){var n=s.find(function(e){return"isAtomic"in e&&it(t,e.match)});return n&&n.isAtomic},isVoid:function(e,t){var n=s.find(function(e){return"isVoid"in e&&it(t,e.match)});return n&&n.isVoid}})]}function it(e,t){return!at(e,t)}function at(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=r.every,i=void 0!==o&&o,a=r.match;if("function"==typeof t)return t(e,void 0===a?null:a)?null:lt("node_invalid",{rule:t,node:e});if(Array.isArray(t)){var u=t.length?t:[{}],s=void 0,c=!0,l=!1,f=void 0;try{for(var d,p=u[Symbol.iterator]();!(c=(d=p.next()).done);c=!0){var h=at(e,d.value,n);if(s=s||h,i&&h)return h;if(!i&&!h)return}}catch(e){l=!0,f=e}finally{try{!c&&p.return&&p.return()}finally{if(l)throw f}}return s}return function(e,t){if(null==t.object)return;if(t.object===e.object)return;if("function"==typeof t.object&&t.object(e.object))return;return lt("node_object_invalid",{rule:t,node:e})}(e,t)||function(e,t){if(null==t.type)return;if(t.type===e.type)return;if("function"==typeof t.type&&t.type(e.type))return;return lt("node_type_invalid",{rule:t,node:e})}(e,t)||function(e,t){if(null==t.data)return;if(null==e.data)return;if("function"==typeof t.data){if(t.data(e.data))return;return lt("node_data_invalid",{rule:t,node:e})}for(var n in t.data){var r=t.data[n],o=e.data&&e.data.get(n);if(!("function"==typeof r?r(o):r===o))return lt("node_data_invalid",{rule:t,node:e,key:n,value:o})}}(e,t)||function(e,t){if(null==t.marks)return;var n="text"===e.object?e.marks.toArray():e.getMarks().toArray(),r=function(n){return t.marks.some(function(e){return"function"==typeof e.type?e.type(n.type):e.type===n.type})?"continue":{v:lt("node_mark_invalid",{rule:t,node:e,mark:n})}},o=!0,i=!1,a=void 0;try{for(var u,s=n[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value,l=r(c);switch(l){case"continue":continue;default:if("object"===(void 0===l?"undefined":w(l)))return l.v}}}catch(e){i=!0,a=e}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}}(e,t)||function(e,t){if(null==t.text)return;var n=e.text;if("function"==typeof t.text?t.text(n):t.text.test(n))return;return lt("node_text_invalid",{rule:t,node:e,text:n})}(e,t)||function(e,t){if(null==t.first)return;var n=e.nodes.first();if(!n)return;var r=at(n,t.first);if(!r)return;return r.rule=t,r.node=e,r.child=n,r.code=r.code.replace("node_","first_child_"),r}(e,t)||function(e,t){if(null==t.last)return;var n=e.nodes.last();if(!n)return;var r=at(n,t.last);if(!r)return;return r.rule=t,r.node=e,r.child=n,r.code=r.code.replace("node_","last_child_"),r}(e,t)||function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(null==e.nodes)return;var r=e.nodes,o=null!=t.nodes?t.nodes.slice():[],i=0,a=0,u=null,s=-1,c=null,l=null,f=null,d=null,p=null;function h(){return 0!==o.length&&(c=o.shift(),a=i,i=0,u=c.min||null,l=c.max||null,!0)}function v(){s>0&&(s-=1,i=a)}null!=t.nodes&&h();for(;d=(s+=1)?r.get(s-1):null,f=r.get(s),p=r.get(s+1),f&&(a=i,i+=1,1);){var y=ut(e,f,n)||st(e,f,d,s,n)||ct(e,f,p,s,n);if(y)return y;if(null!=t.nodes){if(!c)return lt("child_unknown",{rule:t,node:e,child:f,index:s});if(c.match){var m=at(f,c.match);if(m){if(null!=l&&i-1>l)return v(),lt("child_max_invalid",{rule:t,node:e,index:s,child:r.get(s),count:i,limit:l});var g=u;if(h()){if(a-1>=g){s-=1;continue}return null==at(f,c.match)?(v(),lt("child_min_invalid",{rule:t,node:e,index:s,count:a-1,limit:g})):(m.rule=t,m.node=e,m.child=f,m.index=s,m.code=m.code.replace("node_","child_"),m)}return null!=l&&i>l?lt("child_unknown",{rule:t,node:e,child:f,index:s}):(m.rule=t,m.node=e,m.child=f,m.index=s,m.code=m.code.replace("node_","child_"),m)}}}}if(null!=l&&i>l)return lt("child_max_invalid",{rule:t,node:e,index:s-1,count:i,child:r.get(s-1),limit:l});if(null!=t.nodes)do{if(i<u)return lt("child_min_invalid",{rule:t,node:e,index:s,count:i,limit:u})}while(h())}(e,t,n)}function ut(e,t,n){var r=!0,o=!1,i=void 0;try{for(var a,u=n[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var s=a.value;if(null!=s.parent&&it(t,s.match)){var c=at(e,s.parent);if(c)return c.rule=s,c.parent=e,c.node=t,c.code=c.code.replace("node_","parent_"),c}}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}}function st(e,t,n,r,o){if(n){var i=!0,a=!1,u=void 0;try{for(var s,c=o[Symbol.iterator]();!(i=(s=c.next()).done);i=!0){var l=s.value;if(null!=l.previous&&it(t,l.match)){var f=at(n,l.previous);if(f)return f.rule=l,f.node=e,f.child=t,f.index=r,f.previous=n,f.code=f.code.replace("node_","previous_sibling_"),f}}}catch(e){a=!0,u=e}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}}}function ct(e,t,n,r,o){if(n){var i=!0,a=!1,u=void 0;try{for(var s,c=o[Symbol.iterator]();!(i=(s=c.next()).done);i=!0){var l=s.value;if(null!=l.next&&it(t,l.match)){var f=at(n,l.next,[],{match:t});if(f)return f.rule=l,f.node=e,f.child=t,f.index=r,f.next=n,f.code=f.code.replace("node_","next_sibling_"),f}}}catch(e){a=!0,u=e}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}}}function lt(e,t){return E({code:e},t)}function ft(e){e.value.selection.isExpanded&&e.delete()}var dt={};dt.addMark=function(e,t){t=K.create(t);var n=e.value,r=n.document,o=n.selection;if(o.isExpanded)e.addMarkAtRange(o,t);else if(o.marks){var i=o.marks.add(t),a=o.set("marks",i);e.select(a)}else{var u=r.getActiveMarksAtRange(o).add(t),s=o.set("marks",u);e.select(s)}},dt.addMarks=function(e,t){t.forEach(function(t){return e.addMark(t)})},dt.delete=function(e){var t=e.value.selection;e.deleteAtRange(t),e.moveToFocus()},dt.deleteBackward=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=e.value,r=n.selection;r.isExpanded?e.delete():e.deleteBackwardAtRange(r,t)},dt.deleteCharBackward=function(e){var t=e.value.selection;t.isExpanded?e.delete():e.deleteCharBackwardAtRange(t)},dt.deleteLineBackward=function(e){var t=e.value.selection;t.isExpanded?e.delete():e.deleteLineBackwardAtRange(t)},dt.deleteWordBackward=function(e){var t=e.value.selection;t.isExpanded?e.delete():e.deleteWordBackwardAtRange(t)},dt.deleteForward=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=e.value,r=n.selection;r.isExpanded?e.delete():e.deleteForwardAtRange(r,t)},dt.deleteCharForward=function(e){var t=e.value.selection;t.isExpanded?e.delete():e.deleteCharForwardAtRange(t)},dt.deleteLineForward=function(e){var t=e.value.selection;t.isExpanded?e.delete():e.deleteLineForwardAtRange(t)},dt.deleteWordForward=function(e){var t=e.value.selection;t.isExpanded?e.delete():e.deleteWordForwardAtRange(t)},dt.insertBlock=function(e,t){ft(e),t=fe.create(t);var n=e.value.selection;e.insertBlockAtRange(n,t);var r=e.value.document.getNode(t.key);r&&e.moveToEndOfNode(r)},dt.insertFragment=function(e,t){if(t.nodes.size){ft(e);var n=e.value,r=n,o=r.document,i=r.selection,a=i.start,u=Array.from(o.texts(),function(e){return N(e,1)[0].key});e.insertFragmentAtRange(i,t);var s=(o=(n=e.value).document).getTexts().filter(function(e){return!u.includes(e.key)});if(0!==s.size){var c=t.text.length,l=o.getNode(a.key)||s.first(),f=s.last()||l;if(l!==f){var d=o.getCommonAncestor(l.key,f.key),p=d.getOffset(l.key)+(a.key===l.key?a.offset:0);f=d.getTextAtOffset(p+c-1)||f,e.moveTo(f.key,p+c-d.getOffset(f.key))}else e.moveTo(f.key,c)}}},dt.insertInline=function(e,t){ft(e),t=ie.create(t);var n=e.value.selection;e.insertInlineAtRange(n,t);var r=e.value.document.getNode(t.key);r&&e.moveToEndOfNode(r)},dt.insertText=function(e,t,n){ft(e);var r=e.value,o=r.document,i=r.selection;n=n||i.marks||o.getInsertMarksAtRange(i),e.withoutNormalizing(function(){e.insertTextAtRange(i,t,n),i.marks&&o!==e.value.document&&e.select({marks:null})})},dt.removeMark=function(e,t){t=K.create(t);var n=e.value,r=n.document,o=n.selection;if(o.isExpanded)e.removeMarkAtRange(o,t);else if(o.marks){var i=o.marks.remove(t),a=o.set("marks",i);e.select(a)}else{var u=r.getActiveMarksAtRange(o).remove(t),s=o.set("marks",u);e.select(s)}},dt.replaceMark=function(e,t,n){e.removeMark(t),e.addMark(n)},dt.setBlocks=function(e,t){var n=e.value.selection;e.setBlocksAtRange(n,t)},dt.setInlines=function(e,t){var n=e.value.selection;e.setInlinesAtRange(n,t)},dt.splitBlock=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;ft(e);var n=e.value,r=n.selection,o=n.document,i=r.marks||o.getInsertMarksAtRange(r);e.splitBlockAtRange(r,t).moveToEnd(),i&&0!==i.size&&e.select({marks:i})},dt.splitInline=function(e,t){ft(e);var n=e.value.selection;e.splitInlineAtRange(n,t)},dt.toggleMark=function(e,t){t=K.create(t),e.value.activeMarks.has(t)?e.removeMark(t):e.addMark(t)},dt.unwrapBlock=function(e,t){var n=e.value.selection;e.unwrapBlockAtRange(n,t)},dt.unwrapInline=function(e,t){var n=e.value.selection;e.unwrapInlineAtRange(n,t)},dt.wrapBlock=function(e,t){var n=e.value.selection;e.wrapBlockAtRange(n,t)},dt.wrapInline=function(e,t){var n=e.value.selection;e.wrapInlineAtRange(n,t)},dt.wrapText=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t,r=e.value,o=r.selection;e.wrapTextAtRange(o,t,n),o.isCollapsed&&e.moveStartBackward(t.length),e.moveEndBackward(n.length),o.isForward!==e.value.selection.isForward&&e.flip()};var pt=c()("slate:editor"),ht=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};_(this,e);var o=n.controller,i=void 0===o?this:o,a=n.construct,u=void 0===a||a,s=t.onChange,c=void 0===s?function(){}:s,l=t.plugins,f=void 0===l?[]:l,d=t.readOnly,p=void 0!==d&&d,h=t.value,v=void 0===h?pe.create():h;this.controller=i,this.middleware={},this.onChange=c,this.operations=Object(r.List)(),this.readOnly=null,this.value=null,this.tmp={dirty:[],flushing:!1,merge:null,normalize:!0,save:!0},function e(t,n){if(Array.isArray(n))return void n.forEach(function(n){return e(t,n)});if(null==n)return;var r=n.commands,o=n.queries,i=n.schema,a=T(n,["commands","queries","schema"]);if(r){var u=xe(r);e(t,u)}if(o){var s=nt(o);e(t,s)}if(i){var c=ot(i);e(t,c)}for(var l in a){var f=a[l];(t.middleware[l]=t.middleware[l]||[]).push(f)}}(this,function(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).plugins,t=void 0===e?[]:e,n=xe(E({},De,Le,We,Je,tt,dt)),r=nt({isAtomic:function(){return!1},isVoid:function(){return!1}});return[ot({rules:[{match:{object:"document"},nodes:[{match:{object:"block"}}]},{match:{object:"block",first:{object:"block"}},nodes:[{match:{object:"block"}}]},{match:{object:"block",first:[{object:"inline"},{object:"text"}]},nodes:[{match:[{object:"inline"},{object:"text"}]}]},{match:{object:"inline"},nodes:[{match:[{object:"inline"},{object:"text"}]}]},{match:[{object:"block"},{object:"inline"}],nodes:[{min:1}],normalize:function(e,t){var n=t.code,r=t.node;"child_min_invalid"===n&&r.nodes.isEmpty()&&e.insertNodeByKey(r.key,0,se.create())}},{match:{object:"block"},first:[{object:"block"},{object:"text"}],last:[{object:"block"},{object:"text"}],normalize:function(e,t){var n=t.code,r=t.node,o=se.create(),i=void 0;if("first_child_object_invalid"===n)i=0;else{if("last_child_object_invalid"!==n)return;i=r.nodes.size}e.insertNodeByKey(r.key,i,o)}},{match:{object:"inline"},first:[{object:"block"},{object:"text"}],last:[{object:"block"},{object:"text"}],previous:[{object:"block"},{object:"text"}],next:[{object:"block"},{object:"text"}],normalize:function(e,t){var n=t.code,r=t.node,o=t.index,i=se.create(),a=void 0;if("first_child_object_invalid"===n)a=0;else if("last_child_object_invalid"===n)a=r.nodes.size;else if("previous_sibling_object_invalid"===n)a=o;else{if("next_sibling_object_invalid"!==n)return;a=o+1}e.insertNodeByKey(r.key,a,i)}},{match:{object:"text"},next:function(e,t){return"text"!==e.object||!t.marks.equals(e.marks)},normalize:function(e,t){var n=t.code,r=t.next;"next_sibling_invalid"===n&&e.mergeNodeByKey(r.key)}},{match:{object:"text"},previous:function(e){return"text"!==e.object||""!==e.text},next:function(e){return"text"!==e.object||""!==e.text},normalize:function(e,t){var n=t.code,r=t.next,o=t.previous;"next_sibling_invalid"===n?e.removeNodeByKey(r.key):"previous_sibling_invalid"===n&&e.removeNodeByKey(o.key)}}]})].concat(C(t),[n,r])}({plugins:f})),u&&(this.run("onConstruct"),this.setReadOnly(p),this.setValue(v,n))}return x(e,[{key:"applyOperation",value:function(e){var t=this,n=this.operations,r=this.controller,o=this.value;i()(e)&&(e=E({},e,{value:o})),e=ke.create(e),this.withoutNormalizing(function(){r.save(e),o=t.value}),pt("apply",{operation:e}),this.value=e.apply(o),this.operations=n.push(e);var a=function(e){var t=e.type,n=e.node,r=e.path,o=e.newPath;switch(t){case"add_mark":case"insert_text":case"remove_mark":case"remove_text":case"set_mark":case"set_node":var i=z.getAncestors(r).toArray();return[].concat(C(i),[r]);case"insert_node":var a=n.getKeysToPathsTable(),u=Object.values(a).map(function(e){return r.concat(e)}),s=z.getAncestors(r).toArray();return[].concat(C(s),[r],C(u));case"split_node":var c=z.getAncestors(r).toArray(),l=z.increment(r);return[].concat(C(c),[r,l]);case"merge_node":var f=z.getAncestors(r).toArray(),d=z.decrement(r);return[].concat(C(f),[d]);case"move_node":if(z.isEqual(r,o))return[];var p=z.getAncestors(r).reduce(function(t,n){return t.push.apply(t,C(z.transform(n,e).toArray())),t},[]),h=z.getAncestors(o).reduce(function(t,n){return t.push.apply(t,C(z.transform(n,e).toArray())),t},[]);return[].concat(C(p),C(h));case"remove_node":var v=z.getAncestors(r).toArray();return[].concat(C(v));default:return[]}}(e),u=this.tmp.dirty.map(function(t){return t=z.create(t),z.transform(t,e).toArray()}),s={},c=Array.prototype.concat.apply(a,u);return this.tmp.dirty=[],c.forEach(function(e){var n=e.join(",");s[n]||t.tmp.dirty.push(e),s[n]=!0}),this.tmp.flushing||(this.tmp.flushing=!0,Promise.resolve().then(function(){return t.flush()})),r}},{key:"flush",value:function(){this.run("onChange");var e=this.value,t=this.operations,n=this.controller,o={value:e,operations:t};return this.operations=Object(r.List)(),this.tmp.flushing=!1,this.onChange(o),n}},{key:"command",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=this.controller;if("function"==typeof e)return e.apply(void 0,[o].concat(n)),vt(this),o;pt("command",{type:e,args:n});var i={type:e,args:n};return this.run("onCommand",i),vt(this),o}},{key:"hasCommand",value:function(e){var t=this.controller;return e in t&&t[e].__command}},{key:"hasQuery",value:function(e){var t=this.controller;return e in t&&t[e].__query}},{key:"normalize",value:function(){var e=this.value,t=this.controller,n=e.document,r=n.getKeysToPathsTable(),o=Object.values(r).map(z.create);this.tmp.dirty=this.tmp.dirty.concat(o),vt(this);var i=e.selection;return n=e.document,i.isUnset&&n.nodes.size&&t.moveToStartOfDocument(),t}},{key:"query",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=this.controller;if("function"==typeof e)return e.apply(void 0,[o].concat(n));pt("query",{type:e,args:n});var i={type:e,args:n};return this.run("onQuery",i)}},{key:"registerCommand",value:function(e){var t=this,n=this.controller;if(e in n&&n[e].__command)return n;Object(u.a)(!(e in n),"You cannot register a `"+e+"` command because it would overwrite an existing property of the `Editor`.");var r=function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return t.command.apply(t,[e].concat(r))};return n[e]=r,r.__command=!0,n}},{key:"registerQuery",value:function(e){var t=this,n=this.controller;if(e in n&&n[e].__query)return n;Object(u.a)(!(e in n),"You cannot register a `"+e+"` query because it would overwrite an existing property of the `Editor`.");var r=function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return t.query.apply(t,[e].concat(r))};return n[e]=r,r.__query=!0,n}},{key:"run",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=this.controller,i=this.middleware,a=i[e]||[],s=0;function c(){var e=a[s++];if(e){for(var t=arguments.length,r=Array(t),i=0;i<t;i++)r[i]=arguments[i];return r.length&&(n=r),e.apply(void 0,C(n).concat([o,c]))}}return Object.defineProperty(c,"change",{get:function(){Object(u.a)(!1,"As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.")}}),Object.defineProperty(c,"onChange",{get:function(){Object(u.a)(!1,"As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.")}}),Object.defineProperty(c,"props",{get:function(){Object(u.a)(!1,"As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.")}}),Object.defineProperty(c,"schema",{get:function(){Object(u.a)(!1,"As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.")}}),Object.defineProperty(c,"stack",{get:function(){Object(u.a)(!1,"As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.")}}),c()}},{key:"setReadOnly",value:function(e){return this.readOnly=e,this}},{key:"setValue",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.normalize,r=void 0===n?e!==this.value:n;return this.value=e,r&&this.normalize(),this}},{key:"withoutNormalizing",value:function(e){var t=this.controller,n=this.tmp.normalize;return this.tmp.normalize=!1,e(t),this.tmp.normalize=n,vt(this),t}},{key:"change",value:function(e){Object(a.a)(!1,"As of Slate 0.43 the `change` object has been replaced with `editor`, so the `editor.change()` method is deprecated.`");for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];e.apply(void 0,[this.controller].concat(n))}},{key:"call",value:function(e){Object(a.a)(!1,"As of Slate 0.43 the `editor.call(fn)` method has been deprecated, please use `editor.command(fn)` instead.");for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return e.apply(void 0,[this.controller].concat(n)),this.controller}},{key:"applyOperations",value:function(e){var t=this;return Object(a.a)(!1,"As of Slate 0.43 the `applyOperations` method is deprecated, please apply each operation in a loop instead."),e.forEach(function(e){return t.applyOperation(e)}),this.controller}},{key:"setOperationFlag",value:function(e,t){return Object(a.a)(!1,"As of slate@0.41 the `change.setOperationFlag` method has been deprecated."),this.tmp[e]=t,this}},{key:"getFlag",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(a.a)(!1,"As of slate@0.41 the `change.getFlag` method has been deprecated."),void 0!==t[e]?t[e]:this.tmp[e]}},{key:"unsetOperationFlag",value:function(e){return Object(a.a)(!1,"As of slate@0.41 the `change.unsetOperationFlag` method has been deprecated."),delete this.tmp[e],this}},{key:"withoutNormalization",value:function(e){return Object(a.a)(!1,"As of slate@0.41 the `change.withoutNormalization` helper has been renamed to `change.withoutNormalizing`."),this.withoutNormalizing(e)}},{key:"editor",get:function(){return Object(a.a)(!1,"As of Slate 0.43 the `change` object has been replaced with `editor`, so you don't need to access `change.editor`."),this.controller}}]),e}();function vt(e){e.tmp.normalize&&e.tmp.dirty.length&&e.withoutNormalizing(function(){for(;e.tmp.dirty.length;){var t=e.tmp.dirty.pop();yt(e,t)}})}function yt(e,t){for(var n=e.controller,r=e.value,o=r.document,i=o.assertNode(t),a=0,u=100+("text"===i.object?1:i.nodes.size);i;){var s=i.normalize(n);if(!s)break;s(n),o=(r=e.value).document;var c=i.key,l=o.getDescendant(t);if(l&&l.key===c)i=l;else{if(!(l=o.getDescendant(c)))break;i=l,t=o.getPath(c)}if(++a>u)throw new Error("A schema rule could not be normalized after sufficient iterations. This is usually due to a `rule.normalize` or `plugin.normalizeNode` function of a schema being incorrectly written, causing an infinite loop.")}}var mt={marks:void 0,text:void 0},gt=function(e){function t(){return _(this,t),A(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return S(t,e),x(t,[{key:"updateMark",value:function(e,t){var n=this.marks;if(t.equals(e))return this;if(!n.has(e))return this;var r=n.withMutations(function(n){n.remove(e).add(t)});return this.set("marks",r)}},{key:"addMark",value:function(e){var t=this.marks;return this.set("marks",t.add(e))}},{key:"addMarks",value:function(e){var t=this.marks;return this.set("marks",t.union(e))}},{key:"insertText",value:function(e,t){var n=this.text,r=n.slice(0,e)+t+n.slice(e);return this.set("text",r)}},{key:"removeMark",value:function(e){var t=this.marks;return this.set("marks",t.remove(e))}},{key:"toJSON",value:function(){return{object:this.object,text:this.text,marks:this.marks.toArray().map(function(e){return e.toJSON()})}}}],[{key:"create",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(Object(a.a)(!1,"As of slate@0.47 the `Leaf` model is deprecated."),t.isLeaf(e))return e;if("string"==typeof e&&(e={text:e}),i()(e))return t.fromJSON(e);throw new Error("`Leaf.create` only accepts objects, strings or leaves, but you passed it: "+e)}},{key:"createLeaves",value:function(e){if(e.size<=1)return e;var t=!1,n=Object(r.List)().withMutations(function(n){e.findLast(function(e,r){var o=n.first();if(o){if(o.marks.equals(e.marks))return t=!0,void n.set(0,o.set("text",""+e.text+o.text));if(""===o.text)return t=!0,void n.set(0,e);if(""===e.text)return void(t=!0)}n.unshift(e)})});return t?n:e}},{key:"splitLeaves",value:function(e,t){if(t<0)return[Object(r.List)(),e];if(0===e.size)return[Object(r.List)(),Object(r.List)()];var n=0,o=-1,i=void 0,a=void 0;return e.find(function(e){o++;var r=n,u=e.text;if((n+=u.length)<t)return!1;if(r>t)return!1;var s=t-r;return i=e.set("text",u.slice(0,s)),a=e.set("text",u.slice(s)),!0}),i?""===i.text?0===o?[r.List.of(i),e]:[e.take(o),e.skip(o)]:""===a.text?o===e.size-1?[e,r.List.of(a)]:[e.take(o+1),e.skip(o+1)]:[e.take(o).push(i),e.skip(o+1).unshift(a)]:[e,Object(r.List)()]}},{key:"createList",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(r.List.isList(e)||Array.isArray(e)){var n=new r.List(e.map(t.create));return n}throw new Error("`Leaf.createList` only accepts arrays or lists, but you passed it: "+e)}},{key:"fromJSON",value:function(e){var n=e.text,o=void 0===n?"":n,i=e.marks,a=void 0===i?[]:i;return new t({text:o,marks:Object(r.Set)(a.map(K.fromJSON))})}},{key:"isLeafList",value:function(e){return r.List.isList(e)&&e.every(function(e){return t.isLeaf(e)})}}]),t}(Object(r.Record)(mt));function bt(e,t){var n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var u=i.value,s=!0,c=!1,l=void 0;try{for(var f,d=Object.getOwnPropertyNames(e)[Symbol.iterator]();!(s=(f=d.next()).done);s=!0){var p=f.value;if(!u.hasOwnProperty(p)){var h=Object.getOwnPropertyDescriptor(e,p);Object.defineProperty(u,p,h)}}}catch(e){c=!0,l=e}finally{try{!s&&d.return&&d.return()}finally{if(c)throw l}}var v=!0,y=!1,m=void 0;try{for(var g,b=Object.getOwnPropertyNames(e.prototype)[Symbol.iterator]();!(v=(g=b.next()).done);v=!0){var k=g.value;if(!u.prototype.hasOwnProperty(k)){h=Object.getOwnPropertyDescriptor(e.prototype,k);Object.defineProperty(u.prototype,k,h)}}}catch(e){y=!0,m=e}finally{try{!v&&b.return&&b.return()}finally{if(y)throw m}}}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}}Object.entries({Annotation:te,Block:fe,Change:_e,Decoration:J,Document:re,Editor:ht,Inline:ie,Leaf:gt,Mark:K,Node:ce,Operation:ke,Point:U,Range:Z,Selection:$,Text:se,Value:pe}).forEach(function(e){var t,n,r,o,i=N(e,2),a=i[0],u=i[1];return bt((t=a.toLowerCase(),n=Y[t],r="is"+t.charAt(0).toUpperCase()+t.slice(1),(o=function(){function e(){_(this,e)}return x(e,[{key:"object",get:function(){return t}}]),e}())[r]=G.bind(null,t),o.prototype[n]=!0,o),[u])}),bt(function(){function e(){_(this,e)}return x(e,[{key:"toJS",value:function(){return this.toJSON.apply(this,arguments)}}],[{key:"fromJS",value:function(){return this.fromJSON.apply(this,arguments)}}]),e}(),[te,fe,J,re,ie,gt,K,ce,ke,U,Z,$,se,pe]);var kt=!0,wt=Symbol("LEAF"),_t=Symbol("STORE_KEY"),xt=Symbol("undefined"),Ot=Symbol("null"),Et=void 0,St=new WeakMap;function Tt(e,t){var n=function(t){var n=e[t];if(!n)throw new Error('Object does not have a property named "'+t+'".');e[t]=function(){for(var e=arguments.length,r=Array(e),o=0;o<e;o++)r[o]=arguments[o];if(!kt)return n.apply(this,r);St.has(this)||St.set(this,{noArgs:{},hasArgs:{}});var i=St.get(this),a=i.noArgs,u=i.hasArgs,s=0!==r.length,c=void 0,l=void 0;if((c=s?At(u,l=[t].concat(r)):a[t])!==Et)return c===xt?void 0:c;var f=n.apply(this,r),d=void 0===f?xt:f;return s?Nt(u,l,d):a[t]=d,f}},r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){n(a.value)}}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}}function At(e,t){var n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var u=i.value;if(void 0===u?u=xt:null==u&&(u=Ot),(e="object"===(void 0===u?"undefined":w(u))?e[_t]&&e[_t].get(u):e[u])===Et)return Et}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}return e[wt]}function Nt(e,t,n){var r=e,o=!0,i=!1,a=void 0;try{for(var u,s=t[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value;if(void 0===c?c=xt:null==c&&(c=Ot),"object"===(void 0===c?"undefined":w(c)))if(r[_t]||(r[_t]=new WeakMap),r[_t].has(c))r=r[_t].get(c);else{var l={};r[_t].set(c,l),r=l}else r[c]||(r[c]={}),r=r[c]}}catch(e){i=!0,a=e}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}return r[wt]=n,e}var Ct=function(){function e(){_(this,e)}return x(e,[{key:"getFirstText",value:function(){if("text"===this.object)return this;var e=null,t=this.nodes.find(function(t){return"text"===t.object||!!(e=t.getFirstText())});return e||t}},{key:"getKeysToPathsTable",value:function(){var e=O({},this.key,[]);return this.nodes&&this.nodes.forEach(function(t,n){var r=t.getKeysToPathsTable();for(var o in r){var i=r[o];Object(a.a)(!(o in e),'A node with a duplicate key of "'+o+'" was found! Duplicate keys are not allowed, you should use `node.regenerateKey` before inserting if you are reusing an existing node.'),e[o]=[n].concat(C(i))}}),e}},{key:"getLastText",value:function(){if("text"===this.object)return this;var e=null,t=this.nodes.findLast(function(t){return"text"===t.object||(e=t.getLastText())});return e||t}},{key:"getNode",value:function(e){return(e=this.resolvePath(e))?"text"===this.object&&e.size?null:e.size?this.getDescendant(e):this:null}},{key:"getPath",value:function(e){if(r.List.isList(e))return e;if(ce.isNode(e)&&this.descendants){var t=!0,n=!1,o=void 0;try{for(var i,a=this.descendants()[Symbol.iterator]();!(t=(i=a.next()).done);t=!0){var u=i.value,s=N(u,2),c=s[0],l=s[1];if(e===c)return l}}catch(e){n=!0,o=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw o}}}var f=this.getKeysToPathsTable()[e];return f?Object(r.List)(f):null}},{key:"getText",value:function(){return"text"===this.object?this.text:this.nodes.reduce(function(e,t){return e+t.text},"")}},{key:"hasNode",value:function(e){return!!this.getNode(e)}},{key:"normalize",value:function(e){return e.run("normalizeNode",this)}},{key:"regenerateKey",value:function(){var e=k.create();return this.set("key",e)}},{key:"resolvePath",value:function(e,t){return"string"==typeof e?(e=this.getPath(e),null!=t&&(e=e.concat(t))):e=z.create(e),e}},{key:"validate",value:function(e){return e.run("validateNode",this)}}]),e}();Tt(Ct.prototype,["getFirstText","getKeysToPathsTable","getLastText","getText","normalize","validate"]),bt(Ct,[fe,re,ie,se]);var jt=void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};function Pt(){return!0}var Ft=function(){function e(){_(this,e)}return x(e,[{key:"addMark",value:function(e,t){e=this.resolvePath(e);var n=this.assertDescendant(e);return n=n.addMark(t),this.replaceNode(e,n)}},{key:"ancestors",value:function(e){return this.createIterable({path:e,direction:null,downward:!1,includeTargetAncestors:!0,includeRoot:!0})}},{key:"blocks",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.onlyLeaves,n=e.onlyRoots,r=e.onlyTypes,o=e.match,i=T(e,["onlyLeaves","onlyRoots","onlyTypes","match"]),a=this.descendants(E({includeDocument:!1,includeInlines:!1,includeTexts:!1},i,{match:function(e,i){return!(r&&!r.includes(e.type))&&((!n||1===i.size)&&(!(t&&!e.isLeafBlock())&&!(o&&!o(e,i))))}}));return a}},{key:"createAnnotation",value:function(e){return e=te.createProperties(e),this.resolveAnnotation(e)}},{key:"createDecoration",value:function(e){return e=J.createProperties(e),this.resolveDecoration(e)}},{key:"createIterable",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.direction,n=void 0===t?"forward":t,r=e.downward,o=void 0===r||r,i=e.upward,a=void 0===i||i,u=e.includeBlocks,s=void 0===u||u,c=e.includeDocument,l=void 0===c||c,f=e.includeInlines,d=void 0===f||f,p=e.includeRoot,h=void 0!==p&&p,v=e.includeTarget,y=void 0===v?!!e.range:v,m=e.includeTargetAncestors,g=void 0!==m&&m,b=e.includeTexts,k=void 0===b||b,w=e.match,_=void 0===w?null:w,x=this,E=null,S=null;e.range?(S=x.resolveRange(e.range),E=x.resolvePath(S.start.path)):e.path&&(E=x.resolvePath(e.path));var T=E&&x.assertNode(E),A="undefined"==typeof window?jt.Set:window.Set;return O({},Symbol.iterator,function(){var e=new A,t=S&&S.start.path,r=S&&S.end.path,i=E,u=T,c=!1,f=!1,p=!1,v=function(){return i&&u?(h||u!==x)&&(s||"block"!==u.object)&&(l||"document"!==u.object)&&(d||"inline"!==u.object)&&(k||"text"!==u.object)?_&&!_(u,i)?m():{value:[u,i],done:!1}:m():{done:!0}},m=function s(){if(!i||!u)return v();if(t&&!f)return p?i.size===t.size-1?(f=!0,i=E,u=T,s()):(i=t.slice(0,i.size+1),u=x.assertNode(i),v()):(p=!0,i=z.create([]),u=x,v());if(y&&!c)return c=!0,v();if(r&&i.equals(r))return u=null,i=null,s();if(o&&u.nodes&&u.nodes.size&&!e.has(u)){e.add(u);var l="forward"===n?0:u.nodes.size-1;return i=i.push(l),u=x.assertNode(i),v()}if("forward"===n){var d=z.increment(i),h=x.getNode(d);if(h)return i=d,u=h,v()}if("backward"===n&&0!==i.last()){var m=z.decrement(i),b=x.getNode(m);if(b)return i=m,u=b,v()}return a&&i.size?(i=z.lift(i),u=x.assertNode(i),e.has(u)?s():(e.add(u),g?v():s())):(i=null,u=null,s())};return{next:m}})}},{key:"createPoint",value:function(e){return e=U.createProperties(e),this.resolvePoint(e)}},{key:"createRange",value:function(e){return e=Z.createProperties(e),this.resolveRange(e)}},{key:"createSelection",value:function(e){return e=$.createProperties(e),this.resolveSelection(e)}},{key:"descendants",value:function(e){return this.createIterable(E({path:[]},e))}},{key:"filterDescendants",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Pt,t=[],n=!0,o=!1,i=void 0;try{for(var a,u=this.descendants()[Symbol.iterator]();!(n=(a=u.next()).done);n=!0){var s=a.value,c=N(s,2),l=c[0],f=c[1];e(l,f)&&t.push(l)}}catch(e){o=!0,i=e}finally{try{!n&&u.return&&u.return()}finally{if(o)throw i}}return Object(r.List)(t)}},{key:"findDescendant",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Pt,t=!0,n=!1,r=void 0;try{for(var o,i=this.descendants()[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value,u=N(a,2),s=u[0],c=u[1];if(e(s,c))return s}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}return null}},{key:"forEachDescendant",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Pt,t=!0,n=!1,r=void 0;try{for(var o,i=this.descendants()[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value,u=e.apply(void 0,C(a));if(!1===u)return}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}}},{key:"getActiveMarksAtRange",value:function(e){if((e=this.resolveRange(e)).isUnset)return Object(r.Set)();if(e.isCollapsed){var t=e.start;return this.getInsertMarksAtPoint(t)}var n=e,o=n.start,i=n.end,a=o.path,u=o.offset,s=i.path,c=i.offset,l=this.getDescendant(a),f=this.getDescendant(s);if(!a.equals(s)){for(;!a.equals(s)&&0===c;){var d=this.texts({path:s,direction:"backward"}),p=N(d,1),h=N(p[0],2);f=h[0],s=h[1],c=f.text.length}for(;!a.equals(s)&&u===l.text.length;){var v=this.texts({path:a}),y=N(v,1),m=N(y[0],2);l=m[0],a=m[1],u=0}}if(a.equals(s))return l.marks;var g=l.marks;if(0===g.size)return Object(r.Set)();var b=f.marks,k=g.intersect(b);if(0===k.size)return k;var w=this.texts({path:a}),_=N(w,1),x=N(_[0],2);for(l=x[0],a=x[1];!a.equals(s);){if(0!==l.text.length&&0===(k=k.intersect(l.marks)).size)return Object(r.Set)();var O=this.texts({path:a}),E=N(O,1),S=N(E[0],2);l=S[0],a=S[1]}return k}},{key:"getAncestors",value:function(e){var t=this.ancestors(e),n=Array.from(t,function(e){return N(e,1)[0]}).reverse();return Object(r.List)(n)}},{key:"getBlocks",value:function(){var e=this.blocks({onlyLeaves:!0}),t=Array.from(e,function(e){return N(e,1)[0]});return Object(r.List)(t)}},{key:"getBlocksByType",value:function(e){var t=this.blocks({onlyLeaves:!0,onlyTypes:[e]}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.List)(n)}},{key:"getChild",value:function(e){return!(e=this.resolvePath(e))||e.size>1?null:this.nodes.get(e.first())}},{key:"getClosest",value:function(e,t){var n=!0,r=!1,o=void 0;try{for(var i,a=this.ancestors(e)[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var u=i.value,s=N(u,2),c=s[0];if(t(c,s[1]))return c}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}return null}},{key:"getClosestBlock",value:function(e){return this.getClosest(e,function(e){return"block"===e.object})}},{key:"getClosestInline",value:function(e){return this.getClosest(e,function(e){return"inline"===e.object})}},{key:"getClosestVoid",value:function(e,t){return Object(u.a)(!pe.isValue(t),"As of Slate 0.42.0, the `node.getClosestVoid` method takes an `editor` instead of a `value`."),this.getClosest(e,function(e){return t.isVoid(e)})}},{key:"getCommonAncestor",value:function(e,t){if(e=this.resolvePath(e),t=this.resolvePath(t),!e||!t)return null;var n=z.relate(e,t);return this.getNode(n)}},{key:"getDecorations",value:function(e){var t=e.run("decorateNode",this);return t=J.createList(t)}},{key:"getDepth",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(!(e=this.resolvePath(e)))return null;var n=this.getNode(e),r=n?e.size-1+t:null;return r}},{key:"getDescendant",value:function(e){if(!(e=this.resolvePath(e))||!e.size)return null;var t=this;return e.forEach(function(e){return!!(t=t.getIn(["nodes",e]))}),t}},{key:"getDescendantsAtRange",value:function(e){var t=this.descendants({range:e}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.List)(n)}},{key:"getFragmentAtRange",value:function(e){if((e=this.resolveRange(e)).isUnset)return re.create();for(var t=e,n=t.start,r=t.end,o=this,i=r.path,a=r.offset,u="end";i.size;){var s=i.last();o=o.splitNode(i,a),a=s+1,(i=z.lift(i)).size||"end"!==u||(i=n.path,a=n.offset,u="start")}var c=n.path.first()+1,l=r.path.first()+2,f=o.nodes.slice(c,l);return re.create({nodes:f})}},{key:"getFurthest",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Pt,n=this.ancestors(e),r=Array.from(n).reverse(),o=!0,i=!1,a=void 0;try{for(var u,s=r[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var c=u.value,l=N(c,2),f=l[0],d=l[1];if(t(f,d))return f}}catch(e){i=!0,a=e}finally{try{!o&&s.return&&s.return()}finally{if(i)throw a}}return null}},{key:"getFurthestBlock",value:function(e){return this.getFurthest(e,function(e){return"block"===e.object})}},{key:"getFurthestChild",value:function(e){return(e=this.resolvePath(e))&&e.size?this.nodes.get(e.first()):null}},{key:"getFurthestInline",value:function(e){return this.getFurthest(e,function(e){return"inline"===e.object})}},{key:"getInlines",value:function(){var e=this.inlines({onlyLeaves:!0}),t=Array.from(e,function(e){return N(e,1)[0]});return Object(r.List)(t)}},{key:"getInlinesByType",value:function(e){var t=this.inlines({onlyLeaves:!0,onlyTypes:[e]}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.List)(n)}},{key:"getInsertMarksAtPoint",value:function(e){var t=e=this.resolvePoint(e),n=t.path,r=t.offset,o=this.getDescendant(n);if(0!==r)return o.marks;var i=void 0,a=void 0,u=!0,s=!1,c=void 0;try{for(var l,f=this.ancestors(n)[Symbol.iterator]();!(u=(l=f.next()).done);u=!0){var d=l.value,p=N(d,2),h=p[0],v=p[1];"block"===h.object&&(i=h,a=v)}}catch(e){s=!0,c=e}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}var y=z.drop(n,a.size),m=i.texts({path:y,direction:"backward"}),g=N(m,1)[0];return g?N(g,1)[0].marks:o.marks}},{key:"getInsertMarksAtRange",value:function(e){var t=(e=this.resolveRange(e)).start;return e.isUnset?Object(r.Set)():e.isCollapsed?this.getInsertMarksAtPoint(t):this.getDescendant(t.path).marks}},{key:"getLeafBlocksAtRange",value:function(e){var t=this.blocks({range:e,onlyLeaves:!0}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.List)(n)}},{key:"getLeafInlinesAtRange",value:function(e){var t=this.inlines({range:e,onlyLeaves:!0}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.List)(n)}},{key:"getNodesToPathsMap",value:function(){var e="undefined"==typeof window?new jt.Map:new window.Map;return e.set(this,z.create([])),this.forEachDescendant(function(t,n){e.set(t,n)}),e}},{key:"getMarks",value:function(){var e=this.marks(),t=Array.from(e,function(e){return N(e,1)[0]});return Object(r.OrderedSet)(t)}},{key:"getMarksAtRange",value:function(e){var t=this.marks({range:e}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.OrderedSet)(n)}},{key:"getMarksByType",value:function(e){var t=this.marks({onlyTypes:[e]}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.OrderedSet)(n)}},{key:"getNextBlock",value:function(e){var t=this.blocks({path:e,onlyLeaves:!0}),n=N(t,1)[0];return n?n[0]:null}},{key:"getNextNode",value:function(e){var t=this.createIterable({path:e,downward:!1}),n=N(t,1)[0];return n?n[0]:null}},{key:"getNextSibling",value:function(e){var t=this.siblings(e),n=N(t,1)[0];return n?n[0]:null}},{key:"getNextText",value:function(e){var t=this.texts({path:e}),n=N(t,1)[0];return n?n[0]:null}},{key:"getOffset",value:function(e){e=this.resolvePath(e),this.assertDescendant(e);var t=e.first(),n=this.nodes.slice(0,t).reduce(function(e,t){return e+t.text.length},0);return 1===e.size?n:n+this.nodes.get(t).getOffset(z.drop(e))}},{key:"getOffsetAtRange",value:function(e){if((e=this.resolveRange(e)).isUnset)throw new Error("The range cannot be unset to calculcate its offset.");if(e.isExpanded)throw new Error("The range must be collapsed to calculcate its offset.");var t=e.start;return this.getOffset(t.path)+t.offset}},{key:"getParent",value:function(e){if(!(e=this.resolvePath(e)))return null;if(!e.size)return null;var t=z.lift(e);return this.getNode(t)}},{key:"getPreviousBlock",value:function(e){var t=this.blocks({path:e,onlyLeaves:!0,direction:"backward"}),n=N(t,1)[0];return n?n[0]:null}},{key:"getPreviousNode",value:function(e){var t=this.createIterable({path:e,downward:!1,direction:"backward"}),n=N(t,1)[0];return n?n[0]:null}},{key:"getPreviousSibling",value:function(e){var t=this.siblings(e,{direction:"backward"}),n=N(t,1)[0];return n?n[0]:null}},{key:"getPreviousText",value:function(e){var t=this.texts({path:e,direction:"backward"}),n=N(t,1)[0];return n?n[0]:null}},{key:"getRootBlocksAtRange",value:function(e){var t=this.blocks({range:e,onlyRoots:!0}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.List)(n)}},{key:"getRootInlinesAtRange",value:function(e){var t=this.inlines({range:e,onlyRoots:!0}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.List)(n)}},{key:"getTextAtOffset",value:function(e){if(0===e)return this.getFirstText();if(e===this.text.length)return this.getLastText();if(e<0||e>this.text.length)return null;var t=0,n=!0,r=!1,o=void 0;try{for(var i,a=this.texts()[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var u=i.value,s=N(u,1)[0];if((t+=s.text.length)>e)return s}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}return null}},{key:"getTextDirection",value:function(){var e=y()(this.text);return"neutral"===e?null:e}},{key:"getTexts",value:function(){var e=this.texts(),t=Array.from(e,function(e){return N(e,1)[0]});return Object(r.List)(t)}},{key:"getTextsAtRange",value:function(e){var t=this.texts({range:e}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.List)(n)}},{key:"hasBlockChildren",value:function(){return!(!this.nodes||!this.nodes.find(function(e){return"block"===e.object}))}},{key:"hasChild",value:function(e){return!!this.getChild(e)}},{key:"hasInlineChildren",value:function(){return!(!this.nodes||!this.nodes.find(function(e){return"inline"===e.object||"text"===e.object}))}},{key:"hasDescendant",value:function(e){return!!this.getDescendant(e)}},{key:"hasVoidParent",value:function(e,t){return Object(u.a)(!pe.isValue(t),"As of Slate 0.42.0, the `node.hasVoidParent` method takes an `editor` instead of a `value`."),!!this.getClosestVoid(e,t)}},{key:"inlines",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.onlyLeaves,r=t.onlyRoots,o=t.onlyTypes,i=t.match,a=T(t,["onlyLeaves","onlyRoots","onlyTypes","match"]),u=this.descendants(E({includeBlocks:!1,includeTexts:!1,includeDocument:!1},a,{match:function(t,a){return!(o&&!o.includes(t.type))&&(!(n&&!t.isLeafInline())&&((!r||"block"===e.getParent(a).object)&&!(i&&!i(t,a))))}}));return u}},{key:"insertNode",value:function(e,t){var n=(e=this.resolvePath(e)).last(),r=z.lift(e),o=this.assertNode(r),i=o.nodes.splice(n,0,t);return o=o.set("nodes",i),this.replaceNode(r,o)}},{key:"insertText",value:function(e,t,n){e=this.resolvePath(e);var r=this.assertDescendant(e);return r=r.insertText(t,n),this.replaceNode(e,r)}},{key:"isLeafBlock",value:function(){return"block"===this.object&&!this.nodes.some(function(e){return"block"===e.object})}},{key:"isLeafInline",value:function(){return"inline"===this.object&&!this.nodes.some(function(e){return"inline"===e.object})}},{key:"isInRange",value:function(e,t){if(e=this.resolvePath(e),(t=this.resolveRange(t)).isUnset)return!1;var n=z.compare(e,t.start.path),r=z.compare(e,t.end.path),o=-1!==n&&1!==r;return o}},{key:"mapChildren",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Pt,n=this.nodes;n.forEach(function(r,o){var i=t(r,o,e.nodes);i!==r&&(n=n.set(i.key,i))});var r=this.set("nodes",n);return r}},{key:"mapDescendants",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Pt,n=this.nodes;n.forEach(function(r,o){var i=r;"text"!==i.object&&(i=i.mapDescendants(t)),(i=t(i,o,e.nodes))!==r&&(n=n.set(o,i))});var r=this.set("nodes",n);return r}},{key:"marks",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.onlyTypes,n=void 0===t?null:t,r=e.match,o=T(e,["onlyTypes","match"]),i=this.texts(o);return O({},Symbol.iterator,function(){var e=i[Symbol.iterator](),t=null,o=null,a=[];return{next:function i(){if(a.length){var u=a.shift();return n&&!n.includes(u.type)?i():r&&!r(u,t,o)?i():{value:[u,t,o],done:!1}}var s=e.next(),c=s.value;if(s.done)return{done:!0};var l=N(c,2);return t=l[0],o=l[1],a=t.marks.toArray(),i()}}})}},{key:"mergeNode",value:function(e){var t=this.assertNode(e);if(0===(e=this.resolvePath(e)).last())throw new Error("Unable to merge node because it has no previous sibling: "+t);var n=z.decrement(e),r=this.assertNode(n);if(r.object!==t.object)throw new Error("Unable to merge two different kinds of nodes: "+r+" and "+t);var o="text"===r.object?r.mergeText(t):r.set("nodes",r.nodes.concat(t.nodes)),i=this;return i=(i=(i=i.removeNode(e)).removeNode(n)).insertNode(n,o)}},{key:"moveNode",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=this.assertNode(e);e=this.resolvePath(e),t=this.resolvePath(t,n);var o=z.lift(t);this.assertNode(o);var i=ke.create({type:"move_node",path:e,newPath:t});t=z.transform(e,i).first();var a=this;return a=(a=a.removeNode(e)).insertNode(t,r)}},{key:"removeMark",value:function(e,t){e=this.resolvePath(e);var n=this.assertDescendant(e);return n=n.removeMark(t),this.replaceNode(e,n)}},{key:"removeNode",value:function(e){this.assertDescendant(e);var t=(e=this.resolvePath(e)).flatMap(function(e){return["nodes",e]});return this.deleteIn(t)}},{key:"removeText",value:function(e,t,n){var r=this.assertDescendant(e);return r=r.removeText(t,n.length),this.replaceNode(e,r)}},{key:"replaceNode",value:function(e,t){if(!(e=this.resolvePath(e)))throw new Error("Unable to replace a node because it could not be found in the first place: "+e);if(!e.size)return t;this.assertNode(e);var n=e.flatMap(function(e){return["nodes",e]});return this.setIn(n,t)}},{key:"resolveAnnotation",value:function(e){return e=(e=te.create(e)).normalize(this)}},{key:"resolveDecoration",value:function(e){return e=(e=J.create(e)).normalize(this)}},{key:"resolvePoint",value:function(e){return e=(e=U.create(e)).normalize(this)}},{key:"resolveRange",value:function(e){return e=(e=Z.create(e)).normalize(this)}},{key:"resolveSelection",value:function(e){return e=(e=$.create(e)).normalize(this)}},{key:"setNode",value:function(e,t){var n=this.assertNode(e);return n=n.merge(t),this.replaceNode(e,n)}},{key:"setMark",value:function(e,t,n){e=this.resolvePath(e);var r=this.assertDescendant(e);return r=r.setMark(t,n),this.replaceNode(e,r)}},{key:"siblings",value:function(e,t){return this.createIterable(E({path:e,upward:!1,downward:!1},t))}},{key:"splitNode",value:function(e,t,n){var r=this.assertNode(e);e=this.resolvePath(e);var o=void 0,i=void 0;if("text"===r.object){var a=r.splitText(t),u=N(a,2);o=u[0],i=u[1]}else{var s=r.nodes.take(t),c=r.nodes.skip(t);o=r.set("nodes",s),i=r.set("nodes",c).regenerateKey()}n&&"text"!==r.object&&(i=i.merge(n));var l=this;return l=(l=(l=l.removeNode(e)).insertNode(e,i)).insertNode(e,o)}},{key:"texts",value:function(e){return this.descendants(E({includeBlocks:!1,includeInlines:!1,includeDocument:!1},e))}},{key:"getBlocksAtRange",value:function(e){return Object(a.a)(!1,"As of slate@0.44 the `node.getBlocksAtRange` method has been renamed to `getLeafBlocksAtRange`."),this.getLeafBlocksAtRange(e)}},{key:"getBlocksAtRangeAsArray",value:function(e){return Object(a.a)(!1,"As of slate@0.44 the `node.getBlocksAtRangeAsArray` method has been renamed to `getLeafBlocksAtRangeAsArray`."),this.getLeafBlocksAtRangeAsArray(e)}},{key:"getInlinesAtRange",value:function(e){return Object(a.a)(!1,"As of slate@0.44 the `node.getInlinesAtRange` method has been renamed to `getLeafInlinesAtRange`."),this.getLeafInlinesAtRange(e)}},{key:"getInlinesAtRangeAsArray",value:function(e){return Object(a.a)(!1,"As of slate@0.44 the `node.getInlinesAtRangeAsArray` method has been renamed to `getLeafInlinesAtRangeAsArray`."),this.getLeafInlinesAtRangeAsArray(e)}},{key:"getNextTextAndPath",value:function(e){return Object(a.a)(!1,"As of slate@0.47, the `getNextTextAndPath` method has been renamed to `getNextTextEntry`."),this.getNextTextEntry(e)}},{key:"getNextDeepMatchingNodeAndPath",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return!0};Object(a.a)(!1,"As of slate@0.47, the `getNextDeepMatchingNodeAndPath` method is deprecated.");var n=this.getNextMatchingNodeAndPath(e);if(!n)return null;for(var r=N(n,2),o=r[0],i=r[1],u=void 0,s=function(){return u="text"!==o.object&&o.findFirstDescendantAndPath(t,i)};s(u);){var c=u,l=N(c,2);o=l[0],i=l[1]}return o?t(o)?[o,i]:this.getNextDeepMatchingNodeAndPath(n[1],t):null}},{key:"getPreviousTextAndPath",value:function(e){return Object(a.a)(!1,"As of slate@0.47, the `getPreviousTextAndPath` method has been renamed to `getPreviousTextEntry`."),this.getPreviousTextEntry(e)}},{key:"findFirstDescendantAndPath",value:function(e,t){return Object(a.a)(!1,"As of slate@0.47, the `findFirstDescendantAndPath` method is deprecated."),this.findDescendantAndPath(e,t,!1)}},{key:"getPreviousMatchingNodeAndPath",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return!0};if(Object(a.a)(!1,"As of slate@0.47, the `getPreviousMatchingNodeAndPath` method is deprecated."),!e)return null;for(var n=e.size;n>0;n--){var r=e.slice(0,n);if(0!==r.last()){for(var o=z.decrement(r),i=this.getNode(o);i&&!t(i);)o=z.decrement(o),i=this.getNode(o);if(i)return[i,o]}}return null}},{key:"getPreviousDeepMatchingNodeAndPath",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return!0};Object(a.a)(!1,"As of slate@0.47, the `getPreviousDeepMatchingNodeAndPath` method is deprecated.");var n=this.getPreviousMatchingNodeAndPath(e);if(!n)return null;for(var r=N(n,2),o=r[0],i=r[1],u=void 0,s=function(){return u="text"!==o.object&&o.findLastDescendantAndPath(t,i)};s(u);){var c=u,l=N(c,2);o=l[0],i=l[1]}return o?t(o)?[o,i]:this.getPreviousDeepMatchingNodeAndPath(n[1],t):null}},{key:"findLastDescendantAndPath",value:function(e,t){return Object(a.a)(!1,"As of slate@0.47, the `findLastDescendantAndPath` method is deprecated."),this.findDescendantAndPath(e,t,!0)}},{key:"findDescendantAndPath",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:z.create([]),n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];Object(a.a)(!1,"As of slate@0.47, the `findDescendantAndPath` method is deprecated.");var r=void 0,o=void 0;return this.forEachDescendantWithPath(function(t,n,i){if(e(t,n,i))return r=t,o=n,!1},t,n),r?[r,o]:null}},{key:"forEachDescendantWithPath",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:z.create([]),n=arguments[2];Object(a.a)(!1,"As of slate@0.47, the `forEachDescendantWithPath` method is deprecated.");var r=this.nodes,o=void 0;return n&&(r=r.reverse()),r.forEach(function(i,a){var u=t.concat(a);return!1===e(i,u,r)?(o=!1,!1):"text"!==i.object?o=i.forEachDescendantWithPath(e,u,n):void 0}),o}},{key:"getNextMatchingNodeAndPath",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){return!0};if(Object(a.a)(!1,"As of slate@0.47, the `getNextMatchingNodeAndPath` method is deprecated."),!e)return null;for(var n=e.size;n>0;n--){for(var r=e.slice(0,n),o=z.increment(r),i=this.getNode(o);i&&!t(i);)o=z.increment(o),i=this.getNode(o);if(i)return[i,o]}return null}},{key:"getSelectionIndexes",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];Object(a.a)(!1,"As of slate@0.47, the `getSelectionIndexes` method is deprecated.");var n=e.start,r=e.end;if(!t)return null;if(e.isUnset)return null;if(n.path.equals(r.path)){var o=this.getFurthestAncestor(n.path),i=o?this.nodes.indexOf(o):null;return{start:i,end:i+1}}var u=null,s=null;return this.nodes.forEach(function(e,t){return"text"===e.object?(null==u&&e.key===n.key&&(u=t),null==s&&e.key===r.key&&(s=t+1)):(null==u&&e.hasDescendant(n.key)&&(u=t),null==s&&e.hasDescendant(r.key)&&(s=t+1)),null==u||null==s}),t&&null==u&&(u=0),t&&null==s&&(s=this.nodes.size),null==u?null:{start:u,end:s}}},{key:"getTextsBetweenPositionsAsArray",value:function(e,t){return Object(a.a)(!1,"As of slate@0.47, the `getTextsBetweenPositionsAsArray` method is deprecated."),e=this.resolvePath(e),t=this.resolvePath(t),this.getTextsBetweenPathPositionsAsArray(e,t)}},{key:"getOrderedMarksBetweenPositions",value:function(e,t,n,o){Object(a.a)(!1,"As of slate@0.47, the `getOrderedMarksBetweenPositions` method is deprecated."),e=this.resolvePath(e),n=this.resolvePath(n);var i=this.getDescendant(e);if(z.isEqual(e,n))return i.marks;var u=this.getTextsBetweenPathPositionsAsArray(e,n);return Object(r.OrderedSet)().withMutations(function(e){u.forEach(function(t){e.union(t.marks)})})}},{key:"getTextsBetweenPathPositionsAsArray",value:function(e,t){if(Object(a.a)(!1,"As of slate@0.47, the `getTextsBetweenPathPositionsAsArray` method is deprecated."),e&&t&&z.isEqual(e,t))return[this.getDescendant(e)];if(!e&&!t)return this.getTextsAsArray();var n=e?e.get(0,0):0,r=t?t.get(0,this.nodes.size-1):this.nodes.size-1,o=[];return this.nodes.slice(n,r+1).forEach(function(i,a){if("text"===i.object)o.push(i);else{var u=e&&0===a?z.drop(e):null,s=t&&a===r-n?z.drop(t):null;o=o.concat(i.getTextsBetweenPathPositionsAsArray(u,s))}}),o}},{key:"getFurthestAncestor",value:function(e){return Object(a.a)(!1,"As of slate@0.47, the `getFurthestAncestor` method has been renamed to `getFurthestChild`."),this.getFurthestChild(e)}},{key:"getLeafBlocksAtRangeAsArray",value:function(e){if(Object(a.a)(!1,"As of slate@0.47, the `getLeafBlocksAtRangeAsArray` method is deprecated."),(e=this.resolveRange(e)).isUnset)return[];var t=e,n=t.start,r=t.end;return this.getLeafBlocksBetweenPathPositionsAsArray(n.path,r.path)}},{key:"getLeafBlocksBetweenPathPositionsAsArray",value:function(e,t){if(Object(a.a)(!1,"As of slate@0.47, the `getLeafBlocksBetweenPathPositionsAsArray` method is deprecated."),e&&t&&z.isEqual(e,t))return[this.getClosestBlock(e)];if(!e&&!t)return this.getBlocksAsArray();var n=e?e.get(0,0):0,r=t?t.get(0,this.nodes.size-1):this.nodes.size-1,o=[];return this.nodes.slice(n,r+1).forEach(function(i,a){if("block"===i.object)if(i.isLeafBlock())o.push(i);else{var u=e&&0===a?z.drop(e):null,s=t&&a===r-n?z.drop(t):null;o=o.concat(i.getLeafBlocksBetweenPathPositionsAsArray(u,s))}}),o}},{key:"getBlocksAsArray",value:function(){Object(a.a)(!1,"As of slate@0.47, the `getBlocksAsArray` method is deprecated.");var e=this.blocks({onlyLeaves:!0});return Array.from(e,function(e){return N(e,1)[0]})}},{key:"getBlocksByTypeAsArray",value:function(e){Object(a.a)(!1,"As of slate@0.47, the `getBlocksByTypeAsArray` method is deprecated.");var t=this.blocks({onlyLeaves:!0,onlyTypes:[e]});return Array.from(t,function(e){return N(e,1)[0]})}},{key:"getFurthestOnlyChildAncestor",value:function(e){Object(a.a)(!1,"As of slate@0.47, the `getFurthestOnlyChildAncestor` method is deprecated.");var t=this.getAncestors(e);return t&&t.rest().reverse().takeUntil(function(e){return e.nodes.size>1}).last()||null}},{key:"getInlinesAsArray",value:function(){return Object(a.a)(!1,"As of slate@0.47, the `getInlinesAsArray` method is deprecated."),Array.from(this.inlines({onlyLeaves:!0}),function(e){return N(e,1)[0]})}},{key:"getInlinesByTypeAsArray",value:function(e){return Object(a.a)(!1,"As of slate@0.47, the `getInlinesByTypeAsArray` method is deprecated."),Array.from(this.inlines({onlyLeaves:!0,onlyTypes:[e]}),function(e){return N(e,1)[0]})}},{key:"getLeafInlinesAtRangeAsArray",value:function(e){var t=this;return Object(a.a)(!1,"As of slate@0.47, the `getLeafInlinesAtRangeAsArray` method is deprecated."),(e=this.resolveRange(e)).isUnset?[]:this.getTextsAtRangeAsArray(e).map(function(e){return t.getClosestInline(e.key)}).filter(function(e){return e})}},{key:"getOrderedMarks",value:function(){return Object(a.a)(!1,"As of slate@0.47, the `getOrderedMarks` method has been folded into `getMarks`, which will now return an ordered set."),this.getMarks()}},{key:"getOrderedMarksAtRange",value:function(e){return Object(a.a)(!1,"As of slate@0.47, the `getOrderedMarksAtRange` method has been folded into `getMarksAtRange`, which will now return an ordered set."),this.getMarksAtRange(e)}},{key:"getOrderedMarksByType",value:function(e){return Object(a.a)(!1,"As of slate@0.47, the `getOrderedMarksByType` method has been folded into `getMarksByType`, which will now return an ordered set."),this.getMarksByType(e)}},{key:"getMarksByTypeAsArray",value:function(e){return Object(a.a)(!1,"As of slate@0.47, the `getMarksByTypeAsArray` method is deprecated."),this.nodes.reduce(function(t,n){return"text"===n.object?t.concat(n.marks.filter(function(t){return t.type===e})):t.concat(n.getMarksByTypeAsArray(e))},[])}},{key:"getMarksAsArray",value:function(){var e;Object(a.a)(!1,"As of slate@0.47, the `getMarksAsArray` method is deprecated.");var t=[],n=!0,r=!1,o=void 0;try{for(var i,u=this.texts()[Symbol.iterator]();!(n=(i=u.next()).done);n=!0){var s=i.value,c=N(s,1)[0];t.push(c.marks.toArray())}}catch(e){r=!0,o=e}finally{try{!n&&u.return&&u.return()}finally{if(r)throw o}}return(e=[]).concat.apply(e,t)}},{key:"getRootInlinesAtRangeAsArray",value:function(e){var t=this;return Object(a.a)(!1,"As of slate@0.47, the `getRootInlinesAtRangeAsArray` method is deprecated."),(e=this.resolveRange(e)).isUnset?Object(r.List)():this.getTextsAtRangeAsArray(e).map(function(e){return t.getFurthestInline(e.key)}).filter(function(e){return e})}},{key:"getTextsAsArray",value:function(){Object(a.a)(!1,"As of slate@0.47, the `getTextsAsArray` method is deprecated.");var e=this.texts();return Array.from(e,function(e){return N(e,1)[0]})}},{key:"getTextsAtRangeAsArray",value:function(e){Object(a.a)(!1,"As of slate@0.47, the `getTextsAtRangeAsArray` method is deprecated.");var t=this.texts({range:e});return Array.from(t,function(e){return N(e,1)[0]})}},{key:"getMarksAtPosition",value:function(e,t){Object(a.a)(!1,"As of slate@0.47, the `getMarksAtPosition` method is deprecated."),e=this.resolvePath(e);var n=this.getDescendant(e).marks;if(0!==t)return Object(r.OrderedSet)(n);var o=this.getClosestBlock(e);if(""===o.text)return Object(r.OrderedSet)(n);var i=this.texts({path:e,direction:"backward"}),u=N(i,1)[0];if(!u)return Object(r.OrderedSet)();var s=N(u,2),c=s[0],l=s[1];return o.hasDescendant(l)?Object(r.OrderedSet)(c.marks):Object(r.OrderedSet)(n)}},{key:"getNodesAtRange",value:function(e){Object(a.a)(!1,"As of slate@0.47, the `getNodesAtRange` method has been renamed to `getDescendantsAtRange`.");var t=this.descendants({range:e}),n=Array.from(t,function(e){return N(e,1)[0]});return Object(r.List)(n)}},{key:"isNodeInRange",value:function(e,t){return Object(a.a)(!1,"As of slate@0.47, the `isNodeInRange` method has been renamed to `isInRange`."),this.isInRange(e,t)}},{key:"text",get:function(){return this.getText()}}]),e}(),It=function(e){Ft.prototype["assert"+e]=function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var i=this["get"+e].apply(this,[t].concat(r));if(null==i)throw new Error("`Node.assert"+e+"` could not find node with path or key: "+t);return i}},Rt=!0,Dt=!1,Mt=void 0;try{for(var Bt,Lt=["Child","Depth","Descendant","Node","Parent","Path"][Symbol.iterator]();!(Rt=(Bt=Lt.next()).done);Rt=!0){It(Bt.value)}}catch(e){Dt=!0,Mt=e}finally{try{!Rt&&Lt.return&&Lt.return()}finally{if(Dt)throw Mt}}Tt(Ft.prototype,["getBlocksAsArray","getBlocksByTypeAsArray","getDecorations","getFragmentAtRange","getInlinesAsArray","getInlinesByTypeAsArray","getInsertMarksAtRange","getLeafBlocksAtRangeAsArray","getLeafBlocksAtRangeAsArray","getLeafInlinesAtRangeAsArray","getMarksAsArray","getMarksAtPosition","getMarksByTypeAsArray","getNextBlock","getNodesAtRange","getNodesToPathsMap","getOffset","getOffsetAtRange","getOrderedMarksBetweenPositions","getPreviousBlock","getRootBlocksAtRange","getRootInlinesAtRangeAsArray","getTextAtOffset","getTextDirection","getTextsAsArray","getTextsBetweenPathPositionsAsArray"]),bt(Ft,[fe,re,ie]),bt(function(){function e(){_(this,e)}return x(e,[{key:"flip",value:function(){return this.setPoints([this.focus,this.anchor])}},{key:"moveForward",value:function(e){return this.updatePoints(function(t){return t.moveForward(e)})}},{key:"moveBackward",value:function(e){return this.updatePoints(function(t){return t.moveBackward(e)})}},{key:"moveAnchorBackward",value:function(e){return this.setAnchor(this.anchor.moveBackward(e))}},{key:"moveAnchorForward",value:function(e){return this.setAnchor(this.anchor.moveForward(e))}},{key:"moveAnchorTo",value:function(e,t){return this.setAnchor(this.anchor.moveTo(e,t))}},{key:"moveAnchorToStartOfNode",value:function(e){return this.setAnchor(this.anchor.moveToStartOfNode(e))}},{key:"moveAnchorToEndOfNode",value:function(e){return this.setAnchor(this.anchor.moveToEndOfNode(e))}},{key:"moveEndBackward",value:function(e){return this.setEnd(this.end.moveBackward(e))}},{key:"moveEndForward",value:function(e){return this.setEnd(this.end.moveForward(e))}},{key:"moveEndTo",value:function(e,t){return this.setEnd(this.end.moveTo(e,t))}},{key:"moveEndToStartOfNode",value:function(e){return this.setEnd(this.end.moveToStartOfNode(e))}},{key:"moveEndToEndOfNode",value:function(e){return this.setEnd(this.end.moveToEndOfNode(e))}},{key:"moveFocusBackward",value:function(e){return this.setFocus(this.focus.moveBackward(e))}},{key:"moveFocusForward",value:function(e){return this.setFocus(this.focus.moveForward(e))}},{key:"moveFocusTo",value:function(e,t){return this.setFocus(this.focus.moveTo(e,t))}},{key:"moveFocusToStartOfNode",value:function(e){return this.setFocus(this.focus.moveToStartOfNode(e))}},{key:"moveFocusToEndOfNode",value:function(e){return this.setFocus(this.focus.moveToEndOfNode(e))}},{key:"moveStartBackward",value:function(e){return this.setStart(this.start.moveBackward(e))}},{key:"moveStartForward",value:function(e){return this.setStart(this.start.moveForward(e))}},{key:"moveStartTo",value:function(e,t){return this.setStart(this.start.moveTo(e,t))}},{key:"moveStartToStartOfNode",value:function(e){return this.setStart(this.start.moveToStartOfNode(e))}},{key:"moveStartToEndOfNode",value:function(e){return this.setStart(this.start.moveToEndOfNode(e))}},{key:"moveTo",value:function(e,t){return this.updatePoints(function(n){return n.moveTo(e,t)})}},{key:"moveToAnchor",value:function(){return this.setFocus(this.anchor)}},{key:"moveToEnd",value:function(){return this.setStart(this.end)}},{key:"moveToEndOfNode",value:function(e){return this.updatePoints(function(t){return t.moveToEndOfNode(e)})}},{key:"moveToFocus",value:function(){return this.setAnchor(this.focus)}},{key:"moveToRangeOfNode",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e,n=this.setPoints([this.anchor.moveToStartOfNode(e),this.focus.moveToEndOfNode(t)]);return n}},{key:"moveToStart",value:function(){return this.setEnd(this.start)}},{key:"moveToStartOfNode",value:function(e){return this.updatePoints(function(t){return t.moveToStartOfNode(e)})}},{key:"normalize",value:function(e){return this.updatePoints(function(t){return t.normalize(e)})}},{key:"setAnchor",value:function(e){return this.set("anchor",e)}},{key:"setEnd",value:function(e){return this.isBackward?this.setAnchor(e):this.setFocus(e)}},{key:"setFocus",value:function(e){return this.set("focus",e)}},{key:"setPoints",value:function(e){var t=N(e,2),n=t[0],r=t[1];return this.set("anchor",n).set("focus",r)}},{key:"updatePoints",value:function(e){var t=this.anchor,n=this.focus;return t=e(t),n=e(n),this.merge({anchor:t,focus:n})}},{key:"setStart",value:function(e){return this.isBackward?this.setFocus(e):this.setAnchor(e)}},{key:"setProperties",value:function(e){var t=e=Z.createProperties(e),n=t.anchor,r=t.focus,o=T(t,["anchor","focus"]);return n&&(o.anchor=U.create(n)),r&&(o.focus=U.create(r)),this.merge(o)}},{key:"toJSON",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={object:this.object,anchor:this.anchor.toJSON(e),focus:this.focus.toJSON(e)};return t}},{key:"toRange",value:function(){var e=Z.createProperties(this);return Z.create(e)}},{key:"unset",value:function(){return this.updatePoints(function(e){return e.unset()})}},{key:"isCollapsed",get:function(){return this.anchor===this.focus||this.anchor.key===this.focus.key&&this.anchor.offset===this.focus.offset}},{key:"isExpanded",get:function(){return!this.isCollapsed}},{key:"isBackward",get:function(){var e=this.isUnset,t=this.anchor,n=this.focus;return e?null:t.key===n.key?t.offset>n.offset:z.isBefore(n.path,t.path)}},{key:"isForward",get:function(){var e=this.isBackward;return null==e?null:!e}},{key:"isUnset",get:function(){var e=this.anchor,t=this.focus;return e.isUnset||t.isUnset}},{key:"isSet",get:function(){return!this.isUnset}},{key:"start",get:function(){return this.isBackward?this.focus:this.anchor}},{key:"end",get:function(){return this.isBackward?this.anchor:this.focus}}]),e}(),[te,J,Z,$])}).call(this,n(29))},function(e,t,n){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var r=n(97);function o(e){return!0===r(e)&&"[object Object]"===Object.prototype.toString.call(e)}e.exports=function(e){var t,n;return!1!==o(e)&&("function"==typeof(t=e.constructor)&&(!1!==o(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf")))}},function(e,t,n){var r=n(193);e.exports=function(e){if(t=e,t&&t.window===t)return e;var t;var n=r(e);if(o){n.parentWindow.execScript("document._parentWindow = window;","Javascript");var i=n._parentWindow;return n._parentWindow=null,i}return n.defaultView||n.parentWindow};var o=n(194)},function(e,t,n){"use strict";var r=!0,o="Invariant failed";t.a=function(e,t){if(!e)throw r?new Error(o):new Error(o+": "+(t||""))}},function(e,t,n){"use strict";(function(r){function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.log=function(){var e;return"object"===("undefined"==typeof console?"undefined":o(console))&&console.log&&(e=console).log.apply(e,arguments)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(r++,"%c"===e&&(o=r))}),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){var e;try{e=t.storage.getItem("debug")}catch(e){}!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(192)(t),e.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,n(30))},function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return a});var r=n(38),o={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},i=Object.freeze({});function a(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o,a=void 0,c=Array.isArray(e),l=[e],f=-1,d=[],p=void 0,h=void 0,v=void 0,y=[],m=[],g=e;do{var b=++f===l.length,k=b&&0!==d.length;if(b){if(h=0===m.length?void 0:y[y.length-1],p=v,v=m.pop(),k){if(c)p=p.slice();else{for(var w={},_=0,x=Object.keys(p);_<x.length;_++){var O=x[_];w[O]=p[O]}p=w}for(var E=0,S=0;S<d.length;S++){var T=d[S][0],A=d[S][1];c&&(T-=E),c&&null===A?(p.splice(T,1),E++):p[T]=A}}f=a.index,l=a.keys,d=a.edits,c=a.inArray,a=a.prev}else{if(h=v?c?f:l[f]:void 0,null==(p=v?v[h]:g))continue;v&&y.push(h)}var N=void 0;if(!Array.isArray(p)){if(!u(p))throw new Error("Invalid AST Node: "+Object(r.a)(p));var C=s(t,p.kind,b);if(C){if((N=C.call(t,p,h,v,y,m))===i)break;if(!1===N){if(!b){y.pop();continue}}else if(void 0!==N&&(d.push([h,N]),!b)){if(!u(N)){y.pop();continue}p=N}}}void 0===N&&k&&d.push([h,p]),b?y.pop():(a={inArray:c,index:f,keys:l,edits:d,prev:a},l=(c=Array.isArray(p))?p:n[p.kind]||[],f=-1,d=[],v&&m.push(v),v=p)}while(void 0!==a);return 0!==d.length&&(g=d[d.length-1][1]),g}function u(e){return Boolean(e&&"string"==typeof e.kind)}function s(e,t,n){var r=e[t];if(r){if(!n&&"function"==typeof r)return r;var o=n?r.leave:r.enter;if("function"==typeof o)return o}else{var i=n?e.leave:e.enter;if(i){if("function"==typeof i)return i;var a=i[t];if("function"==typeof a)return a}}}},function(e,t,n){var r=n(63),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();e.exports=i},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],l=0;(s=new Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){var r=n(110),o=n(113);e.exports=function(e,t){var n=o(e,t);return r(n)?n:void 0}},function(e,t,n){"use strict";var r=n(0),o="<<anonymous>>",i={listOf:function(e){return c(e,"List",r.List.isList)},mapOf:function(e,t){return l(e,t,"Map",r.Map.isMap)},orderedMapOf:function(e,t){return l(e,t,"OrderedMap",r.OrderedMap.isOrderedMap)},setOf:function(e){return c(e,"Set",r.Set.isSet)},orderedSetOf:function(e){return c(e,"OrderedSet",r.OrderedSet.isOrderedSet)},stackOf:function(e){return c(e,"Stack",r.Stack.isStack)},iterableOf:function(e){return c(e,"Iterable",r.Iterable.isIterable)},recordOf:function(e){return u(function(t,n,o,i,u){for(var s=arguments.length,c=Array(s>5?s-5:0),l=5;l<s;l++)c[l-5]=arguments[l];var f=t[n];if(!(f instanceof r.Record)){var d=a(f);return new Error("Invalid "+i+" `"+u+"` of type `"+d+"` supplied to `"+o+"`, expected an Immutable.js Record.")}for(var p in e){var h=e[p];if(h){var v=f.toObject(),y=h.apply(void 0,[v,p,o,i,u+"."+p].concat(c));if(y)return y}}})},shape:d,contains:d,mapContains:function(e){return f(e,"Map",r.Map.isMap)},list:s("List",r.List.isList),map:s("Map",r.Map.isMap),orderedMap:s("OrderedMap",r.OrderedMap.isOrderedMap),set:s("Set",r.Set.isSet),orderedSet:s("OrderedSet",r.OrderedSet.isOrderedSet),stack:s("Stack",r.Stack.isStack),seq:s("Seq",r.Seq.isSeq),record:s("Record",function(e){return e instanceof r.Record}),iterable:s("Iterable",r.Iterable.isIterable)};function a(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":e instanceof r.Iterable?"Immutable."+e.toSource().split(" ")[0]:t}function u(e){function t(t,n,r,i,a,u){for(var s=arguments.length,c=Array(s>6?s-6:0),l=6;l<s;l++)c[l-6]=arguments[l];return u=u||r,i=i||o,null!=n[r]?e.apply(void 0,[n,r,i,a,u].concat(c)):t?new Error("Required "+a+" `"+u+"` was not specified in `"+i+"`."):void 0}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function s(e,t){return u(function(n,r,o,i,u){var s=n[r];if(!t(s)){var c=a(s);return new Error("Invalid "+i+" `"+u+"` of type `"+c+"` supplied to `"+o+"`, expected `"+e+"`.")}return null})}function c(e,t,n){return u(function(r,o,i,u,s){for(var c=arguments.length,l=Array(c>5?c-5:0),f=5;f<c;f++)l[f-5]=arguments[f];var d=r[o];if(!n(d)){var p=u,h=a(d);return new Error("Invalid "+p+" `"+s+"` of type `"+h+"` supplied to `"+i+"`, expected an Immutable.js "+t+".")}if("function"!=typeof e)return new Error("Invalid typeChecker supplied to `"+i+"` for propType `"+s+"`, expected a function.");for(var v=d.toArray(),y=0,m=v.length;y<m;y++){var g=e.apply(void 0,[v,y,i,u,s+"["+y+"]"].concat(l));if(g instanceof Error)return g}})}function l(e,t,n,r){return u(function(){for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return c(e,n,r).apply(void 0,i)||t&&(s=t,u(function(e,t,n,r,o){for(var i=arguments.length,a=Array(i>5?i-5:0),u=5;u<i;u++)a[u-5]=arguments[u];var c=e[t];if("function"!=typeof s)return new Error("Invalid keysTypeChecker (optional second argument) supplied to `"+n+"` for propType `"+o+"`, expected a function.");for(var l=c.keySeq().toArray(),f=0,d=l.length;f<d;f++){var p=s.apply(void 0,[l,f,n,r,o+" -> key("+l[f]+")"].concat(a));if(p instanceof Error)return p}})).apply(void 0,i);var s})}function f(e){var t=void 0===arguments[1]?"Iterable":arguments[1],n=void 0===arguments[2]?r.Iterable.isIterable:arguments[2];return u(function(r,o,i,u,s){for(var c=arguments.length,l=Array(c>5?c-5:0),f=5;f<c;f++)l[f-5]=arguments[f];var d=r[o];if(!n(d)){var p=a(d);return new Error("Invalid "+u+" `"+s+"` of type `"+p+"` supplied to `"+i+"`, expected an Immutable.js "+t+".")}var h=d.toObject();for(var v in e){var y=e[v];if(y){var m=y.apply(void 0,[h,v,i,u,s+"."+v].concat(l));if(m)return m}}})}function d(e){return f(e)}e.exports=i},function(e,t,n){var r=n(16),o=n(101),i=n(104),a=n(128);e.exports=function(e,t){return r(e)?e:o(e,t)?[e]:i(a(e))}},function(e,t,n){var r=n(25),o=n(102),i=n(103),a="[object Null]",u="[object Undefined]",s=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?u:a:s&&s in Object(e)?o(e):i(e)}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(90)},function(e,t,n){var r=n(68),o=n(145),i=n(186),a=n(20),u=n(26),s=n(190),c=n(71),l=n(80),f=c(function(e,t){var n={};if(null==e)return n;var c=!1;t=r(t,function(t){return t=a(t,e),c||(c=t.length>1),t}),u(e,l(e),n),c&&(n=o(n,7,s));for(var f=t.length;f--;)i(n,t[f]);return n});e.exports=f},function(e,t,n){var r=n(99),o=n(71)(function(e,t){return null==e?{}:r(e,t)});e.exports=o},function(e,t,n){var r=n(13).Symbol;e.exports=r},function(e,t,n){var r=n(43),o=n(69);e.exports=function(e,t,n,i){var a=!n;n||(n={});for(var u=-1,s=t.length;++u<s;){var c=t[u],l=i?i(n[c],e[c],c,n,e):void 0;void 0===l&&(l=e[c]),a?o(n,c,l):r(n,c,l)}return n}},function(e,t,n){"use strict";(function(e,r){var o,i=n(83);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(29),n(96)(e))},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):void 0;t.a=r},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,c=[],l=!1,f=-1;function d(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=u(d);l=!0;for(var t=c.length;t;){for(s=c,c=[];++f<t;)s&&s[f].run();f=-1,t=c.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(21),o=n(17),i="[object Symbol]";e.exports=function(e){return"symbol"==typeof e||o(e)&&r(e)==i}},function(e,t,n){var r=n(18)(Object,"create");e.exports=r},function(e,t,n){var r=n(118),o=n(119),i=n(120),a=n(121),u=n(122);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=i,s.prototype.has=a,s.prototype.set=u,e.exports=s},function(e,t,n){var r=n(67);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},function(e,t,n){var r=n(124);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var r=n(32),o=1/0;e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(28);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=10,a=2;function u(e){return s(e,[])}function s(e,t){switch(o(e)){case"string":return JSON.stringify(e);case"function":return e.name?"[function ".concat(e.name,"]"):"[function]";case"object":return null===e?"null":function(e,t){if(-1!==t.indexOf(e))return"[Circular]";var n=[].concat(t,[e]),o=function(e){var t=e[String(r.a)];if("function"==typeof t)return t;if("function"==typeof e.inspect)return e.inspect}(e);if(void 0!==o){var u=o.call(e);if(u!==e)return"string"==typeof u?u:s(u,n)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>a)return"[Array]";for(var n=Math.min(i,e.length),r=e.length-n,o=[],u=0;u<n;++u)o.push(s(e[u],t));1===r?o.push("... 1 more item"):r>1&&o.push("... ".concat(r," more items"));return"["+o.join(", ")+"]"}(e,n);return function(e,t){var n=Object.keys(e);if(0===n.length)return"{}";if(t.length>a)return"["+function(e){var t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){var n=e.constructor.name;if("string"==typeof n&&""!==n)return n}return t}(e)+"]";return"{ "+n.map(function(n){return n+": "+s(e[n],t)}).join(", ")+" }"}(e,n)}(e,t);default:return String(e)}}},function(e,t,n){"use strict";function r(e){var t=e.split(/\r\n|[\n\r]/g),n=function(e){for(var t=null,n=1;n<e.length;n++){var r=e[n],i=o(r);if(i!==r.length&&((null===t||i<t)&&0===(t=i)))break}return null===t?0:t}(t);if(0!==n)for(var r=1;r<t.length;r++)t[r]=t[r].slice(n);for(;t.length>0&&i(t[0]);)t.shift();for(;t.length>0&&i(t[t.length-1]);)t.pop();return t.join("\n")}function o(e){for(var t=0;t<e.length&&(" "===e[t]||"\t"===e[t]);)t++;return t}function i(e){return o(e)===e.length}function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=-1===e.indexOf("\n"),o=" "===e[0]||"\t"===e[0],i='"'===e[e.length-1],a=!r||i||n,u="";return!a||r&&o||(u+="\n"+t),u+=t?e.replace(/\n/g,"\n"+t):e,a&&(u+="\n"),'"""'+u.replace(/"""/g,'\\"""')+'"""'}n.d(t,"a",function(){return r}),n.d(t,"b",function(){return a})},function(e,t,n){"use strict";(function(r){function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.log=function(){var e;return"object"===("undefined"==typeof console?"undefined":o(console))&&console.log&&(e=console).log.apply(e,arguments)},t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(r++,"%c"===e&&(o=r))}),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){var e;try{e=t.storage.getItem("debug")}catch(e){}!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG);return e},t.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage=function(){try{return localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.exports=n(98)(t),e.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,n(30))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});for(var r="undefined"!=typeof window&&/Mac|iPod|iPhone|iPad/.test(window.navigator.platform),o={alt:"altKey",control:"ctrlKey",meta:"metaKey",shift:"shiftKey"},i={add:"+",break:"pause",cmd:"meta",command:"meta",ctl:"control",ctrl:"control",del:"delete",down:"arrowdown",esc:"escape",ins:"insert",left:"arrowleft",mod:r?"meta":"control",opt:"alt",option:"alt",return:"enter",right:"arrowright",space:" ",spacebar:" ",up:"arrowup",win:"meta",windows:"meta"},a={backspace:8,tab:9,enter:13,shift:16,control:17,alt:18,pause:19,capslock:20,escape:27," ":32,pageup:33,pagedown:34,end:35,home:36,arrowleft:37,arrowup:38,arrowright:39,arrowdown:40,insert:45,delete:46,meta:91,numlock:144,scrolllock:145,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},u=1;u<20;u++)a["f"+u]=111+u;function s(e,t,n){!t||"byKey"in t||(n=t,t=null),Array.isArray(e)||(e=[e]);var r=e.map(function(e){return c(e,t)}),o=function(e){return r.some(function(t){return l(t,e)})};return null==n?o:o(n)}function c(e,t){var n=t&&t.byKey,r={},i=(e=e.replace("++","+add")).split("+"),a=i.length;for(var u in o)r[o[u]]=!1;var s=!0,c=!1,l=void 0;try{for(var p,h=i[Symbol.iterator]();!(s=(p=h.next()).done);s=!0){var v=p.value,y=v.endsWith("?");y&&(v=v.slice(0,-1));var m=d(v),g=o[m];1!==a&&g||(n?r.key=m:r.which=f(v)),g&&(r[g]=!y||null)}}catch(e){c=!0,l=e}finally{try{!s&&h.return&&h.return()}finally{if(c)throw l}}return r}function l(e,t){for(var n in e){var r=e[n],o=void 0;if(null!=r&&((null!=(o="key"===n?t.key.toLowerCase():"which"===n?91===r&&93===t.which?91:t.which:t[n])||!1!==r)&&o!==r))return!1}return!0}function f(e){return e=d(e),a[e]||e.toUpperCase().charCodeAt(0)}function d(e){return e=e.toLowerCase(),e=i[e]||e}t.default=s,t.isHotkey=s,t.isCodeHotkey=function(e,t){return s(e,t)},t.isKeyHotkey=function(e,t){return s(e,{byKey:!0},t)},t.parseHotkey=c,t.compareHotkey=l,t.toKeyCode=f,t.toKeyName=d},function(e,t,n){var r=n(18)(n(13),"Map");e.exports=r},function(e,t,n){var r=n(69),o=n(67),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];i.call(e,t)&&o(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},function(e,t){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?n:t)&&("number"==o||"symbol"!=o&&r.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var r=n(134),o=n(17),i=Object.prototype,a=i.hasOwnProperty,u=i.propertyIsEnumerable,s=r(function(){return arguments}())?r:function(e){return o(e)&&a.call(e,"callee")&&!u.call(e,"callee")};e.exports=s},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t){e.exports=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}},function(e,t,n){var r=n(72),o=n(158),i=n(75);e.exports=function(e){return i(e)?r(e):o(e)}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var r=n(63),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o&&r.process,u=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=u}).call(this,n(31)(e))},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var r=n(166),o=n(77),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,u=a?function(e){return null==e?[]:(e=Object(e),r(a(e),function(t){return i.call(e,t)}))}:o;e.exports=u},function(e,t,n){var r=n(74)(Object.getPrototypeOf,Object);e.exports=r},function(e,t,n){var r=n(169),o=n(42),i=n(170),a=n(171),u=n(172),s=n(21),c=n(66),l=c(r),f=c(o),d=c(i),p=c(a),h=c(u),v=s;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=v(new o)||i&&"[object Promise]"!=v(i.resolve())||a&&"[object Set]"!=v(new a)||u&&"[object WeakMap]"!=v(new u))&&(v=function(e){var t=s(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case l:return"[object DataView]";case f:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case h:return"[object WeakMap]"}return t}),e.exports=v},function(e,t,n){var r=n(175);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},function(e,t,n){"use strict";e.exports=n(95)},function(e,t,n){"use strict";var r=n(56),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function s(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var u=s(t),v=s(n),y=0;y<a.length;++y){var m=a[y];if(!(i[m]||r&&r[m]||v&&v[m]||u&&u[m])){var g=d(n,m);try{c(t,m,g)}catch(e){}}}return t}return t}},function(e,t,n){(function(e,r){var o;/*! https://mths.be/esrever v0.2.0 by @mathias */!function(i){var a=t,u=(e&&e.exports,"object"==typeof r&&r);u.global!==u&&u.window;var s=/([\0-\u02FF\u0370-\u1AAF\u1B00-\u1DBF\u1E00-\u20CF\u2100-\uD7FF\uE000-\uFE1F\uFE30-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])([\u0300-\u036F\u1AB0-\u1AFF\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]+)/g,c=/([\uD800-\uDBFF])([\uDC00-\uDFFF])/g,l=function(e){for(var t="",n=(e=e.replace(s,function(e,t,n){return l(n)+t}).replace(c,"$2$1")).length;n--;)t+=e.charAt(n);return t},f={version:"0.2.0",reverse:l};void 0===(o=function(){return f}.call(t,n,t,e))||(e.exports=o)}()}).call(this,n(31)(e),n(29))},function(e,t,n){"use strict";t.atob=self.atob.bind(self),t.btoa=self.btoa.bind(self)},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,s=a(e),c=1;c<arguments.length;c++){for(var l in n=Object(arguments[c]))o.call(n,l)&&(s[l]=n[l]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(s[u[f]]=n[u[f]])}}return s}},function(e,t){var n=1e3,r=60*n,o=60*r,i=24*o,a=7*i,u=365.25*i;function s(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,t){t=t||{};var c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!t)return;var s=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*u;case"weeks":case"week":case"w":return s*a;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*o;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===c&&isFinite(e))return t.long?function(e){var t=Math.abs(e);if(t>=i)return s(e,t,i,"day");if(t>=o)return s(e,t,o,"hour");if(t>=r)return s(e,t,r,"minute");if(t>=n)return s(e,t,n,"second");return e+" ms"}(e):function(e){var t=Math.abs(e);if(t>=i)return Math.round(e/i)+"d";if(t>=o)return Math.round(e/o)+"h";if(t>=r)return Math.round(e/r)+"m";if(t>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){var r=n(20),o=n(37);e.exports=function(e,t){for(var n=0,i=(t=r(t,e)).length;null!=e&&n<i;)e=e[o(t[n++])];return n&&n==i?e:void 0}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(29))},function(e,t,n){var r=n(107),o=n(123),i=n(125),a=n(126),u=n(127);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=i,s.prototype.has=a,s.prototype.set=u,e.exports=s},function(e,t,n){var r=n(21),o=n(14),i="[object AsyncFunction]",a="[object Function]",u="[object GeneratorFunction]",s="[object Proxy]";e.exports=function(e){if(!o(e))return!1;var t=r(e);return t==a||t==u||t==i||t==s}},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}},function(e,t,n){var r=n(70);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var r=n(18),o=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=o},function(e,t,n){var r=n(135),o=n(138),i=n(140);e.exports=function(e){return i(o(e,void 0,r),e+"")}},function(e,t,n){var r=n(154),o=n(45),i=n(16),a=n(73),u=n(44),s=n(156),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),l=!n&&o(e),f=!n&&!l&&a(e),d=!n&&!l&&!f&&s(e),p=n||l||f||d,h=p?r(e.length,String):[],v=h.length;for(var y in e)!t&&!c.call(e,y)||p&&("length"==y||f&&("offset"==y||"parent"==y)||d&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||u(y,v))||h.push(y);return h}},function(e,t,n){(function(e){var r=n(13),o=n(155),i=t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===i?r.Buffer:void 0,s=(u?u.isBuffer:void 0)||o;e.exports=s}).call(this,n(31)(e))},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var r=n(65),o=n(46);e.exports=function(e){return null!=e&&o(e.length)&&!r(e)}},function(e,t,n){var r=n(72),o=n(161),i=n(75);e.exports=function(e){return i(e)?r(e,!0):o(e)}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var r=n(47),o=n(53),i=n(52),a=n(77),u=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)r(t,i(e)),e=o(e);return t}:a;e.exports=u},function(e,t,n){var r=n(47),o=n(16);e.exports=function(e,t,n){var i=t(e);return o(e)?i:r(i,n(e))}},function(e,t,n){var r=n(79),o=n(78),i=n(76);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(200).parse;function o(e){return e.replace(/[\s,]+/g," ").trim()}var i={},a={};var u=!0;var s=!1;function c(e){var t=o(e);if(i[t])return i[t];var n=r(e,{experimentalFragmentVariables:s});if(!n||"Document"!==n.kind)throw new Error("Not a valid GraphQL document.");return n=function e(t,n){var r=Object.prototype.toString.call(t);if("[object Array]"===r)return t.map(function(t){return e(t,n)});if("[object Object]"!==r)throw new Error("Unexpected input.");n&&t.loc&&delete t.loc,t.loc&&(delete t.loc.startToken,delete t.loc.endToken);var o,i,a,u=Object.keys(t);for(o in u)u.hasOwnProperty(o)&&(i=t[u[o]],"[object Object]"!==(a=Object.prototype.toString.call(i))&&"[object Array]"!==a||(t[u[o]]=e(i,!0)));return t}(n=function(e){for(var t,n={},r=[],i=0;i<e.definitions.length;i++){var s=e.definitions[i];if("FragmentDefinition"===s.kind){var c=s.name.value,l=o((t=s.loc).source.body.substring(t.start,t.end));a.hasOwnProperty(c)&&!a[c][l]?(u&&console.warn("Warning: fragment with name "+c+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"),a[c][l]=!0):a.hasOwnProperty(c)||(a[c]={},a[c][l]=!0),n[l]||(n[l]=!0,r.push(s))}else r.push(s)}return e.definitions=r,e}(n),!1),i[t]=n,n}function l(){for(var e=Array.prototype.slice.call(arguments),t=e[0],n="string"==typeof t?t:t[0],r=1;r<e.length;r++)e[r]&&e[r].kind&&"Document"===e[r].kind?n+=e[r].loc.source.body:n+=e[r],n+=t[r];return c(n)}l.default=l,l.resetCaches=function(){i={},a={}},l.disableFragmentWarnings=function(){u=!1},l.enableExperimentalFragmentVariables=function(){s=!0},l.disableExperimentalFragmentVariables=function(){s=!1},e.exports=l},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=Object.prototype,o=r.toString,i=r.hasOwnProperty,a=new Map;function u(e,t){try{return function e(t,n){if(t===n)return!0;var r=o.call(t);var a=o.call(n);if(r!==a)return!1;switch(r){case"[object Array]":if(t.length!==n.length)return!1;case"[object Object]":if(s(t,n))return!0;var u=Object.keys(t),c=Object.keys(n),l=u.length;if(l!==c.length)return!1;for(var f=0;f<l;++f)if(!i.call(n,u[f]))return!1;for(f=0;f<l;++f){var d=u[f];if(!e(t[d],n[d]))return!1}return!0;case"[object Error]":return t.name===n.name&&t.message===n.message;case"[object Number]":if(t!=t)return n!=n;case"[object Boolean]":case"[object Date]":return+t==+n;case"[object RegExp]":case"[object String]":return t==""+n;case"[object Map]":case"[object Set]":if(t.size!==n.size)return!1;if(s(t,n))return!0;for(var p=t.entries(),h="[object Map]"===r;;){var v=p.next();if(v.done)break;var y=v.value,m=y[0],g=y[1];if(!n.has(m))return!1;if(h&&!e(g,n.get(m)))return!1}return!0}return!1}(e,t)}finally{a.clear()}}function s(e,t){var n=a.get(e);if(n){if(n.has(t))return!0}else a.set(e,n=new Set);return n.add(t),!1}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r,o;r=new RegExp("^[^֑-߿יִ-﷽ﹰ-ﻼ]*[A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿]"),o=new RegExp("^[^A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿]*[֑-߿יִ-﷽ﹰ-ﻼ]"),e.exports=function(e){return e=e.toString(),o.test(e)?"rtl":r.test(e)?"ltr":"neutral"}},function(e,t){e.exports=function(e){var t=e.anchorNode,n=e.anchorOffset,r=e.focusNode,o=e.focusOffset,i=t.compareDocumentPosition(r);return!(4===i||0===i&&n<o)}},function(e,t,n){var r=n(195),o=n(14),i="Expected a function";e.exports=function(e,t,n){var a=!0,u=!0;if("function"!=typeof e)throw new TypeError(i);return o(n)&&(a="leading"in n?!!n.leading:a,u="trailing"in n?!!n.trailing:u),r(e,t,{leading:a,maxWait:t,trailing:u})}},function(e,t,n){"use strict";e.exports=function(e,t){t||(t={}),"function"==typeof t&&(t={cmp:t});var n,r="boolean"==typeof t.cycles&&t.cycles,o=t.cmp&&(n=t.cmp,function(e){return function(t,r){var o={key:t,value:e[t]},i={key:r,value:e[r]};return n(o,i)}}),i=[];return function e(t){if(t&&t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!=typeof t)return JSON.stringify(t);var n,a;if(Array.isArray(t)){for(a="[",n=0;n<t.length;n++)n&&(a+=","),a+=e(t[n])||"null";return a+"]"}if(null===t)return"null";if(-1!==i.indexOf(t)){if(r)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var u=i.push(t)-1,s=Object.keys(t).sort(o&&o(t));for(a="",n=0;n<s.length;n++){var c=s[n],l=e(t[c]);l&&(a&&(a+=","),a+=JSON.stringify(c)+":"+l)}return i.splice(u,1),"{"+a+"}"}}(e)}},function(e,t,n){e.exports=n(198).Observable},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(60),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,l=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.suspense_list"):60120,v=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder");var m="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},k={};function w(e,t,n){this.props=e,this.context=t,this.refs=k,this.updater=n||b}function _(){}function x(e,t,n){this.props=e,this.context=t,this.refs=k,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw g(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},_.prototype=w.prototype;var O=x.prototype=new _;O.constructor=x,r(O,w.prototype),O.isPureReactComponent=!0;var E={current:null},S={suspense:null},T={current:null},A=Object.prototype.hasOwnProperty,N={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)A.call(t,r)&&!N.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),l=0;l<s;l++)c[l]=arguments[l+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:T.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var P=/\/+/g,F=[];function I(e,t,n,r){if(F.length){var o=F.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>F.length&&F.push(e)}function D(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var s=!1;if(null===t)s=!0;else switch(u){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case i:case a:s=!0}}if(s)return r(o,t,""===n?"."+M(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var l=n+M(u=t[c],c);s+=e(u,l,r,o)}else if(null===t||"object"!=typeof t?l=null:l="function"==typeof(l=m&&t[m]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),c=0;!(u=t.next()).done;)s+=e(u=u.value,l=n+M(u,c++),r,o);else if("object"===u)throw r=""+t,g(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return s}(e,"",t,n)}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function B(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?z(e,r,n,function(e){return e}):null!=e&&(j(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function z(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(P,"$&/")+"/"),D(e,L,t=I(t,i,r,o)),R(t)}function q(){var e=E.current;if(null===e)throw g(Error(321));return e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return z(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;D(e,B,t=I(null,null,t,n)),R(t)},count:function(e){return D(e,function(){return null},null)},toArray:function(e){var t=[];return z(e,t,null,function(e){return e}),t},only:function(e){if(!j(e))throw g(Error(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:x,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:v,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return q().useCallback(e,t)},useContext:function(e,t){return q().useContext(e,t)},useEffect:function(e,t){return q().useEffect(e,t)},useImperativeHandle:function(e,t,n){return q().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return q().useLayoutEffect(e,t)},useMemo:function(e,t){return q().useMemo(e,t)},useReducer:function(e,t,n){return q().useReducer(e,t,n)},useRef:function(e){return q().useRef(e)},useState:function(e){return q().useState(e)},Fragment:u,Profiler:c,StrictMode:s,Suspense:p,unstable_SuspenseList:h,createElement:C,cloneElement:function(e,t,n){if(null==e)throw g(Error(267),e);var o=void 0,a=r({},e.props),u=e.key,s=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,c=T.current),void 0!==t.key&&(u=""+t.key);var l=void 0;for(o in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),t)A.call(t,o)&&!N.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==l?l[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){l=Array(o);for(var f=0;f<o;f++)l[f]=arguments[f+2];a.children=l}return{$$typeof:i,type:e.type,key:u,ref:s,props:a,_owner:c}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:j,version:"16.9.0",unstable_withSuspenseConfig:function(e,t){var n=S.suspense;S.suspense=void 0===t?null:t;try{e()}finally{S.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:E,ReactCurrentBatchConfig:S,ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r}},V={default:U},Q=V&&U||V;e.exports=Q.default||Q},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(60),i=n(91);function a(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}if(!r)throw a(Error(227));var u=null,s={};function c(){if(u)for(var e in s){var t=s[e],n=u.indexOf(e);if(!(-1<n))throw a(Error(96),e);if(!f[n]){if(!t.extractEvents)throw a(Error(97),e);for(var r in f[n]=t,n=t.eventTypes){var o=void 0,i=n[r],c=t,p=r;if(d.hasOwnProperty(p))throw a(Error(99),p);d[p]=i;var h=i.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&l(h[o],c,p);o=!0}else i.registrationName?(l(i.registrationName,c,p),o=!0):o=!1;if(!o)throw a(Error(98),r,e)}}}}function l(e,t,n){if(p[e])throw a(Error(100),e);p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function v(e,t,n,r,o,i,a,u,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var y=!1,m=null,g=!1,b=null,k={onError:function(e){y=!0,m=e}};function w(e,t,n,r,o,i,a,u,s){y=!1,m=null,v.apply(k,arguments)}var _=null,x=null,O=null;function E(e,t,n){var r=e.type||"unknown-event";e.currentTarget=O(n),function(e,t,n,r,o,i,u,s,c){if(w.apply(this,arguments),y){if(!y)throw a(Error(198));var l=m;y=!1,m=null,g||(g=!0,b=l)}}(r,t,void 0,e),e.currentTarget=null}function S(e,t){if(null==t)throw a(Error(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var A=null;function N(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)E(e,t[r],n[r]);else t&&E(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function C(e){if(null!==e&&(A=S(A,e)),e=A,A=null,e){if(T(e,N),A)throw a(Error(95));if(g)throw e=b,g=!1,b=null,e}}var j={injectEventPluginOrder:function(e){if(u)throw a(Error(101));u=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!s.hasOwnProperty(t)||s[t]!==r){if(s[t])throw a(Error(102),t);s[t]=r,n=!0}}n&&c()}};function P(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw a(Error(231),t,typeof n);return n}var F=Math.random().toString(36).slice(2),I="__reactInternalInstance$"+F,R="__reactEventHandlers$"+F;function D(e){if(e[I])return e[I];for(;!e[I];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[I]).tag||6===e.tag?e:null}function M(e){return!(e=e[I])||5!==e.tag&&6!==e.tag?null:e}function B(e){if(5===e.tag||6===e.tag)return e.stateNode;throw a(Error(33))}function L(e){return e[R]||null}function z(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function q(e,t,n){(t=P(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function U(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=z(t);for(t=n.length;0<t--;)q(n[t],"captured",e);for(t=0;t<n.length;t++)q(n[t],"bubbled",e)}}function V(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=P(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=S(n._dispatchListeners,t),n._dispatchInstances=S(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.registrationName&&V(e._targetInst,null,e)}function K(e){T(e,U)}var W=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement);function J(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var H={animationend:J("Animation","AnimationEnd"),animationiteration:J("Animation","AnimationIteration"),animationstart:J("Animation","AnimationStart"),transitionend:J("Transition","TransitionEnd")},$={},Y={};function G(e){if($[e])return $[e];if(!H[e])return e;var t,n=H[e];for(t in n)if(n.hasOwnProperty(t)&&t in Y)return $[e]=n[t];return e}W&&(Y=document.createElement("div").style,"AnimationEvent"in window||(delete H.animationend.animation,delete H.animationiteration.animation,delete H.animationstart.animation),"TransitionEvent"in window||delete H.transitionend.transition);var X=G("animationend"),Z=G("animationiteration"),ee=G("animationstart"),te=G("transitionend"),ne="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),re=null,oe=null,ie=null;function ae(){if(ie)return ie;var e,t,n=oe,r=n.length,o="value"in re?re.value:re.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie=o.slice(e,1<t?1-t:void 0)}function ue(){return!0}function se(){return!1}function ce(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ue:se,this.isPropagationStopped=se,this}function le(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function fe(e){if(!(e instanceof this))throw a(Error(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function de(e){e.eventPool=[],e.getPooled=le,e.release=fe}o(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ue)},persist:function(){this.isPersistent=ue},isPersistent:se,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=se,this._dispatchInstances=this._dispatchListeners=null}}),ce.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,de(n),n},de(ce);var pe=ce.extend({data:null}),he=ce.extend({data:null}),ve=[9,13,27,32],ye=W&&"CompositionEvent"in window,me=null;W&&"documentMode"in document&&(me=document.documentMode);var ge=W&&"TextEvent"in window&&!me,be=W&&(!ye||me&&8<me&&11>=me),ke=String.fromCharCode(32),we={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},_e=!1;function xe(e,t){switch(e){case"keyup":return-1!==ve.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Oe(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ee=!1;var Se={eventTypes:we,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ye)e:{switch(e){case"compositionstart":o=we.compositionStart;break e;case"compositionend":o=we.compositionEnd;break e;case"compositionupdate":o=we.compositionUpdate;break e}o=void 0}else Ee?xe(e,n)&&(o=we.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=we.compositionStart);return o?(be&&"ko"!==n.locale&&(Ee||o!==we.compositionStart?o===we.compositionEnd&&Ee&&(i=ae()):(oe="value"in(re=r)?re.value:re.textContent,Ee=!0)),o=pe.getPooled(o,t,n,r),i?o.data=i:null!==(i=Oe(n))&&(o.data=i),K(o),i=o):i=null,(e=ge?function(e,t){switch(e){case"compositionend":return Oe(t);case"keypress":return 32!==t.which?null:(_e=!0,ke);case"textInput":return(e=t.data)===ke&&_e?null:e;default:return null}}(e,n):function(e,t){if(Ee)return"compositionend"===e||!ye&&xe(e,t)?(e=ae(),ie=oe=re=null,Ee=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return be&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=he.getPooled(we.beforeInput,t,n,r)).data=e,K(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,Ae=null,Ne=null;function Ce(e){if(e=x(e)){if("function"!=typeof Te)throw a(Error(280));var t=_(e.stateNode);Te(e.stateNode,e.type,t)}}function je(e){Ae?Ne?Ne.push(e):Ne=[e]:Ae=e}function Pe(){if(Ae){var e=Ae,t=Ne;if(Ne=Ae=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Fe(e,t){return e(t)}function Ie(e,t,n,r){return e(t,n,r)}function Re(){}var De=Fe,Me=!1;function Be(){null===Ae&&null===Ne||(Re(),Pe())}var Le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Le[e.type]:"textarea"===t}function qe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ue(e){if(!W)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Ve(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Qe(e){e._valueTracker||(e._valueTracker=function(e){var t=Ve(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ve(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var We=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;We.hasOwnProperty("ReactCurrentDispatcher")||(We.ReactCurrentDispatcher={current:null}),We.hasOwnProperty("ReactCurrentBatchConfig")||(We.ReactCurrentBatchConfig={suspense:null});var Je=/^(.*)[\\\/]/,He="function"==typeof Symbol&&Symbol.for,$e=He?Symbol.for("react.element"):60103,Ye=He?Symbol.for("react.portal"):60106,Ge=He?Symbol.for("react.fragment"):60107,Xe=He?Symbol.for("react.strict_mode"):60108,Ze=He?Symbol.for("react.profiler"):60114,et=He?Symbol.for("react.provider"):60109,tt=He?Symbol.for("react.context"):60110,nt=He?Symbol.for("react.concurrent_mode"):60111,rt=He?Symbol.for("react.forward_ref"):60112,ot=He?Symbol.for("react.suspense"):60113,it=He?Symbol.for("react.suspense_list"):60120,at=He?Symbol.for("react.memo"):60115,ut=He?Symbol.for("react.lazy"):60116;He&&Symbol.for("react.fundamental"),He&&Symbol.for("react.responder");var st="function"==typeof Symbol&&Symbol.iterator;function ct(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=st&&e[st]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case Ge:return"Fragment";case Ye:return"Portal";case Ze:return"Profiler";case Xe:return"StrictMode";case ot:return"Suspense";case it:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case tt:return"Context.Consumer";case et:return"Context.Provider";case rt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case at:return lt(e.type);case ut:if(e=1===e._status?e._result:null)return lt(e)}return null}function ft(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=lt(e.type);n=null,r&&(n=lt(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(Je,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var dt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pt=Object.prototype.hasOwnProperty,ht={},vt={};function yt(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new yt(e,0,!1,e,null,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new yt(t,1,!1,e[1],null,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new yt(e,2,!1,e.toLowerCase(),null,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){mt[e]=new yt(e,2,!1,e,null,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new yt(e,3,!1,e.toLowerCase(),null,!1)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new yt(e,3,!0,e,null,!1)}),["capture","download"].forEach(function(e){mt[e]=new yt(e,4,!1,e,null,!1)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new yt(e,6,!1,e,null,!1)}),["rowSpan","start"].forEach(function(e){mt[e]=new yt(e,5,!1,e.toLowerCase(),null,!1)});var gt=/[\-:]([a-z])/g;function bt(e){return e[1].toUpperCase()}function kt(e,t,n,r){var o=mt.hasOwnProperty(t)?mt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.call(vt,e)||!pt.call(ht,e)&&(dt.test(e)?vt[e]=!0:(ht[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function wt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function _t(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=wt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ot(e,t){null!=(t=t.checked)&&kt(e,"checked",t,!1)}function Et(e,t){Ot(e,t);var n=wt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Tt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Tt(e,t.type,wt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function St(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Tt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(gt,bt);mt[t]=new yt(t,1,!1,e,null,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(gt,bt);mt[t]=new yt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(gt,bt);mt[t]=new yt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)}),["tabIndex","crossOrigin"].forEach(function(e){mt[e]=new yt(e,1,!1,e.toLowerCase(),null,!1)}),mt.xlinkHref=new yt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach(function(e){mt[e]=new yt(e,1,!1,e.toLowerCase(),null,!0)});var At={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Nt(e,t,n){return(e=ce.getPooled(At.change,e,t,n)).type="change",je(n),K(e),e}var Ct=null,jt=null;function Pt(e){C(e)}function Ft(e){if(Ke(B(e)))return e}function It(e,t){if("change"===e)return t}var Rt=!1;function Dt(){Ct&&(Ct.detachEvent("onpropertychange",Mt),jt=Ct=null)}function Mt(e){if("value"===e.propertyName&&Ft(jt))if(e=Nt(jt,e,qe(e)),Me)C(e);else{Me=!0;try{Fe(Pt,e)}finally{Me=!1,Be()}}}function Bt(e,t,n){"focus"===e?(Dt(),jt=n,(Ct=t).attachEvent("onpropertychange",Mt)):"blur"===e&&Dt()}function Lt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ft(jt)}function zt(e,t){if("click"===e)return Ft(t)}function qt(e,t){if("input"===e||"change"===e)return Ft(t)}W&&(Rt=Ue("input")&&(!document.documentMode||9<document.documentMode));var Ut={eventTypes:At,_isInputEventSupported:Rt,extractEvents:function(e,t,n,r){var o=t?B(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=It:ze(o)?Rt?i=qt:(i=Lt,a=Bt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=zt),i&&(i=i(e,t)))return Nt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Tt(o,"number",o.value)}},Vt=ce.extend({view:null,detail:null}),Qt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Kt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Qt[e])&&!!t[e]}function Wt(){return Kt}var Jt=0,Ht=0,$t=!1,Yt=!1,Gt=Vt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Wt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Jt;return Jt=e.screenX,$t?"mousemove"===e.type?e.screenX-t:0:($t=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Ht;return Ht=e.screenY,Yt?"mousemove"===e.type?e.screenY-t:0:(Yt=!0,0)}}),Xt=Gt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Zt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},en={eventTypes:Zt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?D(t):null):i=null,i===t)return null;var a=void 0,u=void 0,s=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(a=Gt,u=Zt.mouseLeave,s=Zt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Xt,u=Zt.pointerLeave,s=Zt.pointerEnter,c="pointer");var l=null==i?o:B(i);if(o=null==t?o:B(t),(e=a.getPooled(u,i,n,r)).type=c+"leave",e.target=l,e.relatedTarget=o,(n=a.getPooled(s,t,n,r)).type=c+"enter",n.target=o,n.relatedTarget=l,r=t,i&&r)e:{for(o=r,c=0,a=t=i;a;a=z(a))c++;for(a=0,s=o;s;s=z(s))a++;for(;0<c-a;)t=z(t),c--;for(;0<a-c;)o=z(o),a--;for(;c--;){if(t===o||t===o.alternate)break e;t=z(t),o=z(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(c=i.alternate)||c!==o);)t.push(i),i=z(i);for(i=[];r&&r!==o&&(null===(c=r.alternate)||c!==o);)i.push(r),r=z(r);for(r=0;r<t.length;r++)V(t[r],"bubbled",e);for(r=i.length;0<r--;)V(i[r],"captured",n);return[e,n]}};function tn(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t}var nn=Object.prototype.hasOwnProperty;function rn(e,t){if(tn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!nn.call(t,n[r])||!tn(e[n[r]],t[n[r]]))return!1;return!0}function on(e,t){return{responder:e,props:t}}function an(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function un(e){if(2!==an(e))throw a(Error(188))}function sn(e){if(!(e=function(e){var t=e.alternate;if(!t){if(3===(t=an(e)))throw a(Error(188));return 1===t?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return un(o),e;if(i===r)return un(o),t;i=i.sibling}throw a(Error(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,s=o.child;s;){if(s===n){u=!0,n=o,r=i;break}if(s===r){u=!0,r=o,n=i;break}s=s.sibling}if(!u){for(s=i.child;s;){if(s===n){u=!0,n=i,r=o;break}if(s===r){u=!0,r=i,n=o;break}s=s.sibling}if(!u)throw a(Error(189))}}if(n.alternate!==r)throw a(Error(190))}if(3!==n.tag)throw a(Error(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}new Map,new Map,new Set,new Map;var cn=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),ln=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),fn=Vt.extend({relatedTarget:null});function dn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}for(var pn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},hn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vn=Vt.extend({key:function(e){if(e.key){var t=pn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=dn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?hn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Wt,charCode:function(e){return"keypress"===e.type?dn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?dn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),yn=Gt.extend({dataTransfer:null}),mn=Vt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Wt}),gn=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),bn=Gt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),kn=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[X,"animationEnd",2],[Z,"animationIteration",2],[ee,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[te,"transitionEnd",2],["waiting","waiting",2]],wn={},_n={},xn=0;xn<kn.length;xn++){var On=kn[xn],En=On[0],Sn=On[1],Tn=On[2],An="on"+(Sn[0].toUpperCase()+Sn.slice(1)),Nn={phasedRegistrationNames:{bubbled:An,captured:An+"Capture"},dependencies:[En],eventPriority:Tn};wn[Sn]=Nn,_n[En]=Nn}var Cn={eventTypes:wn,getEventPriority:function(e){return void 0!==(e=_n[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=_n[e];if(!o)return null;switch(e){case"keypress":if(0===dn(n))return null;case"keydown":case"keyup":e=vn;break;case"blur":case"focus":e=fn;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Gt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=mn;break;case X:case Z:case ee:e=cn;break;case te:e=gn;break;case"scroll":e=Vt;break;case"wheel":e=bn;break;case"copy":case"cut":case"paste":e=ln;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Xt;break;default:e=ce}return K(t=e.getPooled(o,t,n,r)),t}},jn=Cn.getEventPriority,Pn=[];function Fn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=D(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=qe(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<f.length;u++){var s=f[u];s&&(s=s.extractEvents(r,t,i,o))&&(a=S(a,s))}C(a)}}var In=!0;function Rn(e,t){Dn(t,e,!1)}function Dn(e,t,n){switch(jn(t)){case 0:var r=Mn.bind(null,t,1);break;case 1:r=Bn.bind(null,t,1);break;default:r=Ln.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Mn(e,t,n){Me||Re();var r=Ln,o=Me;Me=!0;try{Ie(r,e,t,n)}finally{(Me=o)||Be()}}function Bn(e,t,n){Ln(e,t,n)}function Ln(e,t,n){if(In){if(null===(t=D(t=qe(n)))||"number"!=typeof t.tag||2===an(t)||(t=null),Pn.length){var r=Pn.pop();r.topLevelType=e,r.nativeEvent=n,r.targetInst=t,e=r}else e={topLevelType:e,nativeEvent:n,targetInst:t,ancestors:[]};try{if(n=e,Me)Fn(n);else{Me=!0;try{De(Fn,n,void 0)}finally{Me=!1,Be()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Pn.length&&Pn.push(e)}}}var zn=new("function"==typeof WeakMap?WeakMap:Map);function qn(e){var t=zn.get(e);return void 0===t&&(t=new Set,zn.set(e,t)),t}function Un(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Vn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Qn(e,t){var n,r=Vn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Vn(r)}}function Kn(){for(var e=window,t=Un();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Un((e=t.contentWindow).document)}return t}function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Jn=W&&"documentMode"in document&&11>=document.documentMode,Hn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},$n=null,Yn=null,Gn=null,Xn=!1;function Zn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Xn||null==$n||$n!==Un(n)?null:("selectionStart"in(n=$n)&&Wn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Gn&&rn(Gn,n)?null:(Gn=n,(e=ce.getPooled(Hn.select,Yn,e,t)).type="select",e.target=$n,K(e),e))}var er={eventTypes:Hn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=qn(i),o=h.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?B(t):window,e){case"focus":(ze(i)||"true"===i.contentEditable)&&($n=i,Yn=t,Gn=null);break;case"blur":Gn=Yn=$n=null;break;case"mousedown":Xn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Xn=!1,Zn(n,r);case"selectionchange":if(Jn)break;case"keydown":case"keyup":return Zn(n,r)}return null}};function tr(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function nr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+wt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function rr(e,t){if(null!=t.dangerouslySetInnerHTML)throw a(Error(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function or(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw a(Error(92));if(Array.isArray(t)){if(!(1>=t.length))throw a(Error(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:wt(n)}}function ir(e,t){var n=wt(t.value),r=wt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ar(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}j.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_=L,x=M,O=B,j.injectEventPluginsByName({SimpleEventPlugin:Cn,EnterLeaveEventPlugin:en,ChangeEventPlugin:Ut,SelectEventPlugin:er,BeforeInputEventPlugin:Se});var ur={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function sr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function cr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?sr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var lr=void 0,fr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==ur.svg||"innerHTML"in e)e.innerHTML=t;else{for((lr=lr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=lr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function dr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},hr=["Webkit","ms","Moz","O"];function vr(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pr.hasOwnProperty(e)&&pr[e]?(""+t).trim():t+"px"}function yr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=vr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pr).forEach(function(e){hr.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pr[t]=pr[e]})});var mr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function gr(e,t){if(t){if(mr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw a(Error(137),e,"");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw a(Error(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw a(Error(61))}if(null!=t.style&&"object"!=typeof t.style)throw a(Error(62),"")}}function br(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function kr(e,t){var n=qn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.has(o)){switch(o){case"scroll":Dn(e,"scroll",!0);break;case"focus":case"blur":Dn(e,"focus",!0),Dn(e,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Ue(o)&&Dn(e,o,!0);break;case"invalid":case"submit":case"reset":break;default:-1===ne.indexOf(o)&&Rn(o,e)}n.add(o)}}}function wr(){}var _r=null,xr=null;function Or(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Er(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Sr="function"==typeof setTimeout?setTimeout:void 0,Tr="function"==typeof clearTimeout?clearTimeout:void 0;function Ar(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}new Set;var Nr=[],Cr=-1;function jr(e){0>Cr||(e.current=Nr[Cr],Nr[Cr]=null,Cr--)}function Pr(e,t){Nr[++Cr]=e.current,e.current=t}var Fr={},Ir={current:Fr},Rr={current:!1},Dr=Fr;function Mr(e,t){var n=e.type.contextTypes;if(!n)return Fr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Br(e){return null!=(e=e.childContextTypes)}function Lr(e){jr(Rr),jr(Ir)}function zr(e){jr(Rr),jr(Ir)}function qr(e,t,n){if(Ir.current!==Fr)throw a(Error(168));Pr(Ir,t),Pr(Rr,n)}function Ur(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw a(Error(108),lt(t)||"Unknown",i);return o({},n,r)}function Vr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Fr,Dr=Ir.current,Pr(Ir,t),Pr(Rr,Rr.current),!0}function Qr(e,t,n){var r=e.stateNode;if(!r)throw a(Error(169));n?(t=Ur(e,t,Dr),r.__reactInternalMemoizedMergedChildContext=t,jr(Rr),jr(Ir),Pr(Ir,t)):jr(Rr),Pr(Rr,n)}var Kr=i.unstable_runWithPriority,Wr=i.unstable_scheduleCallback,Jr=i.unstable_cancelCallback,Hr=i.unstable_shouldYield,$r=i.unstable_requestPaint,Yr=i.unstable_now,Gr=i.unstable_getCurrentPriorityLevel,Xr=i.unstable_ImmediatePriority,Zr=i.unstable_UserBlockingPriority,eo=i.unstable_NormalPriority,to=i.unstable_LowPriority,no=i.unstable_IdlePriority,ro={},oo=void 0!==$r?$r:function(){},io=null,ao=null,uo=!1,so=Yr(),co=1e4>so?Yr:function(){return Yr()-so};function lo(){switch(Gr()){case Xr:return 99;case Zr:return 98;case eo:return 97;case to:return 96;case no:return 95;default:throw a(Error(332))}}function fo(e){switch(e){case 99:return Xr;case 98:return Zr;case 97:return eo;case 96:return to;case 95:return no;default:throw a(Error(332))}}function po(e,t){return e=fo(e),Kr(e,t)}function ho(e,t,n){return e=fo(e),Wr(e,t,n)}function vo(e){return null===io?(io=[e],ao=Wr(Xr,mo)):io.push(e),ro}function yo(){null!==ao&&Jr(ao),mo()}function mo(){if(!uo&&null!==io){uo=!0;var e=0;try{var t=io;po(99,function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}}),io=null}catch(t){throw null!==io&&(io=io.slice(e+1)),Wr(Xr,yo),t}finally{uo=!1}}}function go(e,t){return 1073741823===t?99:1===t?95:0>=(e=10*(1073741821-t)-10*(1073741821-e))?99:250>=e?98:5250>=e?97:95}function bo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ko={current:null},wo=null,_o=null,xo=null;function Oo(){xo=_o=wo=null}function Eo(e,t){var n=e.type._context;Pr(ko,n._currentValue),n._currentValue=t}function So(e){var t=ko.current;jr(ko),e.type._context._currentValue=t}function To(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function Ao(e,t){wo=e,xo=_o=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(fa=!0),e.firstContext=null)}function No(e,t){if(xo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(xo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===_o){if(null===wo)throw a(Error(308));_o=t,wo.dependencies={expirationTime:0,firstContext:t,responders:null}}else _o=_o.next=t;return e._currentValue}var Co=!1;function jo(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Po(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Fo(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Io(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Ro(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=jo(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=jo(e.memoizedState),o=n.updateQueue=jo(n.memoizedState)):r=e.updateQueue=Po(o):null===o&&(o=n.updateQueue=Po(r));null===o||r===o?Io(r,t):null===r.lastUpdate||null===o.lastUpdate?(Io(r,t),Io(o,t)):(Io(r,t),o.lastUpdate=t)}function Do(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=jo(e.memoizedState):Mo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function Mo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Po(t)),t}function Bo(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:Co=!0}return r}function Lo(e,t,n,r,o){Co=!1;for(var i=(t=Mo(e,t)).baseState,a=null,u=0,s=t.firstUpdate,c=i;null!==s;){var l=s.expirationTime;l<o?(null===a&&(a=s,i=c),u<l&&(u=l)):(Uu(l,s.suspenseConfig),c=Bo(e,0,s,c,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(l=null,s=t.firstCapturedUpdate;null!==s;){var f=s.expirationTime;f<o?(null===l&&(l=s,null===a&&(i=c)),u<f&&(u=f)):(c=Bo(e,0,s,c,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===a&&(t.lastUpdate=null),null===l?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===l&&(i=c),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=l,e.expirationTime=u,e.memoizedState=c}function zo(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),qo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,qo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function qo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw a(Error(191),n);n.call(r)}e=e.nextEffect}}var Uo=We.ReactCurrentBatchConfig,Vo=(new r.Component).refs;function Qo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Ko={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===an(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Nu(),o=Uo.suspense;(o=Fo(r=Cu(r,e,o),o)).payload=t,null!=n&&(o.callback=n),Ro(e,o),Pu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Nu(),o=Uo.suspense;(o=Fo(r=Cu(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),Ro(e,o),Pu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Nu(),r=Uo.suspense;(r=Fo(n=Cu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),Ro(e,r),Pu(e,n)}};function Wo(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!rn(n,r)||!rn(o,i))}function Jo(e,t,n){var r=!1,o=Fr,i=t.contextType;return"object"==typeof i&&null!==i?i=No(i):(o=Br(t)?Dr:Ir.current,i=(r=null!=(r=t.contextTypes))?Mr(e,o):Fr),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ko,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Ho(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ko.enqueueReplaceState(t,t.state,null)}function $o(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Vo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=No(i):(i=Br(t)?Dr:Ir.current,o.context=Mr(e,i)),null!==(i=e.updateQueue)&&(Lo(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Qo(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ko.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(Lo(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Yo=Array.isArray;function Go(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){n=n._owner;var r=void 0;if(n){if(1!==n.tag)throw a(Error(309));r=n.stateNode}if(!r)throw a(Error(147),e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Vo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw a(Error(284));if(!n._owner)throw a(Error(290),e)}return e}function Xo(e,t){if("textarea"!==e.type)throw a(Error(31),"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Zo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=is(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=ss(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Go(e,t,n),r.return=e,r):((r=as(n.type,n.key,n.props,null,e.mode,r)).ref=Go(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=cs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=us(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ss(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case $e:return(n=as(t.type,t.key,t.props,null,e.mode,n)).ref=Go(e,null,t),n.return=e,n;case Ye:return(t=cs(t,e.mode,n)).return=e,t}if(Yo(t)||ct(t))return(t=us(t,e.mode,n,null)).return=e,t;Xo(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case $e:return n.key===o?n.type===Ge?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case Ye:return n.key===o?l(e,t,n,r):null}if(Yo(n)||ct(n))return null!==o?null:f(e,t,n,r,null);Xo(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case $e:return e=e.get(null===r.key?n:r.key)||null,r.type===Ge?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case Ye:return l(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Yo(r)||ct(r))return f(t,e=e.get(n)||null,r,o,null);Xo(t,r)}return null}function v(o,a,u,s){for(var c=null,l=null,f=a,v=a=0,y=null;null!==f&&v<u.length;v++){f.index>v?(y=f,f=null):y=f.sibling;var m=p(o,f,u[v],s);if(null===m){null===f&&(f=y);break}e&&f&&null===m.alternate&&t(o,f),a=i(m,a,v),null===l?c=m:l.sibling=m,l=m,f=y}if(v===u.length)return n(o,f),c;if(null===f){for(;v<u.length;v++)null!==(f=d(o,u[v],s))&&(a=i(f,a,v),null===l?c=f:l.sibling=f,l=f);return c}for(f=r(o,f);v<u.length;v++)null!==(y=h(f,o,v,u[v],s))&&(e&&null!==y.alternate&&f.delete(null===y.key?v:y.key),a=i(y,a,v),null===l?c=y:l.sibling=y,l=y);return e&&f.forEach(function(e){return t(o,e)}),c}function y(o,u,s,c){var l=ct(s);if("function"!=typeof l)throw a(Error(150));if(null==(s=l.call(s)))throw a(Error(151));for(var f=l=null,v=u,y=u=0,m=null,g=s.next();null!==v&&!g.done;y++,g=s.next()){v.index>y?(m=v,v=null):m=v.sibling;var b=p(o,v,g.value,c);if(null===b){null===v&&(v=m);break}e&&v&&null===b.alternate&&t(o,v),u=i(b,u,y),null===f?l=b:f.sibling=b,f=b,v=m}if(g.done)return n(o,v),l;if(null===v){for(;!g.done;y++,g=s.next())null!==(g=d(o,g.value,c))&&(u=i(g,u,y),null===f?l=g:f.sibling=g,f=g);return l}for(v=r(o,v);!g.done;y++,g=s.next())null!==(g=h(v,o,y,g.value,c))&&(e&&null!==g.alternate&&v.delete(null===g.key?y:g.key),u=i(g,u,y),null===f?l=g:f.sibling=g,f=g);return e&&v.forEach(function(e){return t(o,e)}),l}return function(e,r,i,s){var c="object"==typeof i&&null!==i&&i.type===Ge&&null===i.key;c&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case $e:e:{for(l=i.key,c=r;null!==c;){if(c.key===l){if(7===c.tag?i.type===Ge:c.elementType===i.type){n(e,c.sibling),(r=o(c,i.type===Ge?i.props.children:i.props)).ref=Go(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===Ge?((r=us(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=as(i.type,i.key,i.props,null,e.mode,s)).ref=Go(e,r,i),s.return=e,e=s)}return u(e);case Ye:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=cs(i,e.mode,s)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=ss(i,e.mode,s)).return=e,e=r),u(e);if(Yo(i))return v(e,r,i,s);if(ct(i))return y(e,r,i,s);if(l&&Xo(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,a(Error(152),e.displayName||e.name||"Component")}return n(e,r)}}var ei=Zo(!0),ti=Zo(!1),ni={},ri={current:ni},oi={current:ni},ii={current:ni};function ai(e){if(e===ni)throw a(Error(174));return e}function ui(e,t){Pr(ii,t),Pr(oi,e),Pr(ri,ni);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:cr(null,"");break;default:t=cr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}jr(ri),Pr(ri,t)}function si(e){jr(ri),jr(oi),jr(ii)}function ci(e){ai(ii.current);var t=ai(ri.current),n=cr(t,e.type);t!==n&&(Pr(oi,e),Pr(ri,n))}function li(e){oi.current===e&&(jr(ri),jr(oi))}var fi=1,di=1,pi=2,hi={current:0};function vi(e){for(var t=e;null!==t;){if(13===t.tag){if(null!==t.memoizedState)return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var yi=0,mi=2,gi=4,bi=8,ki=16,wi=32,_i=64,xi=128,Oi=We.ReactCurrentDispatcher,Ei=0,Si=null,Ti=null,Ai=null,Ni=null,Ci=null,ji=null,Pi=0,Fi=null,Ii=0,Ri=!1,Di=null,Mi=0;function Bi(){throw a(Error(321))}function Li(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!tn(e[n],t[n]))return!1;return!0}function zi(e,t,n,r,o,i){if(Ei=i,Si=t,Ai=null!==e?e.memoizedState:null,Oi.current=null===Ai?Zi:ea,t=n(r,o),Ri){do{Ri=!1,Mi+=1,Ai=null!==e?e.memoizedState:null,ji=Ni,Fi=Ci=Ti=null,Oi.current=ea,t=n(r,o)}while(Ri);Di=null,Mi=0}if(Oi.current=Xi,(e=Si).memoizedState=Ni,e.expirationTime=Pi,e.updateQueue=Fi,e.effectTag|=Ii,e=null!==Ti&&null!==Ti.next,Ei=0,ji=Ci=Ni=Ai=Ti=Si=null,Pi=0,Fi=null,Ii=0,e)throw a(Error(300));return t}function qi(){Oi.current=Xi,Ei=0,ji=Ci=Ni=Ai=Ti=Si=null,Pi=0,Fi=null,Ii=0,Ri=!1,Di=null,Mi=0}function Ui(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===Ci?Ni=Ci=e:Ci=Ci.next=e,Ci}function Vi(){if(null!==ji)ji=(Ci=ji).next,Ai=null!==(Ti=Ai)?Ti.next:null;else{if(null===Ai)throw a(Error(310));var e={memoizedState:(Ti=Ai).memoizedState,baseState:Ti.baseState,queue:Ti.queue,baseUpdate:Ti.baseUpdate,next:null};Ci=null===Ci?Ni=e:Ci.next=e,Ai=Ti.next}return Ci}function Qi(e,t){return"function"==typeof t?t(e):t}function Ki(e){var t=Vi(),n=t.queue;if(null===n)throw a(Error(311));if(n.lastRenderedReducer=e,0<Mi){var r=n.dispatch;if(null!==Di){var o=Di.get(n);if(void 0!==o){Di.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return tn(i,t.memoizedState)||(fa=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(i=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var s=o=null,c=r,l=!1;do{var f=c.expirationTime;f<Ei?(l||(l=!0,s=u,o=i),f>Pi&&(Pi=f)):(Uu(f,c.suspenseConfig),i=c.eagerReducer===e?c.eagerState:e(i,c.action)),u=c,c=c.next}while(null!==c&&c!==r);l||(s=u,o=i),tn(i,t.memoizedState)||(fa=!0),t.memoizedState=i,t.baseUpdate=s,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function Wi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Fi?(Fi={lastEffect:null}).lastEffect=e.next=e:null===(t=Fi.lastEffect)?Fi.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Fi.lastEffect=e),e}function Ji(e,t,n,r){var o=Ui();Ii|=e,o.memoizedState=Wi(t,n,void 0,void 0===r?null:r)}function Hi(e,t,n,r){var o=Vi();r=void 0===r?null:r;var i=void 0;if(null!==Ti){var a=Ti.memoizedState;if(i=a.destroy,null!==r&&Li(r,a.deps))return void Wi(yi,n,i,r)}Ii|=e,o.memoizedState=Wi(t,n,i,r)}function $i(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Yi(){}function Gi(e,t,n){if(!(25>Mi))throw a(Error(301));var r=e.alternate;if(e===Si||null!==r&&r===Si)if(Ri=!0,e={expirationTime:Ei,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===Di&&(Di=new Map),void 0===(n=Di.get(t)))Di.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=Nu(),i=Uo.suspense;i={expirationTime:o=Cu(o,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var u=t.last;if(null===u)i.next=i;else{var s=u.next;null!==s&&(i.next=s),u.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,l=r(c,n);if(i.eagerReducer=r,i.eagerState=l,tn(l,c))return}catch(e){}Pu(e,o)}}var Xi={readContext:No,useCallback:Bi,useContext:Bi,useEffect:Bi,useImperativeHandle:Bi,useLayoutEffect:Bi,useMemo:Bi,useReducer:Bi,useRef:Bi,useState:Bi,useDebugValue:Bi,useResponder:Bi},Zi={readContext:No,useCallback:function(e,t){return Ui().memoizedState=[e,void 0===t?null:t],e},useContext:No,useEffect:function(e,t){return Ji(516,xi|_i,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ji(4,gi|wi,$i.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ji(4,gi|wi,e,t)},useMemo:function(e,t){var n=Ui();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ui();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Gi.bind(null,Si,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ui().memoizedState=e},useState:function(e){var t=Ui();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:Qi,lastRenderedState:e}).dispatch=Gi.bind(null,Si,e),[t.memoizedState,e]},useDebugValue:Yi,useResponder:on},ea={readContext:No,useCallback:function(e,t){var n=Vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Li(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:No,useEffect:function(e,t){return Hi(516,xi|_i,e,t)},useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Hi(4,gi|wi,$i.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Hi(4,gi|wi,e,t)},useMemo:function(e,t){var n=Vi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Li(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:Ki,useRef:function(){return Vi().memoizedState},useState:function(e){return Ki(Qi)},useDebugValue:Yi,useResponder:on},ta=null,na=null,ra=!1;function oa(e,t){var n=rs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ia(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function aa(e){if(ra){var t=na;if(t){var n=t;if(!ia(e,t)){if(!(t=Ar(n.nextSibling))||!ia(e,t))return e.effectTag|=2,ra=!1,void(ta=e);oa(ta,n)}ta=e,na=Ar(t.firstChild)}else e.effectTag|=2,ra=!1,ta=e}}function ua(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;ta=e}function sa(e){if(e!==ta)return!1;if(!ra)return ua(e),ra=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Er(t,e.memoizedProps))for(t=na;t;)oa(e,t),t=Ar(t.nextSibling);return ua(e),na=ta?Ar(e.stateNode.nextSibling):null,!0}function ca(){na=ta=null,ra=!1}var la=We.ReactCurrentOwner,fa=!1;function da(e,t,n,r){t.child=null===e?ti(t,null,n,r):ei(t,e.child,n,r)}function pa(e,t,n,r,o){n=n.render;var i=t.ref;return Ao(t,o),r=zi(e,t,n,r,i,o),null===e||fa?(t.effectTag|=1,da(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ea(e,t,o))}function ha(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||os(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=as(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,va(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:rn)(o,r)&&e.ref===t.ref)?Ea(e,t,i):(t.effectTag|=1,(e=is(a,r)).ref=t.ref,e.return=t,t.child=e)}function va(e,t,n,r,o,i){return null!==e&&rn(e.memoizedProps,r)&&e.ref===t.ref&&(fa=!1,o<i)?Ea(e,t,i):ma(e,t,n,r,i)}function ya(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ma(e,t,n,r,o){var i=Br(n)?Dr:Ir.current;return i=Mr(t,i),Ao(t,o),n=zi(e,t,n,r,i,o),null===e||fa?(t.effectTag|=1,da(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ea(e,t,o))}function ga(e,t,n,r,o){if(Br(n)){var i=!0;Vr(t)}else i=!1;if(Ao(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Jo(t,n,r),$o(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var s=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=No(c):c=Mr(t,c=Br(n)?Dr:Ir.current);var l=n.getDerivedStateFromProps,f="function"==typeof l||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||s!==c)&&Ho(t,a,r,c),Co=!1;var d=t.memoizedState;s=a.state=d;var p=t.updateQueue;null!==p&&(Lo(t,p,r,a,o),s=t.memoizedState),u!==r||d!==s||Rr.current||Co?("function"==typeof l&&(Qo(t,n,l,r),s=t.memoizedState),(u=Co||Wo(t,n,u,r,d,s,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:bo(t.type,u),s=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=No(c):c=Mr(t,c=Br(n)?Dr:Ir.current),(f="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||s!==c)&&Ho(t,a,r,c),Co=!1,s=t.memoizedState,d=a.state=s,null!==(p=t.updateQueue)&&(Lo(t,p,r,a,o),d=t.memoizedState),u!==r||s!==d||Rr.current||Co?("function"==typeof l&&(Qo(t,n,l,r),d=t.memoizedState),(l=Co||Wo(t,n,u,r,s,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=l):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return ba(e,t,n,r,i,o)}function ba(e,t,n,r,o,i){ya(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Qr(t,n,!1),Ea(e,t,i);r=t.stateNode,la.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=ei(t,e.child,null,i),t.child=ei(t,null,u,i)):da(e,t,u,i),t.memoizedState=r.state,o&&Qr(t,n,!0),t.child}function ka(e){var t=e.stateNode;t.pendingContext?qr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&qr(0,t.context,!1),ui(e,t.containerInfo)}var wa={};function _a(e,t,n){var r,o=t.mode,i=t.pendingProps,a=hi.current,u=null,s=!1;if((r=0!=(64&t.effectTag))||(r=0!=(a&pi)&&(null===e||null!==e.memoizedState)),r?(u=wa,s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=di),Pr(hi,a&=fi),null===e)if(s){if(i=i.fallback,(e=us(null,o,0,null)).return=t,0==(2&t.mode))for(s=null!==t.memoizedState?t.child.child:t.child,e.child=s;null!==s;)s.return=e,s=s.sibling;(n=us(i,o,n,null)).return=t,e.sibling=n,o=e}else o=n=ti(t,null,i.children,n);else{if(null!==e.memoizedState)if(o=(a=e.child).sibling,s){if(i=i.fallback,(n=is(a,a.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==a.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;(i=is(o,i,o.expirationTime)).return=t,n.sibling=i,o=n,n.childExpirationTime=0,n=i}else o=n=ei(t,a.child,i.children,n);else if(a=e.child,s){if(s=i.fallback,(i=us(null,o,0,null)).return=t,i.child=a,null!==a&&(a.return=i),0==(2&t.mode))for(a=null!==t.memoizedState?t.child.child:t.child,i.child=a;null!==a;)a.return=i,a=a.sibling;(n=us(s,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,o=i,i.childExpirationTime=0}else n=o=ei(t,a,i.children,n);t.stateNode=e.stateNode}return t.memoizedState=u,t.child=o,n}function xa(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o)}function Oa(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(da(e,t,r.children,n),0!=((r=hi.current)&pi))r=r&fi|pi,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag){if(null!==e.memoizedState){e.expirationTime<n&&(e.expirationTime=n);var a=e.alternate;null!==a&&a.expirationTime<n&&(a.expirationTime=n),To(e.return,n)}}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=fi}if(Pr(hi,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(r=n.alternate)&&null===vi(r)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),xa(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(r=o.alternate)&&null===vi(r)){t.child=o;break}r=o.sibling,o.sibling=n,n=o,o=r}xa(t,!0,n,null,i);break;case"together":xa(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ea(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw a(Error(153));if(null!==t.child){for(n=is(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=is(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Sa(e){e.effectTag|=4}var Ta=void 0,Aa=void 0,Na=void 0,Ca=void 0;function ja(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Pa(e){switch(e.tag){case 1:Br(e.type)&&Lr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:if(si(),zr(),0!=(64&(t=e.effectTag)))throw a(Error(285));return e.effectTag=-2049&t|64,e;case 5:return li(e),null;case 13:return jr(hi),2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 19:return jr(hi),null;case 4:return si(),null;case 10:return So(e),null;default:return null}}function Fa(e,t){return{value:e,source:t,stack:ft(t)}}Ta=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(20===n.tag)e.appendChild(n.stateNode.instance);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Aa=function(){},Na=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(ai(ri.current),e=null,n){case"input":a=_t(u,a),r=_t(u,r),e=[];break;case"option":a=tr(u,a),r=tr(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=rr(u,a),r=rr(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=wr)}gr(n,r),u=n=void 0;var s=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var c=a[n];for(u in c)c.hasOwnProperty(u)&&(s||(s={}),s[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(p.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var l=r[n];if(c=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&l!==c&&(null!=l||null!=c))if("style"===n)if(c){for(u in c)!c.hasOwnProperty(u)||l&&l.hasOwnProperty(u)||(s||(s={}),s[u]="");for(u in l)l.hasOwnProperty(u)&&c[u]!==l[u]&&(s||(s={}),s[u]=l[u])}else s||(e||(e=[]),e.push(n,s)),s=l;else"dangerouslySetInnerHTML"===n?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(e=e||[]).push(n,""+l)):"children"===n?c===l||"string"!=typeof l&&"number"!=typeof l||(e=e||[]).push(n,""+l):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(p.hasOwnProperty(n)?(null!=l&&kr(i,n),e||c===l||(e=[])):(e=e||[]).push(n,l))}s&&(e=e||[]).push("style",s),i=e,(t.updateQueue=i)&&Sa(t)}},Ca=function(e,t,n,r){n!==r&&Sa(t)};var Ia="function"==typeof WeakSet?WeakSet:Set;function Ra(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ft(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function Da(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Yu(e,t)}else t.current=null}function Ma(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==yi){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}(r.tag&t)!==yi&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function Ba(e,t){switch("function"==typeof ts&&ts(e),e.tag){case 0:case 11:case 14:case 15:var n=e.updateQueue;if(null!==n&&null!==(n=n.lastEffect)){var r=n.next;po(97<t?97:t,function(){var t=r;do{var n=t.destroy;if(void 0!==n){var o=e;try{n()}catch(e){Yu(o,e)}}t=t.next}while(t!==r)})}break;case 1:Da(e),"function"==typeof(t=e.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Yu(e,t)}}(e,t);break;case 5:Da(e);break;case 4:Ua(e,t)}}function La(e,t){for(var n=e;;)if(Ba(n,t),null!==n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function za(e){return 5===e.tag||3===e.tag||4===e.tag}function qa(e){e:{for(var t=e.return;null!==t;){if(za(t)){var n=t;break e}t=t.return}throw a(Error(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw a(Error(161))}16&n.effectTag&&(dr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||za(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var i=5===o.tag||6===o.tag;if(i||20===o.tag){var u=i?o.stateNode:o.stateNode.instance;if(n)if(r){var s=u;u=n,8===(i=t).nodeType?i.parentNode.insertBefore(s,u):i.insertBefore(s,u)}else t.insertBefore(u,n);else r?(8===(s=t).nodeType?(i=s.parentNode).insertBefore(u,s):(i=s).appendChild(u),null!=(s=s._reactRootContainer)||null!==i.onclick||(i.onclick=wr)):t.appendChild(u)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Ua(e,t){for(var n=e,r=!1,o=void 0,i=void 0;;){if(!r){r=n.return;e:for(;;){if(null===r)throw a(Error(160));switch(o=r.stateNode,r.tag){case 5:i=!1;break e;case 3:case 4:o=o.containerInfo,i=!0;break e}r=r.return}r=!0}if(5===n.tag||6===n.tag)if(La(n,t),i){var u=o,s=n.stateNode;8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)}else o.removeChild(n.stateNode);else if(20===n.tag)s=n.stateNode.instance,La(n,t),i?8===(u=o).nodeType?u.parentNode.removeChild(s):u.removeChild(s):o.removeChild(s);else if(4===n.tag){if(null!==n.child){o=n.stateNode.containerInfo,i=!0,n.child.return=n,n=n.child;continue}}else if(Ba(n,t),null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;4===(n=n.return).tag&&(r=!1)}n.sibling.return=n.return,n=n.sibling}}function Va(e,t){switch(t.tag){case 0:case 11:case 14:case 15:Ma(gi,bi,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[R]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ot(n,r),br(e,o),t=br(e,r),o=0;o<i.length;o+=2){var u=i[o],s=i[o+1];"style"===u?yr(n,s):"dangerouslySetInnerHTML"===u?fr(n,s):"children"===u?dr(n,s):kt(n,u,s,t)}switch(e){case"input":Et(n,r);break;case"textarea":ir(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?nr(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?nr(n,!!r.multiple,r.defaultValue,!0):nr(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw a(Error(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,vu=co()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=vr("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Qa(t);break;case 19:Qa(t);break;case 17:case 20:break;default:throw a(Error(163))}}function Qa(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ia),t.forEach(function(t){var r=Xu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}}var Ka="function"==typeof WeakMap?WeakMap:Map;function Wa(e,t,n){(n=Fo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){gu||(gu=!0,bu=r),Ra(e,t)},n}function Ja(e,t,n){(n=Fo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return Ra(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ku?ku=new Set([this]):ku.add(this),Ra(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Ha=Math.ceil,$a=We.ReactCurrentDispatcher,Ya=We.ReactCurrentOwner,Ga=0,Xa=8,Za=16,eu=32,tu=0,nu=1,ru=2,ou=3,iu=4,au=Ga,uu=null,su=null,cu=0,lu=tu,fu=1073741823,du=1073741823,pu=null,hu=!1,vu=0,yu=500,mu=null,gu=!1,bu=null,ku=null,wu=!1,_u=null,xu=90,Ou=0,Eu=null,Su=0,Tu=null,Au=0;function Nu(){return(au&(Za|eu))!==Ga?1073741821-(co()/10|0):0!==Au?Au:Au=1073741821-(co()/10|0)}function Cu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=lo();if(0==(4&t))return 99===r?1073741823:1073741822;if((au&Za)!==Ga)return cu;if(null!==n)e=1073741821-25*(1+((1073741821-e+(0|n.timeoutMs||5e3)/10)/25|0));else switch(r){case 99:e=1073741823;break;case 98:e=1073741821-10*(1+((1073741821-e+15)/10|0));break;case 97:case 96:e=1073741821-25*(1+((1073741821-e+500)/25|0));break;case 95:e=1;break;default:throw a(Error(326))}return null!==uu&&e===cu&&--e,e}var ju=0;function Pu(e,t){if(50<Su)throw Su=0,Tu=null,a(Error(185));if(null!==(e=Fu(e,t))){e.pingTime=0;var n=lo();if(1073741823===t)if((au&Xa)!==Ga&&(au&(Za|eu))===Ga)for(var r=qu(e,1073741823,!0);null!==r;)r=r(!0);else Iu(e,99,1073741823),au===Ga&&yo();else Iu(e,n,t);(4&au)===Ga||98!==n&&99!==n||(null===Eu?Eu=new Map([[e,t]]):(void 0===(n=Eu.get(e))||n>t)&&Eu.set(e,t))}}function Fu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(t>o.firstPendingTime&&(o.firstPendingTime=t),0===(e=o.lastPendingTime)||t<e)&&(o.lastPendingTime=t),o}function Iu(e,t,n){if(e.callbackExpirationTime<n){var r=e.callbackNode;null!==r&&r!==ro&&Jr(r),e.callbackExpirationTime=n,1073741823===n?e.callbackNode=vo(Ru.bind(null,e,qu.bind(null,e,n))):(r=null,1!==n&&(r={timeout:10*(1073741821-n)-co()}),e.callbackNode=ho(t,Ru.bind(null,e,qu.bind(null,e,n)),r))}}function Ru(e,t,n){var r=e.callbackNode,o=null;try{return null!==(o=t(n))?Ru.bind(null,e,o):null}finally{null===o&&r===e.callbackNode&&(e.callbackNode=null,e.callbackExpirationTime=0)}}function Du(){(au&(1|Za|eu))===Ga&&(function(){if(null!==Eu){var e=Eu;Eu=null,e.forEach(function(e,t){vo(qu.bind(null,t,e))}),yo()}}(),Ju())}function Mu(e,t){var n=au;au|=1;try{return e(t)}finally{(au=n)===Ga&&yo()}}function Bu(e,t,n,r){var o=au;au|=4;try{return po(98,e.bind(null,t,n,r))}finally{(au=o)===Ga&&yo()}}function Lu(e,t){var n=au;au&=-2,au|=Xa;try{return e(t)}finally{(au=n)===Ga&&yo()}}function zu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Tr(n)),null!==su)for(n=su.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&Lr();break;case 3:si(),zr();break;case 5:li(r);break;case 4:si();break;case 13:case 19:jr(hi);break;case 10:So(r)}n=n.return}uu=e,su=is(e.current,null),cu=t,lu=tu,du=fu=1073741823,pu=null,hu=!1}function qu(e,t,n){if((au&(Za|eu))!==Ga)throw a(Error(327));if(e.firstPendingTime<t)return null;if(n&&e.finishedExpirationTime===t)return Ku.bind(null,e);if(Ju(),e!==uu||t!==cu)zu(e,t);else if(lu===ou)if(hu)zu(e,t);else{var r=e.lastPendingTime;if(r<t)return qu.bind(null,e,r)}if(null!==su){r=au,au|=Za;var o=$a.current;if(null===o&&(o=Xi),$a.current=Xi,n){if(1073741823!==t){var i=Nu();if(i<t)return au=r,Oo(),$a.current=o,qu.bind(null,e,i)}}else Au=0;for(;;)try{if(n)for(;null!==su;)su=Vu(su);else for(;null!==su&&!Hr();)su=Vu(su);break}catch(n){if(Oo(),qi(),null===(i=su)||null===i.return)throw zu(e,t),au=r,n;e:{var u=e,s=i.return,c=i,l=n,f=cu;if(c.effectTag|=1024,c.firstEffect=c.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var d=l,p=0!=(hi.current&di);l=s;do{var h;if((h=13===l.tag)&&(null!==l.memoizedState?h=!1:h=void 0!==(h=l.memoizedProps).fallback&&(!0!==h.unstable_avoidThisFallback||!p)),h){if(null===(s=l.updateQueue)?((s=new Set).add(d),l.updateQueue=s):s.add(d),0==(2&l.mode)){l.effectTag|=64,c.effectTag&=-1957,1===c.tag&&(null===c.alternate?c.tag=17:((f=Fo(1073741823,null)).tag=2,Ro(c,f))),c.expirationTime=1073741823;break e}c=u,u=f,null===(p=c.pingCache)?(p=c.pingCache=new Ka,s=new Set,p.set(d,s)):void 0===(s=p.get(d))&&(s=new Set,p.set(d,s)),s.has(u)||(s.add(u),c=Gu.bind(null,c,d,u),d.then(c,c)),l.effectTag|=2048,l.expirationTime=f;break e}l=l.return}while(null!==l);l=Error((lt(c.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ft(c))}lu!==iu&&(lu=nu),l=Fa(l,c),c=s;do{switch(c.tag){case 3:c.effectTag|=2048,c.expirationTime=f,Do(c,f=Wa(c,l,f));break e;case 1:if(d=l,u=c.type,s=c.stateNode,0==(64&c.effectTag)&&("function"==typeof u.getDerivedStateFromError||null!==s&&"function"==typeof s.componentDidCatch&&(null===ku||!ku.has(s)))){c.effectTag|=2048,c.expirationTime=f,Do(c,f=Ja(c,d,f));break e}}c=c.return}while(null!==c)}su=Qu(i)}if(au=r,Oo(),$a.current=o,null!==su)return qu.bind(null,e,t)}if(e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,function(e,t){var n=e.firstBatch;return!!(null!==n&&n._defer&&n._expirationTime>=t)&&(ho(97,function(){return n._onComplete(),null}),!0)}(e,t))return null;switch(uu=null,lu){case tu:throw a(Error(328));case nu:return(r=e.lastPendingTime)<t?qu.bind(null,e,r):n?Ku.bind(null,e):(zu(e,t),vo(qu.bind(null,e,t)),null);case ru:return 1073741823===fu&&!n&&10<(n=vu+yu-co())?hu?(zu(e,t),qu.bind(null,e,t)):(r=e.lastPendingTime)<t?qu.bind(null,e,r):(e.timeoutHandle=Sr(Ku.bind(null,e),n),null):Ku.bind(null,e);case ou:if(!n){if(hu)return zu(e,t),qu.bind(null,e,t);if((n=e.lastPendingTime)<t)return qu.bind(null,e,n);if(1073741823!==du?n=10*(1073741821-du)-co():1073741823===fu?n=0:(n=10*(1073741821-fu)-5e3,0>(n=(r=co())-n)&&(n=0),(t=10*(1073741821-t)-r)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ha(n/1960))-n)&&(n=t)),10<n)return e.timeoutHandle=Sr(Ku.bind(null,e),n),null}return Ku.bind(null,e);case iu:return!n&&1073741823!==fu&&null!==pu&&(r=fu,0>=(t=0|(o=pu).busyMinDurationMs)?t=0:(n=0|o.busyDelayMs,t=(r=co()-(10*(1073741821-r)-(0|o.timeoutMs||5e3)))<=n?0:n+t-r),10<t)?(e.timeoutHandle=Sr(Ku.bind(null,e),t),null):Ku.bind(null,e);default:throw a(Error(329))}}function Uu(e,t){e<fu&&1<e&&(fu=e),null!==t&&e<du&&1<e&&(du=e,pu=t)}function Vu(e){var t=Zu(e.alternate,e,cu);return e.memoizedProps=e.pendingProps,null===t&&(t=Qu(e)),Ya.current=null,t}function Qu(e){su=e;do{var t=su.alternate;if(e=su.return,0==(1024&su.effectTag)){e:{var n=t,r=cu,i=(t=su).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Br(t.type)&&Lr();break;case 3:si(),zr(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==n&&null!==n.child||(sa(t),t.effectTag&=-3),Aa(t);break;case 5:li(t),r=ai(ii.current);var u=t.type;if(null!==n&&null!=t.stateNode)Na(n,t,u,i,r),n.ref!==t.ref&&(t.effectTag|=128);else if(i){var s=ai(ri.current);if(sa(t)){i=void 0,u=(n=t).stateNode;var c=n.type,l=n.memoizedProps;switch(u[I]=n,u[R]=l,c){case"iframe":case"object":case"embed":Rn("load",u);break;case"video":case"audio":for(var f=0;f<ne.length;f++)Rn(ne[f],u);break;case"source":Rn("error",u);break;case"img":case"image":case"link":Rn("error",u),Rn("load",u);break;case"form":Rn("reset",u),Rn("submit",u);break;case"details":Rn("toggle",u);break;case"input":xt(u,l),Rn("invalid",u),kr(r,"onChange");break;case"select":u._wrapperState={wasMultiple:!!l.multiple},Rn("invalid",u),kr(r,"onChange");break;case"textarea":or(u,l),Rn("invalid",u),kr(r,"onChange")}for(i in gr(c,l),f=null,l)l.hasOwnProperty(i)&&(s=l[i],"children"===i?"string"==typeof s?u.textContent!==s&&(f=["children",s]):"number"==typeof s&&u.textContent!==""+s&&(f=["children",""+s]):p.hasOwnProperty(i)&&null!=s&&kr(r,i));switch(c){case"input":Qe(u),St(u,l,!0);break;case"textarea":Qe(u),ar(u);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(u.onclick=wr)}r=f,n.updateQueue=r,null!==r&&Sa(t)}else{l=u,n=i,c=t,f=9===r.nodeType?r:r.ownerDocument,s===ur.html&&(s=sr(l)),s===ur.html?"script"===l?((l=f.createElement("div")).innerHTML="<script><\/script>",f=l.removeChild(l.firstChild)):"string"==typeof n.is?f=f.createElement(l,{is:n.is}):(f=f.createElement(l),"select"===l&&(l=f,n.multiple?l.multiple=!0:n.size&&(l.size=n.size))):f=f.createElementNS(s,l),(l=f)[I]=c,l[R]=n,Ta(n=l,t,!1,!1),c=n;var d=r,h=br(u,i);switch(u){case"iframe":case"object":case"embed":Rn("load",c),r=i;break;case"video":case"audio":for(r=0;r<ne.length;r++)Rn(ne[r],c);r=i;break;case"source":Rn("error",c),r=i;break;case"img":case"image":case"link":Rn("error",c),Rn("load",c),r=i;break;case"form":Rn("reset",c),Rn("submit",c),r=i;break;case"details":Rn("toggle",c),r=i;break;case"input":xt(c,i),r=_t(c,i),Rn("invalid",c),kr(d,"onChange");break;case"option":r=tr(c,i);break;case"select":c._wrapperState={wasMultiple:!!i.multiple},r=o({},i,{value:void 0}),Rn("invalid",c),kr(d,"onChange");break;case"textarea":or(c,i),r=rr(c,i),Rn("invalid",c),kr(d,"onChange");break;default:r=i}gr(u,r),l=void 0,f=u,s=c;var v=r;for(l in v)if(v.hasOwnProperty(l)){var y=v[l];"style"===l?yr(s,y):"dangerouslySetInnerHTML"===l?null!=(y=y?y.__html:void 0)&&fr(s,y):"children"===l?"string"==typeof y?("textarea"!==f||""!==y)&&dr(s,y):"number"==typeof y&&dr(s,""+y):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(p.hasOwnProperty(l)?null!=y&&kr(d,l):null!=y&&kt(s,l,y,h))}switch(u){case"input":Qe(c),St(c,i,!1);break;case"textarea":Qe(c),ar(c);break;case"option":null!=i.value&&c.setAttribute("value",""+wt(i.value));break;case"select":r=c,c=i,r.multiple=!!c.multiple,null!=(l=c.value)?nr(r,!!c.multiple,l,!1):null!=c.defaultValue&&nr(r,!!c.multiple,c.defaultValue,!0);break;default:"function"==typeof r.onClick&&(c.onclick=wr)}Or(u,i)&&Sa(t),t.stateNode=n}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw a(Error(166));break;case 6:if(n&&null!=t.stateNode)Ca(n,t,n.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw a(Error(166));n=ai(ii.current),ai(ri.current),sa(t)?(r=t.stateNode,n=t.memoizedProps,r[I]=t,r.nodeValue!==n&&Sa(t)):(r=t,(n=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[I]=t,r.stateNode=n)}break;case 11:break;case 13:if(jr(hi),i=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}r=null!==i,i=!1,null===n?sa(t):(i=null!==(u=n.memoizedState),r||null===u||null!==(u=n.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=u,u.nextEffect=c):(t.firstEffect=t.lastEffect=u,u.nextEffect=null),u.effectTag=8)),r&&!i&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(hi.current&di)?lu===tu&&(lu=ru):lu!==tu&&lu!==ru||(lu=ou)),(r||i)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:si(),Aa(t);break;case 10:So(t);break;case 9:case 14:break;case 17:Br(t.type)&&Lr();break;case 18:break;case 19:if(jr(hi),null===(i=t.memoizedState))break;if(u=0!=(64&t.effectTag),null===(c=i.rendering)){if(u)ja(i,!1);else if(lu!==tu||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(c=vi(n))){for(t.effectTag|=64,ja(i,!1),null!==(n=c.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),t.firstEffect=t.lastEffect=null,n=t.child;null!==n;)u=r,(i=n).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(c=i.alternate)?(i.childExpirationTime=0,i.expirationTime=u,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=c.childExpirationTime,i.expirationTime=c.expirationTime,i.child=c.child,i.memoizedProps=c.memoizedProps,i.memoizedState=c.memoizedState,i.updateQueue=c.updateQueue,u=c.dependencies,i.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),n=n.sibling;Pr(hi,hi.current&fi|pi),t=t.child;break e}n=n.sibling}}else{if(!u)if(null!==(n=vi(c))){if(t.effectTag|=64,u=!0,ja(i,!0),null===i.tail&&"hidden"===i.tailMode){null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null);break}}else co()>i.tailExpiration&&1<r&&(t.effectTag|=64,u=!0,ja(i,!1),t.expirationTime=t.childExpirationTime=r-1);i.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=i.last)?r.sibling=c:t.child=c,i.last=c)}if(null!==i.tail){0===i.tailExpiration&&(i.tailExpiration=co()+500),r=i.tail,i.rendering=r,i.tail=r.sibling,i.lastEffect=t.lastEffect,r.sibling=null,n=hi.current,Pr(hi,n=u?n&fi|pi:n&fi),t=r;break e}break;case 20:break;default:throw a(Error(156))}t=null}if(r=su,1===cu||1!==r.childExpirationTime){for(n=0,i=r.child;null!==i;)(u=i.expirationTime)>n&&(n=u),(c=i.childExpirationTime)>n&&(n=c),i=i.sibling;r.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(1024&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=su.firstEffect),null!==su.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=su.firstEffect),e.lastEffect=su.lastEffect),1<su.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=su:e.firstEffect=su,e.lastEffect=su))}else{if(null!==(t=Pa(su)))return t.effectTag&=1023,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=1024)}if(null!==(t=su.sibling))return t;su=e}while(null!==su);return lu===tu&&(lu=iu),null}function Ku(e){var t=lo();return po(99,Wu.bind(null,e,t)),null!==_u&&ho(97,function(){return Ju(),null}),null}function Wu(e,t){if(Ju(),(au&(Za|eu))!==Ga)throw a(Error(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw a(Error(177));e.callbackNode=null,e.callbackExpirationTime=0;var o=n.expirationTime,i=n.childExpirationTime;if(o=i>o?i:o,e.firstPendingTime=o,o<e.lastPendingTime&&(e.lastPendingTime=o),e===uu&&(su=uu=null,cu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){i=au,au|=eu,Ya.current=null,_r=In;var u=Kn();if(Wn(u)){if("selectionStart"in u)var s={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(s=(s=u.ownerDocument)&&s.defaultView||window).getSelection&&s.getSelection();if(c&&0!==c.rangeCount){s=c.anchorNode;var l=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{s.nodeType,f.nodeType}catch(e){s=null;break e}var d=0,p=-1,h=-1,v=0,y=0,m=u,g=null;t:for(;;){for(var b;m!==s||0!==l&&3!==m.nodeType||(p=d+l),m!==f||0!==c&&3!==m.nodeType||(h=d+c),3===m.nodeType&&(d+=m.nodeValue.length),null!==(b=m.firstChild);)g=m,m=b;for(;;){if(m===u)break t;if(g===s&&++v===l&&(p=d),g===f&&++y===c&&(h=d),null!==(b=m.nextSibling))break;g=(m=g).parentNode}m=b}s=-1===p||-1===h?null:{start:p,end:h}}else s=null}s=s||{start:0,end:0}}else s=null;xr={focusedElem:u,selectionRange:s},In=!1,mu=o;do{try{for(;null!==mu;){if(0!=(256&mu.effectTag)){var k=mu.alternate;switch((u=mu).tag){case 0:case 11:case 15:Ma(mi,yi,u);break;case 1:if(256&u.effectTag&&null!==k){var w=k.memoizedProps,_=k.memoizedState,x=u.stateNode,O=x.getSnapshotBeforeUpdate(u.elementType===u.type?w:bo(u.type,w),_);x.__reactInternalSnapshotBeforeUpdate=O}break;case 3:case 5:case 6:case 4:case 17:break;default:throw a(Error(163))}}mu=mu.nextEffect}}catch(e){if(null===mu)throw a(Error(330));Yu(mu,e),mu=mu.nextEffect}}while(null!==mu);mu=o;do{try{for(k=t;null!==mu;){var E=mu.effectTag;if(16&E&&dr(mu.stateNode,""),128&E){var S=mu.alternate;if(null!==S){var T=S.ref;null!==T&&("function"==typeof T?T(null):T.current=null)}}switch(14&E){case 2:qa(mu),mu.effectTag&=-3;break;case 6:qa(mu),mu.effectTag&=-3,Va(mu.alternate,mu);break;case 4:Va(mu.alternate,mu);break;case 8:Ua(w=mu,k),w.return=null,w.child=null,w.memoizedState=null,w.updateQueue=null,w.dependencies=null;var A=w.alternate;null!==A&&(A.return=null,A.child=null,A.memoizedState=null,A.updateQueue=null,A.dependencies=null)}mu=mu.nextEffect}}catch(e){if(null===mu)throw a(Error(330));Yu(mu,e),mu=mu.nextEffect}}while(null!==mu);if(T=xr,S=Kn(),E=T.focusedElem,k=T.selectionRange,S!==E&&E&&E.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(E.ownerDocument.documentElement,E)){null!==k&&Wn(E)&&(S=k.start,void 0===(T=k.end)&&(T=S),"selectionStart"in E?(E.selectionStart=S,E.selectionEnd=Math.min(T,E.value.length)):(T=(S=E.ownerDocument||document)&&S.defaultView||window).getSelection&&(T=T.getSelection(),w=E.textContent.length,A=Math.min(k.start,w),k=void 0===k.end?A:Math.min(k.end,w),!T.extend&&A>k&&(w=k,k=A,A=w),w=Qn(E,A),_=Qn(E,k),w&&_&&(1!==T.rangeCount||T.anchorNode!==w.node||T.anchorOffset!==w.offset||T.focusNode!==_.node||T.focusOffset!==_.offset)&&((S=S.createRange()).setStart(w.node,w.offset),T.removeAllRanges(),A>k?(T.addRange(S),T.extend(_.node,_.offset)):(S.setEnd(_.node,_.offset),T.addRange(S))))),S=[];for(T=E;T=T.parentNode;)1===T.nodeType&&S.push({element:T,left:T.scrollLeft,top:T.scrollTop});for("function"==typeof E.focus&&E.focus(),E=0;E<S.length;E++)(T=S[E]).element.scrollLeft=T.left,T.element.scrollTop=T.top}xr=null,In=!!_r,_r=null,e.current=n,mu=o;do{try{for(E=r;null!==mu;){var N=mu.effectTag;if(36&N){var C=mu.alternate;switch(T=E,(S=mu).tag){case 0:case 11:case 15:Ma(ki,wi,S);break;case 1:var j=S.stateNode;if(4&S.effectTag)if(null===C)j.componentDidMount();else{var P=S.elementType===S.type?C.memoizedProps:bo(S.type,C.memoizedProps);j.componentDidUpdate(P,C.memoizedState,j.__reactInternalSnapshotBeforeUpdate)}var F=S.updateQueue;null!==F&&zo(0,F,j);break;case 3:var I=S.updateQueue;if(null!==I){if(A=null,null!==S.child)switch(S.child.tag){case 5:A=S.child.stateNode;break;case 1:A=S.child.stateNode}zo(0,I,A)}break;case 5:var R=S.stateNode;null===C&&4&S.effectTag&&(T=R,Or(S.type,S.memoizedProps)&&T.focus());break;case 6:case 4:case 12:break;case 13:case 19:case 17:case 20:break;default:throw a(Error(163))}}if(128&N){var D=mu.ref;if(null!==D){var M=mu.stateNode;switch(mu.tag){case 5:var B=M;break;default:B=M}"function"==typeof D?D(B):D.current=B}}512&N&&(wu=!0),mu=mu.nextEffect}}catch(e){if(null===mu)throw a(Error(330));Yu(mu,e),mu=mu.nextEffect}}while(null!==mu);mu=null,oo(),au=i}else e.current=n;if(wu)wu=!1,_u=e,Ou=r,xu=t;else for(mu=o;null!==mu;)t=mu.nextEffect,mu.nextEffect=null,mu=t;if(0!==(t=e.firstPendingTime)?Iu(e,N=go(N=Nu(),t),t):ku=null,"function"==typeof es&&es(n.stateNode,r),1073741823===t?e===Tu?Su++:(Su=0,Tu=e):Su=0,gu)throw gu=!1,e=bu,bu=null,e;return(au&Xa)!==Ga?null:(yo(),null)}function Ju(){if(null===_u)return!1;var e=_u,t=Ou,n=xu;return _u=null,Ou=0,xu=90,po(97<n?97:n,Hu.bind(null,e,t))}function Hu(e){if((au&(Za|eu))!==Ga)throw a(Error(331));var t=au;for(au|=eu,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:Ma(xi,yi,n),Ma(yi,_i,n)}}catch(t){if(null===e)throw a(Error(330));Yu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return au=t,yo(),!0}function $u(e,t,n){Ro(e,t=Wa(e,t=Fa(n,t),1073741823)),null!==(e=Fu(e,1073741823))&&Iu(e,99,1073741823)}function Yu(e,t){if(3===e.tag)$u(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){$u(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ku||!ku.has(r))){Ro(n,e=Ja(n,e=Fa(t,e),1073741823)),null!==(n=Fu(n,1073741823))&&Iu(n,99,1073741823);break}}n=n.return}}function Gu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),uu===e&&cu===n?lu===ou||lu===ru&&1073741823===fu&&co()-vu<yu?zu(e,cu):hu=!0:e.lastPendingTime<n||(0!==(t=e.pingTime)&&t<n||(e.pingTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),Iu(e,t=go(t=Nu(),n),n)))}function Xu(e,t){var n=e.stateNode;null!==n&&n.delete(t),n=go(n=Nu(),t=Cu(n,e,null)),null!==(e=Fu(e,t))&&Iu(e,n,t)}var Zu=void 0;Zu=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||Rr.current)fa=!0;else if(r<n){switch(fa=!1,t.tag){case 3:ka(t),ca();break;case 5:if(ci(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:Br(t.type)&&Vr(t);break;case 4:ui(t,t.stateNode.containerInfo);break;case 10:Eo(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?_a(e,t,n):(Pr(hi,hi.current&fi),null!==(t=Ea(e,t,n))?t.sibling:null);Pr(hi,hi.current&fi);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Oa(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),Pr(hi,hi.current),!r)return null}return Ea(e,t,n)}}else fa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=Mr(t,Ir.current),Ao(t,n),o=zi(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,qi(),Br(r)){var i=!0;Vr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&Qo(t,r,u,e),o.updater=Ko,t.stateNode=o,o._reactInternalFiber=t,$o(t,r,e,n),t=ba(null,t,r,!0,i,n)}else t.tag=0,da(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(o),t.type=o,i=t.tag=function(e){if("function"==typeof e)return os(e)?1:0;if(null!=e){if((e=e.$$typeof)===rt)return 11;if(e===at)return 14}return 2}(o),e=bo(o,e),i){case 0:t=ma(null,t,o,e,n);break;case 1:t=ga(null,t,o,e,n);break;case 11:t=pa(null,t,o,e,n);break;case 14:t=ha(null,t,o,bo(o.type,e),r,n);break;default:throw a(Error(306),o,"")}return t;case 0:return r=t.type,o=t.pendingProps,ma(e,t,r,o=t.elementType===r?o:bo(r,o),n);case 1:return r=t.type,o=t.pendingProps,ga(e,t,r,o=t.elementType===r?o:bo(r,o),n);case 3:if(ka(t),null===(r=t.updateQueue))throw a(Error(282));return o=null!==(o=t.memoizedState)?o.element:null,Lo(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(ca(),t=Ea(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(na=Ar(t.stateNode.containerInfo.firstChild),ta=t,o=ra=!0),o?(t.effectTag|=2,t.child=ti(t,null,r,n)):(da(e,t,r,n),ca()),t=t.child),t;case 5:return ci(t),null===e&&aa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,Er(r,o)?u=null:null!==i&&Er(r,i)&&(t.effectTag|=16),ya(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(da(e,t,u,n),t=t.child),t;case 6:return null===e&&aa(t),null;case 13:return _a(e,t,n);case 4:return ui(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ei(t,null,r,n):da(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,pa(e,t,r,o=t.elementType===r?o:bo(r,o),n);case 7:return da(e,t,t.pendingProps,n),t.child;case 8:case 12:return da(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,Eo(t,i=o.value),null!==u){var s=u.value;if(0===(i=tn(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(u.children===o.children&&!Rr.current){t=Ea(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var c=s.dependencies;if(null!==c){u=s.child;for(var l=c.firstContext;null!==l;){if(l.context===r&&0!=(l.observedBits&i)){1===s.tag&&((l=Fo(n,null)).tag=2,Ro(s,l)),s.expirationTime<n&&(s.expirationTime=n),null!==(l=s.alternate)&&l.expirationTime<n&&(l.expirationTime=n),To(s.return,n),c.expirationTime<n&&(c.expirationTime=n);break}l=l.next}}else u=10===s.tag&&s.type===t.type?null:s.child;if(null!==u)u.return=s;else for(u=s;null!==u;){if(u===t){u=null;break}if(null!==(s=u.sibling)){s.return=u.return,u=s;break}u=u.return}s=u}}da(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,Ao(t,n),r=r(o=No(o,i.unstable_observedBits)),t.effectTag|=1,da(e,t,r,n),t.child;case 14:return i=bo(o=t.type,t.pendingProps),ha(e,t,o,i=bo(o.type,i),r,n);case 15:return va(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:bo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Br(r)?(e=!0,Vr(t)):e=!1,Ao(t,n),Jo(t,r,o),$o(t,r,o,n),ba(null,t,r,!0,e,n);case 19:return Oa(e,t,n)}throw a(Error(156))};var es=null,ts=null;function ns(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function rs(e,t,n,r){return new ns(e,t,n,r)}function os(e){return!(!(e=e.prototype)||!e.isReactComponent)}function is(e,t){var n=e.alternate;return null===n?((n=rs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function as(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)os(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ge:return us(n.children,o,i,t);case nt:u=8,o|=7;break;case Xe:u=8,o|=1;break;case Ze:return(e=rs(12,n,t,8|o)).elementType=Ze,e.type=Ze,e.expirationTime=i,e;case ot:return(e=rs(13,n,t,o)).type=ot,e.elementType=ot,e.expirationTime=i,e;case it:return(e=rs(19,n,t,o)).elementType=it,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case et:u=10;break e;case tt:u=9;break e;case rt:u=11;break e;case at:u=14;break e;case ut:u=16,r=null;break e}throw a(Error(130),null==e?e:typeof e,"")}return(t=rs(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function us(e,t,n,r){return(e=rs(7,e,r,t)).expirationTime=n,e}function ss(e,t,n){return(e=rs(6,e,null,t)).expirationTime=n,e}function cs(e,t,n){return(t=rs(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ls(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=this.firstBatch=null,this.pingTime=this.lastPendingTime=this.firstPendingTime=this.callbackExpirationTime=0}function fs(e,t,n){return e=new ls(e,t,n),t=rs(3,null,null,2===t?7:1===t?3:0),e.current=t,t.stateNode=e}function ds(e,t,n,r,o,i){var u=t.current;e:if(n){t:{if(2!==an(n=n._reactInternalFiber)||1!==n.tag)throw a(Error(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(Br(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw a(Error(171))}if(1===n.tag){var c=n.type;if(Br(c)){n=Ur(n,c,s);break e}}n=s}else n=Fr;return null===t.context?t.context=n:t.pendingContext=n,t=i,(o=Fo(r,o)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),Ro(u,o),Pu(u,r),r}function ps(e,t,n,r){var o=t.current,i=Nu(),a=Uo.suspense;return ds(e,t,n,o=Cu(i,o,a),a,r)}function hs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function vs(e){var t=1073741821-25*(1+((1073741821-Nu()+500)/25|0));t<=ju&&--t,this._expirationTime=ju=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function ys(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function ms(e,t,n){this._internalRoot=fs(e,t,n)}function gs(e,t){this._internalRoot=fs(e,2,t)}function bs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ks(e,t,n,r,o){var i=n._reactRootContainer,a=void 0;if(i){if(a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=hs(a);u.call(e)}}ps(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ms(e,0,t)}(n,r),a=i._internalRoot,"function"==typeof o){var s=o;o=function(){var e=hs(a);s.call(e)}}Lu(function(){ps(t,a,e,o)})}return hs(a)}function ws(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!bs(t))throw a(Error(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ye,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Te=function(e,t,n){switch(t){case"input":if(Et(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=L(r);if(!o)throw a(Error(90));Ke(r),Et(r,o)}}}break;case"textarea":ir(e,n);break;case"select":null!=(t=n.value)&&nr(e,!!n.multiple,t,!1)}},vs.prototype.render=function(e){if(!this._defer)throw a(Error(250));this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new ys;return ds(e,t,null,n,null,r._onCommit),r},vs.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},vs.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(!this._defer||null===t)throw a(Error(251));if(this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;if(null===r)throw a(Error(251));r._next=o._next,this._next=t,e.firstBatch=this}if(this._defer=!1,t=n,(au&(Za|eu))!==Ga)throw a(Error(253));vo(qu.bind(null,e,t)),yo(),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},vs.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},ys.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ys.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)throw a(Error(191),n);n()}}},gs.prototype.render=ms.prototype.render=function(e,t){var n=this._internalRoot,r=new ys;return null!==(t=void 0===t?null:t)&&r.then(t),ps(e,n,null,r._onCommit),r},gs.prototype.unmount=ms.prototype.unmount=function(e){var t=this._internalRoot,n=new ys;return null!==(e=void 0===e?null:e)&&n.then(e),ps(null,t,null,n._onCommit),n},gs.prototype.createBatch=function(){var e=new vs(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Fe=Mu,Ie=Bu,Re=Du,De=function(e,t){var n=au;au|=2;try{return e(t)}finally{(au=n)===Ga&&yo()}};var _s,xs,Os={createPortal:ws,findDOMNode:function(e){if(null==e)e=null;else if(1!==e.nodeType){var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw a(Error(188));throw a(Error(268),Object.keys(e))}e=null===(e=sn(t))?null:e.stateNode}return e},hydrate:function(e,t,n){if(!bs(t))throw a(Error(200));return ks(null,e,t,!0,n)},render:function(e,t,n){if(!bs(t))throw a(Error(200));return ks(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!bs(n))throw a(Error(200));if(null==e||void 0===e._reactInternalFiber)throw a(Error(38));return ks(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!bs(e))throw a(Error(40));return!!e._reactRootContainer&&(Lu(function(){ks(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return ws.apply(void 0,arguments)},unstable_batchedUpdates:Mu,unstable_interactiveUpdates:function(e,t,n,r){return Du(),Bu(e,t,n,r)},unstable_discreteUpdates:Bu,unstable_flushDiscreteUpdates:Du,flushSync:function(e,t){if((au&(Za|eu))!==Ga)throw a(Error(187));var n=au;au|=1;try{return po(99,e.bind(null,t))}finally{au=n,yo()}},unstable_createRoot:function(e,t){if(!bs(e))throw a(Error(299),"unstable_createRoot");return new gs(e,null!=t&&!0===t.hydrate)},unstable_createSyncRoot:function(e,t){if(!bs(e))throw a(Error(299),"unstable_createRoot");return new ms(e,1,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=au;au|=1;try{po(99,e)}finally{(au=t)===Ga&&yo()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[M,B,L,j.injectEventPluginsByName,d,K,function(e){T(e,Q)},je,Pe,Ln,C,Ju,{current:!1}]}};xs=(_s={findFiberByHostInstance:D,bundleType:0,version:"16.9.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);es=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},ts=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},_s,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:We.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=sn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return xs?xs(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var Es={default:Os},Ss=Es&&Os||Es;e.exports=Ss.default||Ss},function(e,t,n){"use strict";e.exports=n(92)},function(e,t,n){"use strict";
/** @license React v0.15.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r=void 0,o=void 0,i=void 0,a=void 0,u=void 0;if(t.unstable_now=void 0,t.unstable_forceFrameRate=void 0,"undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,l=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(l,0),e}};t.unstable_now=function(){return Date.now()},r=function(e){null!==s?setTimeout(r,0,e):(s=e,setTimeout(l,0))},o=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,d=window.Date,p=window.setTimeout,h=window.clearTimeout,v=window.requestAnimationFrame,y=window.cancelAnimationFrame;"undefined"!=typeof console&&("function"!=typeof v&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof y&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),t.unstable_now="object"==typeof f&&"function"==typeof f.now?function(){return f.now()}:function(){return d.now()};var m=!1,g=null,b=-1,k=-1,w=33.33,_=-1,x=-1,O=0,E=!1;a=function(){return t.unstable_now()>=O},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):0<e?(w=Math.floor(1e3/e),E=!0):(w=33.33,E=!1)};var S=function(){if(null!==g){var e=t.unstable_now(),n=0<O-e;try{g(n,e)||(g=null)}catch(e){throw A.postMessage(null),e}}},T=new MessageChannel,A=T.port2;T.port1.onmessage=S;var N=function(e){if(null===g)x=_=-1,m=!1;else{m=!0,v(function(e){h(b),N(e)});var n=function(){O=t.unstable_now()+w/2,S(),b=p(n,3*w)};if(b=p(n,3*w),-1!==_&&.1<e-_){var r=e-_;!E&&-1!==x&&r<w&&x<w&&(8.33>(w=r<x?x:r)&&(w=8.33)),x=r}_=e,O=e+w,A.postMessage(null)}};r=function(e){g=e,m||(m=!0,v(function(e){N(e)}))},o=function(e,n){k=p(function(){e(t.unstable_now())},n)},i=function(){h(k),k=-1}}var C=null,j=null,P=null,F=3,I=!1,R=!1,D=!1;function M(e,t){var n=e.next;if(n===e)C=null;else{e===C&&(C=n);var r=e.previous;r.next=n,n.previous=r}e.next=e.previous=null,n=e.callback,r=F;var o=P;F=e.priorityLevel,P=e;try{var i=e.expirationTime<=t;switch(F){case 1:var a=n(i);break;case 2:case 3:case 4:a=n(i);break;case 5:a=n(i)}}catch(e){throw e}finally{F=r,P=o}if("function"==typeof a)if(t=e.expirationTime,e.callback=a,null===C)C=e.next=e.previous=e;else{a=null,i=C;do{if(t<=i.expirationTime){a=i;break}i=i.next}while(i!==C);null===a?a=C:a===C&&(C=e),(t=a.previous).next=a.previous=e,e.next=a,e.previous=t}}function B(e){if(null!==j&&j.startTime<=e)do{var t=j,n=t.next;if(t===n)j=null;else{j=n;var r=t.previous;r.next=n,n.previous=r}t.next=t.previous=null,U(t,t.expirationTime)}while(null!==j&&j.startTime<=e)}function L(e){D=!1,B(e),R||(null!==C?(R=!0,r(z)):null!==j&&o(L,j.startTime-e))}function z(e,n){R=!1,D&&(D=!1,i()),B(n),I=!0;try{if(e){if(null!==C)do{M(C,n),B(n=t.unstable_now())}while(null!==C&&!a())}else for(;null!==C&&C.expirationTime<=n;)M(C,n),B(n=t.unstable_now());return null!==C||(null!==j&&o(L,j.startTime-n),!1)}finally{I=!1}}function q(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}function U(e,t){if(null===C)C=e.next=e.previous=e;else{var n=null,r=C;do{if(t<r.expirationTime){n=r;break}r=r.next}while(r!==C);null===n?n=C:n===C&&(C=e),(t=n.previous).next=n.previous=e,e.next=n,e.previous=t}}var V=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=F;F=e;try{return t()}finally{F=n}},t.unstable_next=function(e){switch(F){case 1:case 2:case 3:var t=3;break;default:t=F}var n=F;F=t;try{return e()}finally{F=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var s=a.delay;s="number"==typeof s&&0<s?u+s:u,a="number"==typeof a.timeout?a.timeout:q(e)}else a=q(e),s=u;if(e={callback:n,priorityLevel:e,startTime:s,expirationTime:a=s+a,next:null,previous:null},s>u){if(a=s,null===j)j=e.next=e.previous=e;else{n=null;var c=j;do{if(a<c.startTime){n=c;break}c=c.next}while(c!==j);null===n?n=j:n===j&&(j=e),(a=n.previous).next=n.previous=e,e.next=n,e.previous=a}null===C&&j===e&&(D?i():D=!0,o(L,s-u))}else U(e,a),R||I||(R=!0,r(z));return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(e===t)e===C?C=null:e===j&&(j=null);else{e===C?C=t:e===j&&(j=t);var n=e.previous;n.next=t,t.previous=n}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var t=F;return function(){var n=F;F=t;try{return e.apply(this,arguments)}finally{F=n}}},t.unstable_getCurrentPriorityLevel=function(){return F},t.unstable_shouldYield=function(){var e=t.unstable_now();return B(e),null!==P&&null!==C&&C.startTime<=e&&C.expirationTime<P.expirationTime||a()},t.unstable_requestPaint=V,t.unstable_continueExecution=function(){R||I||(R=!0,r(z))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return C}},function(e,t,n){"use strict";var r=n(94);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.9.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,y=r?Symbol.for("react.memo"):60115,m=r?Symbol.for("react.lazy"):60116,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case s:case u:case h:return e;default:switch(e=e&&e.$$typeof){case l:case p:case c:return e;default:return t}}case m:case y:case i:return t}}}function w(e){return k(e)===d}t.typeOf=k,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=l,t.ContextProvider=c,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=m,t.Memo=y,t.Portal=i,t.Profiler=s,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===s||e===u||e===h||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===y||e.$$typeof===c||e.$$typeof===l||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b)},t.isAsyncMode=function(e){return w(e)||k(e)===f},t.isConcurrentMode=w,t.isContextConsumer=function(e){return k(e)===l},t.isContextProvider=function(e){return k(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return k(e)===p},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===m},t.isMemo=function(e){return k(e)===y},t.isPortal=function(e){return k(e)===i},t.isProfiler=function(e){return k(e)===s},t.isStrictMode=function(e){return k(e)===u},t.isSuspense=function(e){return k(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */e.exports=function(e){return null!=e&&"object"==typeof e&&!1===Array.isArray(e)}},function(e,t,n){"use strict";e.exports=function(e){function t(e){for(var t=0,n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){var n;function a(){if(a.enabled){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];var i=a,u=Number(new Date),s=u-(n||u);i.diff=s,i.prev=n,i.curr=u,n=u,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");var c=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,function(e,n){if("%%"===e)return e;c++;var o=r.formatters[n];if("function"==typeof o){var a=t[c];e=o.call(i,a),t.splice(c,1),c--}return e}),r.formatArgs.call(i,t),(i.log||r.log).apply(i,t)}}return a.namespace=e,a.enabled=r.enabled(e),a.useColors=r.useColors(),a.color=t(e),a.destroy=o,a.extend=i,"function"==typeof r.init&&r.init(a),r.instances.push(a),a}function o(){var e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){return r(this.namespace+(void 0===t?":":t)+e)}return r.debug=r,r.default=r,r.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},r.disable=function(){r.enable("")},r.enable=function(e){var t;r.save(e),r.names=[],r.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(t=0;t<o;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){var i=r.instances[t];i.enabled=r.enabled(i.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;var t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(61),Object.keys(e).forEach(function(t){r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},function(e,t,n){var r=n(100),o=n(131);e.exports=function(e,t){return r(e,t,function(t,n){return o(e,n)})}},function(e,t,n){var r=n(62),o=n(130),i=n(20);e.exports=function(e,t,n){for(var a=-1,u=t.length,s={};++a<u;){var c=t[a],l=r(e,c);n(l,c)&&o(s,i(c,e),l)}return s}},function(e,t,n){var r=n(16),o=n(32),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||(a.test(e)||!i.test(e)||null!=t&&e in Object(t))}},function(e,t,n){var r=n(25),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,u=r?r.toStringTag:void 0;e.exports=function(e){var t=i.call(e,u),n=e[u];try{e[u]=void 0;var r=!0}catch(e){}var o=a.call(e);return r&&(t?e[u]=n:delete e[u]),o}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var r=n(105),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,a=r(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(o,function(e,n,r,o){t.push(r?o.replace(i,"$1"):n||e)}),t});e.exports=a},function(e,t,n){var r=n(106),o=500;e.exports=function(e){var t=r(e,function(e){return n.size===o&&n.clear(),e}),n=t.cache;return t}},function(e,t,n){var r=n(64),o="Expected a function";function i(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(o);var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=e.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(i.Cache||r),n}i.Cache=r,e.exports=i},function(e,t,n){var r=n(108),o=n(34),i=n(42);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(e,t,n){var r=n(109),o=n(114),i=n(115),a=n(116),u=n(117);function s(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=i,s.prototype.has=a,s.prototype.set=u,e.exports=s},function(e,t,n){var r=n(33);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(e,t,n){var r=n(65),o=n(111),i=n(14),a=n(66),u=/^\[object .+?Constructor\]$/,s=Function.prototype,c=Object.prototype,l=s.toString,f=c.hasOwnProperty,d=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||o(e))&&(r(e)?d:u).test(a(e))}},function(e,t,n){var r,o=n(112),i=(r=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var r=n(13)["__core-js_shared__"];e.exports=r},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var r=n(33),o="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return n===o?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var r=n(33),o=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:o.call(t,e)}},function(e,t,n){var r=n(33),o="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?o:t,this}},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var r=n(35),o=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)}},function(e,t,n){var r=n(35);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var r=n(35);e.exports=function(e){return r(this.__data__,e)>-1}},function(e,t,n){var r=n(35);e.exports=function(e,t){var n=this.__data__,o=r(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this}},function(e,t,n){var r=n(36);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var r=n(36);e.exports=function(e){return r(this,e).get(e)}},function(e,t,n){var r=n(36);e.exports=function(e){return r(this,e).has(e)}},function(e,t,n){var r=n(36);e.exports=function(e,t){var n=r(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this}},function(e,t,n){var r=n(129);e.exports=function(e){return null==e?"":r(e)}},function(e,t,n){var r=n(25),o=n(68),i=n(16),a=n(32),u=1/0,s=r?r.prototype:void 0,c=s?s.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return o(t,e)+"";if(a(t))return c?c.call(t):"";var n=t+"";return"0"==n&&1/t==-u?"-0":n}},function(e,t,n){var r=n(43),o=n(20),i=n(44),a=n(14),u=n(37);e.exports=function(e,t,n,s){if(!a(e))return e;for(var c=-1,l=(t=o(t,e)).length,f=l-1,d=e;null!=d&&++c<l;){var p=u(t[c]),h=n;if(c!=f){var v=d[p];void 0===(h=s?s(v,p,d):void 0)&&(h=a(v)?v:i(t[c+1])?[]:{})}r(d,p,h),d=d[p]}return e}},function(e,t,n){var r=n(132),o=n(133);e.exports=function(e,t){return null!=e&&o(e,t,r)}},function(e,t){e.exports=function(e,t){return null!=e&&t in Object(e)}},function(e,t,n){var r=n(20),o=n(45),i=n(16),a=n(44),u=n(46),s=n(37);e.exports=function(e,t,n){for(var c=-1,l=(t=r(t,e)).length,f=!1;++c<l;){var d=s(t[c]);if(!(f=null!=e&&n(e,d)))break;e=e[d]}return f||++c!=l?f:!!(l=null==e?0:e.length)&&u(l)&&a(d,l)&&(i(e)||o(e))}},function(e,t,n){var r=n(21),o=n(17),i="[object Arguments]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(136);e.exports=function(e){return(null==e?0:e.length)?r(e,1):[]}},function(e,t,n){var r=n(47),o=n(137);e.exports=function e(t,n,i,a,u){var s=-1,c=t.length;for(i||(i=o),u||(u=[]);++s<c;){var l=t[s];n>0&&i(l)?n>1?e(l,n-1,i,a,u):r(u,l):a||(u[u.length]=l)}return u}},function(e,t,n){var r=n(25),o=n(45),i=n(16),a=r?r.isConcatSpreadable:void 0;e.exports=function(e){return i(e)||o(e)||!!(a&&e&&e[a])}},function(e,t,n){var r=n(139),o=Math.max;e.exports=function(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var i=arguments,a=-1,u=o(i.length-t,0),s=Array(u);++a<u;)s[a]=i[t+a];a=-1;for(var c=Array(t+1);++a<t;)c[a]=i[a];return c[t]=n(s),r(e,this,c)}}},function(e,t){e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},function(e,t,n){var r=n(141),o=n(144)(r);e.exports=o},function(e,t,n){var r=n(142),o=n(70),i=n(143),a=o?function(e,t){return o(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:i;e.exports=a},function(e,t){e.exports=function(e){return function(){return e}}},function(e,t){e.exports=function(e){return e}},function(e,t){var n=800,r=16,o=Date.now;e.exports=function(e){var t=0,i=0;return function(){var a=o(),u=r-(a-i);if(i=a,u>0){if(++t>=n)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}},function(e,t,n){var r=n(146),o=n(152),i=n(43),a=n(153),u=n(160),s=n(163),c=n(164),l=n(165),f=n(167),d=n(168),p=n(80),h=n(54),v=n(173),y=n(174),m=n(180),g=n(16),b=n(73),k=n(182),w=n(14),_=n(184),x=n(48),O=1,E=2,S=4,T="[object Arguments]",A="[object Function]",N="[object GeneratorFunction]",C="[object Object]",j={};j[T]=j["[object Array]"]=j["[object ArrayBuffer]"]=j["[object DataView]"]=j["[object Boolean]"]=j["[object Date]"]=j["[object Float32Array]"]=j["[object Float64Array]"]=j["[object Int8Array]"]=j["[object Int16Array]"]=j["[object Int32Array]"]=j["[object Map]"]=j["[object Number]"]=j[C]=j["[object RegExp]"]=j["[object Set]"]=j["[object String]"]=j["[object Symbol]"]=j["[object Uint8Array]"]=j["[object Uint8ClampedArray]"]=j["[object Uint16Array]"]=j["[object Uint32Array]"]=!0,j["[object Error]"]=j[A]=j["[object WeakMap]"]=!1,e.exports=function e(t,n,P,F,I,R){var D,M=n&O,B=n&E,L=n&S;if(P&&(D=I?P(t,F,I,R):P(t)),void 0!==D)return D;if(!w(t))return t;var z=g(t);if(z){if(D=v(t),!M)return c(t,D)}else{var q=h(t),U=q==A||q==N;if(b(t))return s(t,M);if(q==C||q==T||U&&!I){if(D=B||U?{}:m(t),!M)return B?f(t,u(D,t)):l(t,a(D,t))}else{if(!j[q])return I?t:{};D=y(t,q,M)}}R||(R=new r);var V=R.get(t);if(V)return V;R.set(t,D),_(t)?t.forEach(function(r){D.add(e(r,n,P,r,t,R))}):k(t)&&t.forEach(function(r,o){D.set(o,e(r,n,P,o,t,R))});var Q=L?B?p:d:B?keysIn:x,K=z?void 0:Q(t);return o(K||t,function(r,o){K&&(r=t[o=r]),i(D,o,e(r,n,P,o,t,R))}),D}},function(e,t,n){var r=n(34),o=n(147),i=n(148),a=n(149),u=n(150),s=n(151);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=a,c.prototype.has=u,c.prototype.set=s,e.exports=c},function(e,t,n){var r=n(34);e.exports=function(){this.__data__=new r,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var r=n(34),o=n(42),i=n(64),a=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var u=n.__data__;if(!o||u.length<a-1)return u.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(u)}return n.set(e,t),this.size=n.size,this}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}},function(e,t,n){var r=n(26),o=n(48);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},function(e,t){e.exports=function(){return!1}},function(e,t,n){var r=n(157),o=n(49),i=n(50),a=i&&i.isTypedArray,u=a?o(a):r;e.exports=u},function(e,t,n){var r=n(21),o=n(46),i=n(17),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&o(e.length)&&!!a[r(e)]}},function(e,t,n){var r=n(51),o=n(159),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var r=n(74)(Object.keys,Object);e.exports=r},function(e,t,n){var r=n(26),o=n(76);e.exports=function(e,t){return e&&r(t,o(t),e)}},function(e,t,n){var r=n(14),o=n(51),i=n(162),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=o(e),n=[];for(var u in e)("constructor"!=u||!t&&a.call(e,u))&&n.push(u);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){(function(e){var r=n(13),o=t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===o?r.Buffer:void 0,u=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=u?u(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(31)(e))},function(e,t){e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},function(e,t,n){var r=n(26),o=n(52);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t){e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}},function(e,t,n){var r=n(26),o=n(78);e.exports=function(e,t){return r(e,o(e),t)}},function(e,t,n){var r=n(79),o=n(52),i=n(48);e.exports=function(e){return r(e,i,o)}},function(e,t,n){var r=n(18)(n(13),"DataView");e.exports=r},function(e,t,n){var r=n(18)(n(13),"Promise");e.exports=r},function(e,t,n){var r=n(18)(n(13),"Set");e.exports=r},function(e,t,n){var r=n(18)(n(13),"WeakMap");e.exports=r},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,r=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(r.index=e.index,r.input=e.input),r}},function(e,t,n){var r=n(55),o=n(176),i=n(177),a=n(178),u=n(179),s="[object Boolean]",c="[object Date]",l="[object Map]",f="[object Number]",d="[object RegExp]",p="[object Set]",h="[object String]",v="[object Symbol]",y="[object ArrayBuffer]",m="[object DataView]",g="[object Float32Array]",b="[object Float64Array]",k="[object Int8Array]",w="[object Int16Array]",_="[object Int32Array]",x="[object Uint8Array]",O="[object Uint8ClampedArray]",E="[object Uint16Array]",S="[object Uint32Array]";e.exports=function(e,t,n){var T=e.constructor;switch(t){case y:return r(e);case s:case c:return new T(+e);case m:return o(e,n);case g:case b:case k:case w:case _:case x:case O:case E:case S:return u(e,n);case l:return new T;case f:case h:return new T(e);case d:return i(e);case p:return new T;case v:return a(e)}}},function(e,t,n){var r=n(13).Uint8Array;e.exports=r},function(e,t,n){var r=n(55);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var r=n(25),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;e.exports=function(e){return i?Object(i.call(e)):{}}},function(e,t,n){var r=n(55);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var r=n(181),o=n(53),i=n(51);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:r(o(e))}},function(e,t,n){var r=n(14),o=Object.create,i=function(){function e(){}return function(t){if(!r(t))return{};if(o)return o(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},function(e,t,n){var r=n(183),o=n(49),i=n(50),a=i&&i.isMap,u=a?o(a):r;e.exports=u},function(e,t,n){var r=n(54),o=n(17),i="[object Map]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(185),o=n(49),i=n(50),a=i&&i.isSet,u=a?o(a):r;e.exports=u},function(e,t,n){var r=n(54),o=n(17),i="[object Set]";e.exports=function(e){return o(e)&&r(e)==i}},function(e,t,n){var r=n(20),o=n(187),i=n(188),a=n(37);e.exports=function(e,t){return t=r(t,e),null==(e=i(e,t))||delete e[a(o(t))]}},function(e,t){e.exports=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}},function(e,t,n){var r=n(62),o=n(189);e.exports=function(e,t){return t.length<2?e:r(e,o(t,0,-1))}},function(e,t){e.exports=function(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var i=Array(o);++r<o;)i[r]=e[r+t];return i}},function(e,t,n){var r=n(191);e.exports=function(e){return r(e)?void 0:e}},function(e,t,n){var r=n(21),o=n(53),i=n(17),a="[object Object]",u=Function.prototype,s=Object.prototype,c=u.toString,l=s.hasOwnProperty,f=c.call(Object);e.exports=function(e){if(!i(e)||r(e)!=a)return!1;var t=o(e);if(null===t)return!0;var n=l.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&c.call(n)==f}},function(e,t,n){"use strict";e.exports=function(e){function t(e){for(var t=0,n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return r.colors[Math.abs(t)%r.colors.length]}function r(e){var n;function a(){if(a.enabled){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];var i=a,u=Number(new Date),s=u-(n||u);i.diff=s,i.prev=n,i.curr=u,n=u,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");var c=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,function(e,n){if("%%"===e)return e;c++;var o=r.formatters[n];if("function"==typeof o){var a=t[c];e=o.call(i,a),t.splice(c,1),c--}return e}),r.formatArgs.call(i,t),(i.log||r.log).apply(i,t)}}return a.namespace=e,a.enabled=r.enabled(e),a.useColors=r.useColors(),a.color=t(e),a.destroy=o,a.extend=i,"function"==typeof r.init&&r.init(a),r.instances.push(a),a}function o(){var e=r.instances.indexOf(this);return-1!==e&&(r.instances.splice(e,1),!0)}function i(e,t){return r(this.namespace+(void 0===t?":":t)+e)}return r.debug=r,r.default=r,r.coerce=function(e){if(e instanceof Error)return e.stack||e.message;return e},r.disable=function(){r.enable("")},r.enable=function(e){var t;r.save(e),r.names=[],r.skips=[];var n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(t=0;t<o;t++)n[t]&&("-"===(e=n[t].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")));for(t=0;t<r.instances.length;t++){var i=r.instances[t];i.enabled=r.enabled(i.namespace)}},r.enabled=function(e){if("*"===e[e.length-1])return!0;var t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=n(61),Object.keys(e).forEach(function(t){r[t]=e[t]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=t,r.enable(r.load()),r}},function(e,t){e.exports=function e(t){if(r(t))return t;if(r(t.ownerDocument))return t.ownerDocument;if(r(t.document))return t.document;if(t.parentNode)return e(t.parentNode);if(t.commonAncestorContainer)return e(t.commonAncestorContainer);if(t.startContainer)return e(t.startContainer);if(t.anchorNode)return e(t.anchorNode)};var n=9;function r(e){return e&&e.nodeType===n}},function(e,t){e.exports=!!document.attachEvent&&window!==document.parentWindow},function(e,t,n){var r=n(14),o=n(196),i=n(197),a="Expected a function",u=Math.max,s=Math.min;e.exports=function(e,t,n){var c,l,f,d,p,h,v=0,y=!1,m=!1,g=!0;if("function"!=typeof e)throw new TypeError(a);function b(t){var n=c,r=l;return c=l=void 0,v=t,d=e.apply(r,n)}function k(e){var n=e-h;return void 0===h||n>=t||n<0||m&&e-v>=f}function w(){var e=o();if(k(e))return _(e);p=setTimeout(w,function(e){var n=t-(e-h);return m?s(n,f-(e-v)):n}(e))}function _(e){return p=void 0,g&&c?b(e):(c=l=void 0,d)}function x(){var e=o(),n=k(e);if(c=arguments,l=this,h=e,n){if(void 0===p)return function(e){return v=e,p=setTimeout(w,t),y?b(e):d}(h);if(m)return clearTimeout(p),p=setTimeout(w,t),b(h)}return void 0===p&&(p=setTimeout(w,t)),d}return t=i(t)||0,r(n)&&(y=!!n.leading,f=(m="maxWait"in n)?u(i(n.maxWait)||0,t):f,g="trailing"in n?!!n.trailing:g),x.cancel=function(){void 0!==p&&clearTimeout(p),v=0,c=h=l=p=void 0},x.flush=function(){return void 0===p?d:_(o())},x}},function(e,t,n){var r=n(13);e.exports=function(){return r.Date.now()}},function(e,t,n){var r=n(14),o=n(32),i=NaN,a=/^\s+|\s+$/g,u=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,c=/^0o[0-7]+$/i,l=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return i;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(a,"");var n=s.test(e);return n||c.test(e)?l(e.slice(2),n?2:8):u.test(e)?i:+e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=function(){return"function"==typeof Symbol},a=function(e){return i()&&Boolean(Symbol[e])},u=function(e){return a(e)?Symbol[e]:"@@"+e};i()&&!a("observable")&&(Symbol.observable=Symbol("observable"));var s=u("iterator"),c=u("observable"),l=u("species");function f(e,t){var n=e[t];if(null!=n){if("function"!=typeof n)throw new TypeError(n+" is not a function");return n}}function d(e){var t=e.constructor;return void 0!==t&&null===(t=t[l])&&(t=void 0),void 0!==t?t:_}function p(e){return e instanceof _}function h(e){h.log?h.log(e):setTimeout(function(){throw e})}function v(e){Promise.resolve().then(function(){try{e()}catch(e){h(e)}})}function y(e){var t=e._cleanup;if(void 0!==t&&(e._cleanup=void 0,t))try{if("function"==typeof t)t();else{var n=f(t,"unsubscribe");n&&n.call(t)}}catch(e){h(e)}}function m(e){e._observer=void 0,e._queue=void 0,e._state="closed"}function g(e,t,n){e._state="running";var r=e._observer;try{var o=f(r,t);switch(t){case"next":o&&o.call(r,n);break;case"error":if(m(e),!o)throw n;o.call(r,n);break;case"complete":m(e),o&&o.call(r)}}catch(e){h(e)}"closed"===e._state?y(e):"running"===e._state&&(e._state="ready")}function b(e,t,n){if("closed"!==e._state){if("buffering"!==e._state)return"ready"!==e._state?(e._state="buffering",e._queue=[{type:t,value:n}],void v(function(){return function(e){var t=e._queue;if(t){e._queue=void 0,e._state="ready";for(var n=0;n<t.length&&(g(e,t[n].type,t[n].value),"closed"!==e._state);++n);}}(e)})):void g(e,t,n);e._queue.push({type:t,value:n})}}var k=function(){function e(t,n){o(this,e),this._cleanup=void 0,this._observer=t,this._queue=void 0,this._state="initializing";var r=new w(this);try{this._cleanup=n.call(void 0,r)}catch(e){r.error(e)}"initializing"===this._state&&(this._state="ready")}return r(e,[{key:"unsubscribe",value:function(){"closed"!==this._state&&(m(this),y(this))}},{key:"closed",get:function(){return"closed"===this._state}}]),e}(),w=function(){function e(t){o(this,e),this._subscription=t}return r(e,[{key:"next",value:function(e){b(this._subscription,"next",e)}},{key:"error",value:function(e){b(this._subscription,"error",e)}},{key:"complete",value:function(){b(this._subscription,"complete")}},{key:"closed",get:function(){return"closed"===this._subscription._state}}]),e}(),_=t.Observable=function(){function e(t){if(o(this,e),!(this instanceof e))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof t)throw new TypeError("Observable initializer must be a function");this._subscriber=t}return r(e,[{key:"subscribe",value:function(e){return"object"==typeof e&&null!==e||(e={next:e,error:arguments[1],complete:arguments[2]}),new k(e,this._subscriber)}},{key:"forEach",value:function(e){var t=this;return new Promise(function(n,r){if("function"==typeof e)var o=t.subscribe({next:function(t){try{e(t,i)}catch(e){r(e),o.unsubscribe()}},error:r,complete:n});else r(new TypeError(e+" is not a function"));function i(){o.unsubscribe(),n()}})}},{key:"map",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(d(this))(function(n){return t.subscribe({next:function(t){try{t=e(t)}catch(e){return n.error(e)}n.next(t)},error:function(e){n.error(e)},complete:function(){n.complete()}})})}},{key:"filter",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(d(this))(function(n){return t.subscribe({next:function(t){try{if(!e(t))return}catch(e){return n.error(e)}n.next(t)},error:function(e){n.error(e)},complete:function(){n.complete()}})})}},{key:"reduce",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var n=d(this),r=arguments.length>1,o=!1,i=arguments[1],a=i;return new n(function(n){return t.subscribe({next:function(t){var i=!o;if(o=!0,!i||r)try{a=e(a,t)}catch(e){return n.error(e)}else a=t},error:function(e){n.error(e)},complete:function(){if(!o&&!r)return n.error(new TypeError("Cannot reduce an empty sequence"));n.next(a),n.complete()}})})}},{key:"concat",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var o=d(this);return new o(function(t){var r=void 0,i=0;return function e(a){r=a.subscribe({next:function(e){t.next(e)},error:function(e){t.error(e)},complete:function(){i===n.length?(r=void 0,t.complete()):e(o.from(n[i++]))}})}(e),function(){r&&(r.unsubscribe(),r=void 0)}})}},{key:"flatMap",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var n=d(this);return new n(function(r){var o=[],i=t.subscribe({next:function(t){if(e)try{t=e(t)}catch(e){return r.error(e)}var i=n.from(t).subscribe({next:function(e){r.next(e)},error:function(e){r.error(e)},complete:function(){var e=o.indexOf(i);e>=0&&o.splice(e,1),a()}});o.push(i)},error:function(e){r.error(e)},complete:function(){a()}});function a(){i.closed&&0===o.length&&r.complete()}return function(){o.forEach(function(e){return e.unsubscribe()}),i.unsubscribe()}})}},{key:c,value:function(){return this}}],[{key:"from",value:function(t){var n="function"==typeof this?this:e;if(null==t)throw new TypeError(t+" is not an object");var r=f(t,c);if(r){var o=r.call(t);if(Object(o)!==o)throw new TypeError(o+" is not an object");return p(o)&&o.constructor===n?o:new n(function(e){return o.subscribe(e)})}if(a("iterator")&&(r=f(t,s)))return new n(function(e){v(function(){if(!e.closed){var n=!0,o=!1,i=void 0;try{for(var a,u=r.call(t)[Symbol.iterator]();!(n=(a=u.next()).done);n=!0){var s=a.value;if(e.next(s),e.closed)return}}catch(e){o=!0,i=e}finally{try{!n&&u.return&&u.return()}finally{if(o)throw i}}e.complete()}})});if(Array.isArray(t))return new n(function(e){v(function(){if(!e.closed){for(var n=0;n<t.length;++n)if(e.next(t[n]),e.closed)return;e.complete()}})});throw new TypeError(t+" is not observable")}},{key:"of",value:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];var o="function"==typeof this?this:e;return new o(function(e){v(function(){if(!e.closed){for(var t=0;t<n.length;++t)if(e.next(n[t]),e.closed)return;e.complete()}})})}},{key:l,get:function(){return this}}]),e}();i()&&Object.defineProperty(_,Symbol("extensions"),{value:{symbol:c,hostReportError:h},configurable:!0})},function(e,t,n){"use strict";n.r(t);var r=n(2),o=n(3),i=n(82),a=n(88),u=n.n(a).a,s=n(5);!function(e){function t(t,n){var r=e.call(this,t)||this;return r.link=n,r}Object(r.c)(t,e)}(Error);function c(e){return e.request.length<=1}function l(e){return new u(function(t){t.error(e)})}function f(e,t){var n=Object(r.a)({},e);return Object.defineProperty(t,"setContext",{enumerable:!1,value:function(e){n="function"==typeof e?Object(r.a)({},n,e(n)):Object(r.a)({},n,e)}}),Object.defineProperty(t,"getContext",{enumerable:!1,value:function(){return Object(r.a)({},n)}}),Object.defineProperty(t,"toKey",{enumerable:!1,value:function(){return function(e){var t=e.query,n=e.variables,r=e.operationName;return JSON.stringify([r,t,n])}(t)}}),t}function d(e,t){return t?t(e):u.of()}function p(e){return"function"==typeof e?new m(e):e}function h(){return new m(function(){return u.of()})}function v(e){return 0===e.length?h():e.map(p).reduce(function(e,t){return e.concat(t)})}function y(e,t,n){var r=p(t),o=p(n||new m(d));return c(r)&&c(o)?new m(function(t){return e(t)?r.request(t)||u.of():o.request(t)||u.of()}):new m(function(t,n){return e(t)?r.request(t,n)||u.of():o.request(t,n)||u.of()})}var m=function(){function e(e){e&&(this.request=e)}return e.prototype.split=function(t,n,r){return this.concat(y(t,n,r||new e(d)))},e.prototype.concat=function(e){return function(e,t){var n=p(e);if(c(n))return n;var r=p(t);return c(r)?new m(function(e){return n.request(e,function(e){return r.request(e)||u.of()})||u.of()}):new m(function(e,t){return n.request(e,function(e){return r.request(e,t)||u.of()})||u.of()})}(this,e)},e.prototype.request=function(e,t){throw new s.a(1)},e.empty=h,e.from=v,e.split=y,e.execute=g,e}();function g(e,t){return e.request(f(t.context,function(e){var t={variables:e.variables||{},extensions:e.extensions||{},operationName:e.operationName,query:e.query};return t.operationName||(t.operationName="string"!=typeof t.query?Object(o.n)(t.query):""),t}(function(e){for(var t=["query","operationName","variables","extensions","context"],n=0,r=Object.keys(e);n<r.length;n++){var o=r[n];if(t.indexOf(o)<0)throw new s.a(2)}return e}(t))))||u.of()}var b,k=n(27),w=n(12);function _(e){return e<7}!function(e){e[e.loading=1]="loading",e[e.setVariables=2]="setVariables",e[e.fetchMore=3]="fetchMore",e[e.refetch=4]="refetch",e[e.poll=6]="poll",e[e.ready=7]="ready",e[e.error=8]="error"}(b||(b={}));var x=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(r.c)(t,e),t.prototype[k.a]=function(){return this},t.prototype["@@observable"]=function(){return this},t}(u);function O(e){return Array.isArray(e)&&e.length>0}var E,S=function(e){var t="";return O(e.graphQLErrors)&&e.graphQLErrors.forEach(function(e){var n=e?e.message:"Error message not found.";t+="GraphQL error: "+n+"\n"}),e.networkError&&(t+="Network error: "+e.networkError.message+"\n"),t=t.replace(/\n$/,"")},T=function(e){function t(n){var r=n.graphQLErrors,o=n.networkError,i=n.errorMessage,a=n.extraInfo,u=e.call(this,i)||this;return u.graphQLErrors=r||[],u.networkError=o||null,u.message=i||S(u),u.extraInfo=a,u.__proto__=t.prototype,u}return Object(r.c)(t,e),t}(Error);!function(e){e[e.normal=1]="normal",e[e.refetch=2]="refetch",e[e.poll=3]="poll"}(E||(E={}));var A=function(e){function t(t){var n=t.queryManager,r=t.options,i=t.shouldSubscribe,a=void 0===i||i,u=e.call(this,function(e){return u.onSubscribe(e)})||this;u.observers=new Set,u.subscriptions=new Set,u.isTornDown=!1,u.options=r,u.variables=r.variables||{},u.queryId=n.generateQueryId(),u.shouldSubscribe=a;var s=Object(o.m)(r.query);return u.queryName=s&&s.name&&s.name.value,u.queryManager=n,u}return Object(r.c)(t,e),t.prototype.result=function(){var e=this;return new Promise(function(t,n){var r={next:function(n){t(n),e.observers.delete(r),e.observers.size||e.queryManager.removeQuery(e.queryId),setTimeout(function(){o.unsubscribe()},0)},error:n},o=e.subscribe(r)})},t.prototype.currentResult=function(){var e=this.getCurrentResult();return void 0===e.data&&(e.data={}),e},t.prototype.getCurrentResult=function(){if(this.isTornDown){var e=this.lastResult;return{data:!this.lastError&&e&&e.data||void 0,error:this.lastError,loading:!1,networkStatus:b.error}}var t,n,o,i=this.queryManager.getCurrentQueryResult(this),a=i.data,u=i.partial,s=this.queryManager.queryStore.get(this.queryId),c=this.options.fetchPolicy,l="network-only"===c||"no-cache"===c;if(s){var f=s.networkStatus;if(n=s,void 0===(o=this.options.errorPolicy)&&(o="none"),n&&(n.networkError||"none"===o&&O(n.graphQLErrors)))return{data:void 0,loading:!1,networkStatus:f,error:new T({graphQLErrors:s.graphQLErrors,networkError:s.networkError})};s.variables&&(this.options.variables=Object(r.a)({},this.options.variables,s.variables),this.variables=this.options.variables),t={data:a,loading:_(f),networkStatus:f},s.graphQLErrors&&"all"===this.options.errorPolicy&&(t.errors=s.graphQLErrors)}else{var d=l||u&&"cache-only"!==c;t={data:a,loading:d,networkStatus:d?b.loading:b.ready}}return u||this.updateLastResult(Object(r.a)({},t,{stale:!1})),Object(r.a)({},t,{partial:u})},t.prototype.isDifferentFromLastResult=function(e){var t=this.lastResultSnapshot;return!(t&&e&&t.networkStatus===e.networkStatus&&t.stale===e.stale&&Object(i.a)(t.data,e.data))},t.prototype.getLastResult=function(){return this.lastResult},t.prototype.getLastError=function(){return this.lastError},t.prototype.resetLastResults=function(){delete this.lastResult,delete this.lastResultSnapshot,delete this.lastError,this.isTornDown=!1},t.prototype.resetQueryStoreErrors=function(){var e=this.queryManager.queryStore.get(this.queryId);e&&(e.networkError=null,e.graphQLErrors=[])},t.prototype.refetch=function(e){var t=this.options.fetchPolicy;return"cache-only"===t?Promise.reject(new s.a(3)):("no-cache"!==t&&"cache-and-network"!==t&&(t="network-only"),Object(i.a)(this.variables,e)||(this.variables=Object(r.a)({},this.variables,e)),Object(i.a)(this.options.variables,this.variables)||(this.options.variables=Object(r.a)({},this.options.variables,this.variables)),this.queryManager.fetchQuery(this.queryId,Object(r.a)({},this.options,{fetchPolicy:t}),E.refetch))},t.prototype.fetchMore=function(e){var t=this;Object(s.b)(e.updateQuery,4);var n=Object(r.a)({},e.query?e:Object(r.a)({},this.options,e,{variables:Object(r.a)({},this.variables,e.variables)}),{fetchPolicy:"network-only"}),o=this.queryManager.generateQueryId();return this.queryManager.fetchQuery(o,n,E.normal,this.queryId).then(function(r){return t.updateQuery(function(t){return e.updateQuery(t,{fetchMoreResult:r.data,variables:n.variables})}),t.queryManager.stopQuery(o),r},function(e){throw t.queryManager.stopQuery(o),e})},t.prototype.subscribeToMore=function(e){var t=this,n=this.queryManager.startGraphQLSubscription({query:e.document,variables:e.variables}).subscribe({next:function(n){var r=e.updateQuery;r&&t.updateQuery(function(e,t){var o=t.variables;return r(e,{subscriptionData:n,variables:o})})},error:function(t){e.onError&&e.onError(t)}});return this.subscriptions.add(n),function(){t.subscriptions.delete(n)&&n.unsubscribe()}},t.prototype.setOptions=function(e){var t=this.options.fetchPolicy;this.options=Object(r.a)({},this.options,e),e.pollInterval?this.startPolling(e.pollInterval):0===e.pollInterval&&this.stopPolling();var n=e.fetchPolicy;return this.setVariables(this.options.variables,t!==n&&("cache-only"===t||"standby"===t||"network-only"===n),e.fetchResults)},t.prototype.setVariables=function(e,t,n){return void 0===t&&(t=!1),void 0===n&&(n=!0),this.isTornDown=!1,e=e||this.variables,!t&&Object(i.a)(e,this.variables)?this.observers.size&&n?this.result():Promise.resolve():(this.variables=this.options.variables=e,this.observers.size?this.queryManager.fetchQuery(this.queryId,this.options):Promise.resolve())},t.prototype.updateQuery=function(e){var t=this.queryManager,n=t.getQueryWithPreviousResult(this.queryId),r=n.previousResult,i=n.variables,a=n.document,u=Object(o.I)(function(){return e(r,{variables:i})});u&&(t.dataStore.markUpdateQueryResult(a,i,u),t.broadcastQueries())},t.prototype.stopPolling=function(){this.queryManager.stopPollingQuery(this.queryId),this.options.pollInterval=void 0},t.prototype.startPolling=function(e){j(this),this.options.pollInterval=e,this.queryManager.startPollingQuery(this.options,this.queryId)},t.prototype.updateLastResult=function(e){var t=this.lastResult;return this.lastResult=e,this.lastResultSnapshot=this.queryManager.assumeImmutableResults?e:Object(o.f)(e),t},t.prototype.onSubscribe=function(e){var t=this;try{var n=e._subscription._observer;n&&!n.error&&(n.error=N)}catch(e){}var r=!this.observers.size;return this.observers.add(e),e.next&&this.lastResult&&e.next(this.lastResult),e.error&&this.lastError&&e.error(this.lastError),r&&this.setUpQuery(),function(){t.observers.delete(e)&&!t.observers.size&&t.tearDownQuery()}},t.prototype.setUpQuery=function(){var e=this,t=this.queryManager,n=this.queryId;this.shouldSubscribe&&t.addObservableQuery(n,this),this.options.pollInterval&&(j(this),t.startPollingQuery(this.options,n));var o=function(t){e.updateLastResult(Object(r.a)({},e.lastResult,{errors:t.graphQLErrors,networkStatus:b.error,loading:!1})),C(e.observers,"error",e.lastError=t)};t.observeQuery(n,this.options,{next:function(n){if(e.lastError||e.isDifferentFromLastResult(n)){var r=e.updateLastResult(n),o=e.options,a=o.query,u=o.variables,s=o.fetchPolicy;t.transform(a).hasClientExports?t.getLocalState().addExportedVariables(a,u).then(function(o){var u=e.variables;e.variables=e.options.variables=o,!n.loading&&r&&"cache-only"!==s&&t.transform(a).serverQuery&&!Object(i.a)(u,o)?e.refetch():C(e.observers,"next",n)}):C(e.observers,"next",n)}},error:o}).catch(o)},t.prototype.tearDownQuery=function(){var e=this.queryManager;this.isTornDown=!0,e.stopPollingQuery(this.queryId),this.subscriptions.forEach(function(e){return e.unsubscribe()}),this.subscriptions.clear(),e.removeObservableQuery(this.queryId),e.stopQuery(this.queryId),this.observers.clear()},t}(x);function N(e){}function C(e,t,n){var r=[];e.forEach(function(e){return e[t]&&r.push(e)}),r.forEach(function(e){return e[t](n)})}function j(e){var t=e.options.fetchPolicy;Object(s.b)("cache-first"!==t&&"cache-only"!==t,5)}var P=function(){function e(){this.store={}}return e.prototype.getStore=function(){return this.store},e.prototype.get=function(e){return this.store[e]},e.prototype.initMutation=function(e,t,n){this.store[e]={mutation:t,variables:n||{},loading:!0,error:null}},e.prototype.markMutationError=function(e,t){var n=this.store[e];n&&(n.loading=!1,n.error=t)},e.prototype.markMutationResult=function(e){var t=this.store[e];t&&(t.loading=!1,t.error=null)},e.prototype.reset=function(){this.store={}},e}(),F=function(){function e(){this.store={}}return e.prototype.getStore=function(){return this.store},e.prototype.get=function(e){return this.store[e]},e.prototype.initQuery=function(e){var t=this.store[e.queryId];Object(s.b)(!t||t.document===e.document||Object(i.a)(t.document,e.document),19);var n,r=!1,o=null;e.storePreviousVariables&&t&&t.networkStatus!==b.loading&&(Object(i.a)(t.variables,e.variables)||(r=!0,o=t.variables)),n=r?b.setVariables:e.isPoll?b.poll:e.isRefetch?b.refetch:b.loading;var a=[];t&&t.graphQLErrors&&(a=t.graphQLErrors),this.store[e.queryId]={document:e.document,variables:e.variables,previousVariables:o,networkError:null,graphQLErrors:a,networkStatus:n,metadata:e.metadata},"string"==typeof e.fetchMoreForQueryId&&this.store[e.fetchMoreForQueryId]&&(this.store[e.fetchMoreForQueryId].networkStatus=b.fetchMore)},e.prototype.markQueryResult=function(e,t,n){this.store&&this.store[e]&&(this.store[e].networkError=null,this.store[e].graphQLErrors=O(t.errors)?t.errors:[],this.store[e].previousVariables=null,this.store[e].networkStatus=b.ready,"string"==typeof n&&this.store[n]&&(this.store[n].networkStatus=b.ready))},e.prototype.markQueryError=function(e,t,n){this.store&&this.store[e]&&(this.store[e].networkError=t,this.store[e].networkStatus=b.error,"string"==typeof n&&this.markQueryResultClient(n,!0))},e.prototype.markQueryResultClient=function(e,t){var n=this.store&&this.store[e];n&&(n.networkError=null,n.previousVariables=null,t&&(n.networkStatus=b.ready))},e.prototype.stopQuery=function(e){delete this.store[e]},e.prototype.reset=function(e){var t=this;Object.keys(this.store).forEach(function(n){e.indexOf(n)<0?t.stopQuery(n):t.store[n].networkStatus=b.loading})},e}();var I=function(){function e(e){var t=e.cache,n=e.client,r=e.resolvers,o=e.fragmentMatcher;this.cache=t,n&&(this.client=n),r&&this.addResolvers(r),o&&this.setFragmentMatcher(o)}return e.prototype.addResolvers=function(e){var t=this;this.resolvers=this.resolvers||{},Array.isArray(e)?e.forEach(function(e){t.resolvers=Object(o.A)(t.resolvers,e)}):this.resolvers=Object(o.A)(this.resolvers,e)},e.prototype.setResolvers=function(e){this.resolvers={},this.addResolvers(e)},e.prototype.getResolvers=function(){return this.resolvers||{}},e.prototype.runResolvers=function(e){var t=e.document,n=e.remoteResult,o=e.context,i=e.variables,a=e.onlyRunForcedResolvers,u=void 0!==a&&a;return Object(r.b)(this,void 0,void 0,function(){return Object(r.d)(this,function(e){return t?[2,this.resolveDocument(t,n.data,o,i,this.fragmentMatcher,u).then(function(e){return Object(r.a)({},n,{data:e.result})})]:[2,n]})})},e.prototype.setFragmentMatcher=function(e){this.fragmentMatcher=e},e.prototype.getFragmentMatcher=function(){return this.fragmentMatcher},e.prototype.clientQuery=function(e){return Object(o.s)(["client"],e)&&this.resolvers?e:null},e.prototype.serverQuery=function(e){return this.resolvers?Object(o.C)(e):e},e.prototype.prepareContext=function(e){void 0===e&&(e={});var t=this.cache;return Object(r.a)({},e,{cache:t,getCacheKey:function(e){if(t.config)return t.config.dataIdFromObject(e);Object(s.b)(!1,6)}})},e.prototype.addExportedVariables=function(e,t,n){return void 0===t&&(t={}),void 0===n&&(n={}),Object(r.b)(this,void 0,void 0,function(){return Object(r.d)(this,function(o){return e?[2,this.resolveDocument(e,this.buildRootValueFromCache(e,t)||{},this.prepareContext(n),t).then(function(e){return Object(r.a)({},t,e.exportedVariables)})]:[2,Object(r.a)({},t)]})})},e.prototype.shouldForceResolvers=function(e){var t=!1;return Object(w.b)(e,{Directive:{enter:function(e){if("client"===e.name.value&&e.arguments&&(t=e.arguments.some(function(e){return"always"===e.name.value&&"BooleanValue"===e.value.kind&&!0===e.value.value})))return w.a}}}),t},e.prototype.buildRootValueFromCache=function(e,t){return this.cache.diff({query:Object(o.d)(e),variables:t,returnPartialData:!0,optimistic:!1}).result},e.prototype.resolveDocument=function(e,t,n,i,a,u){return void 0===n&&(n={}),void 0===i&&(i={}),void 0===a&&(a=function(){return!0}),void 0===u&&(u=!1),Object(r.b)(this,void 0,void 0,function(){var s,c,l,f,d,p,h,v,y;return Object(r.d)(this,function(m){var g;return s=Object(o.l)(e),c=Object(o.j)(e),l=Object(o.g)(c),f=s.operation,d=f?(g=f).charAt(0).toUpperCase()+g.slice(1):"Query",h=(p=this).cache,v=p.client,y={fragmentMap:l,context:Object(r.a)({},n,{cache:h,client:v}),variables:i,fragmentMatcher:a,defaultOperationType:d,exportedVariables:{},onlyRunForcedResolvers:u},[2,this.resolveSelectionSet(s.selectionSet,t,y).then(function(e){return{result:e,exportedVariables:y.exportedVariables}})]})})},e.prototype.resolveSelectionSet=function(e,t,n){return Object(r.b)(this,void 0,void 0,function(){var i,a,u,c,l,f=this;return Object(r.d)(this,function(d){return i=n.fragmentMap,a=n.context,u=n.variables,c=[t],l=function(e){return Object(r.b)(f,void 0,void 0,function(){var l,f;return Object(r.d)(this,function(r){return Object(o.F)(e,u)?Object(o.t)(e)?[2,this.resolveField(e,t,n).then(function(t){var n;void 0!==t&&c.push(((n={})[Object(o.E)(e)]=t,n))})]:(Object(o.v)(e)?l=e:(l=i[e.name.value],Object(s.b)(l,7)),l&&l.typeCondition&&(f=l.typeCondition.name.value,n.fragmentMatcher(t,f,a))?[2,this.resolveSelectionSet(l.selectionSet,t,n).then(function(e){c.push(e)})]:[2]):[2]})})},[2,Promise.all(e.selections.map(l)).then(function(){return Object(o.B)(c)})]})})},e.prototype.resolveField=function(e,t,n){return Object(r.b)(this,void 0,void 0,function(){var i,a,u,s,c,l,f,d,p,h=this;return Object(r.d)(this,function(r){return i=n.variables,a=e.name.value,u=Object(o.E)(e),s=a!==u,c=t[u]||t[a],l=Promise.resolve(c),n.onlyRunForcedResolvers&&!this.shouldForceResolvers(e)||(f=t.__typename||n.defaultOperationType,(d=this.resolvers&&this.resolvers[f])&&(p=d[s?a:u])&&(l=Promise.resolve(p(t,Object(o.b)(e,i),n.context,{field:e})))),[2,l.then(function(t){return void 0===t&&(t=c),e.directives&&e.directives.forEach(function(e){"export"===e.name.value&&e.arguments&&e.arguments.forEach(function(e){"as"===e.name.value&&"StringValue"===e.value.kind&&(n.exportedVariables[e.value.value]=t)})}),e.selectionSet?null==t?t:Array.isArray(t)?h.resolveSubSelectedArray(e,t,n):e.selectionSet?h.resolveSelectionSet(e.selectionSet,t,n):void 0:t})]})})},e.prototype.resolveSubSelectedArray=function(e,t,n){var r=this;return Promise.all(t.map(function(t){return null===t?null:Array.isArray(t)?r.resolveSubSelectedArray(e,t,n):e.selectionSet?r.resolveSelectionSet(e.selectionSet,t,n):void 0}))},e}();function R(e){var t=new Set,n=null;return new x(function(r){return t.add(r),n=n||e.subscribe({next:function(e){t.forEach(function(t){return t.next&&t.next(e)})},error:function(e){t.forEach(function(t){return t.error&&t.error(e)})},complete:function(){t.forEach(function(e){return e.complete&&e.complete()})}}),function(){t.delete(r)&&!t.size&&n&&(n.unsubscribe(),n=null)}})}var D=Object.prototype.hasOwnProperty,M=function(){function e(e){var t=e.link,n=e.queryDeduplication,r=void 0!==n&&n,i=e.store,a=e.onBroadcast,u=void 0===a?function(){}:a,s=e.ssrMode,c=void 0!==s&&s,l=e.clientAwareness,f=void 0===l?{}:l,d=e.localState,p=e.assumeImmutableResults;this.mutationStore=new P,this.queryStore=new F,this.clientAwareness={},this.idCounter=1,this.queries=new Map,this.fetchQueryRejectFns=new Map,this.transformCache=new(o.e?WeakMap:Map),this.inFlightLinkObservables=new Map,this.pollingInfoByQueryId=new Map,this.link=t,this.queryDeduplication=r,this.dataStore=i,this.onBroadcast=u,this.clientAwareness=f,this.localState=d||new I({cache:i.getCache()}),this.ssrMode=c,this.assumeImmutableResults=!!p}return e.prototype.stop=function(){var e=this;this.queries.forEach(function(t,n){e.stopQueryNoBroadcast(n)}),this.fetchQueryRejectFns.forEach(function(e){e(new s.a(8))})},e.prototype.mutate=function(e){var t=e.mutation,n=e.variables,i=e.optimisticResponse,a=e.updateQueries,u=e.refetchQueries,c=void 0===u?[]:u,l=e.awaitRefetchQueries,f=void 0!==l&&l,d=e.update,p=e.errorPolicy,h=void 0===p?"none":p,v=e.fetchPolicy,y=e.context,m=void 0===y?{}:y;return Object(r.b)(this,void 0,void 0,function(){var e,u,l,p=this;return Object(r.d)(this,function(y){switch(y.label){case 0:return Object(s.b)(t,9),Object(s.b)(!v||"no-cache"===v,10),e=this.generateQueryId(),t=this.transform(t).document,this.setQuery(e,function(){return{document:t}}),n=this.getVariables(t,n),this.transform(t).hasClientExports?[4,this.localState.addExportedVariables(t,n,m)]:[3,2];case 1:n=y.sent(),y.label=2;case 2:return u=function(){var e={};return a&&p.queries.forEach(function(t,n){var r=t.observableQuery;if(r){var o=r.queryName;o&&D.call(a,o)&&(e[n]={updater:a[o],query:p.queryStore.get(n)})}}),e},this.mutationStore.initMutation(e,t,n),this.dataStore.markMutationInit({mutationId:e,document:t,variables:n,updateQueries:u(),update:d,optimisticResponse:i}),this.broadcastQueries(),l=this,[2,new Promise(function(a,s){var p,y;l.getObservableFromLink(t,Object(r.a)({},m,{optimisticResponse:i}),n,!1).subscribe({next:function(r){Object(o.q)(r)&&"none"===h?y=new T({graphQLErrors:r.errors}):(l.mutationStore.markMutationResult(e),"no-cache"!==v&&l.dataStore.markMutationResult({mutationId:e,result:r,document:t,variables:n,updateQueries:u(),update:d}),p=r)},error:function(t){l.mutationStore.markMutationError(e,t),l.dataStore.markMutationComplete({mutationId:e,optimisticResponse:i}),l.broadcastQueries(),l.setQuery(e,function(){return{document:null}}),s(new T({networkError:t}))},complete:function(){if(y&&l.mutationStore.markMutationError(e,y),l.dataStore.markMutationComplete({mutationId:e,optimisticResponse:i}),l.broadcastQueries(),y)s(y);else{"function"==typeof c&&(c=c(p));var t=[];O(c)&&c.forEach(function(e){if("string"==typeof e)l.queries.forEach(function(n){var r=n.observableQuery;r&&r.queryName===e&&t.push(r.refetch())});else{var n={query:e.query,variables:e.variables,fetchPolicy:"network-only"};e.context&&(n.context=e.context),t.push(l.query(n))}}),Promise.all(f?t:[]).then(function(){l.setQuery(e,function(){return{document:null}}),"ignore"===h&&p&&Object(o.q)(p)&&delete p.errors,a(p)})}}})})]}})})},e.prototype.fetchQuery=function(e,t,n,i){return Object(r.b)(this,void 0,void 0,function(){var a,u,s,c,l,f,d,p,h,v,y,m,g,b,k,w,_,x,O=this;return Object(r.d)(this,function(S){switch(S.label){case 0:return a=t.metadata,u=void 0===a?null:a,s=t.fetchPolicy,c=void 0===s?"cache-first":s,l=t.context,f=void 0===l?{}:l,d=this.transform(t.query).document,p=this.getVariables(d,t.variables),this.transform(d).hasClientExports?[4,this.localState.addExportedVariables(d,p,f)]:[3,2];case 1:p=S.sent(),S.label=2;case 2:if(t=Object(r.a)({},t,{variables:p}),y=v="network-only"===c||"no-cache"===c,v||(m=this.dataStore.getCache().diff({query:d,variables:p,returnPartialData:!0,optimistic:!1}),g=m.complete,b=m.result,y=!g||"cache-and-network"===c,h=b),k=y&&"cache-only"!==c&&"standby"!==c,Object(o.s)(["live"],d)&&(k=!0),w=this.idCounter++,_="no-cache"!==c?this.updateQueryWatch(e,d,t):void 0,this.setQuery(e,function(){return{document:d,lastRequestId:w,invalidated:!0,cancel:_}}),this.invalidate(i),this.queryStore.initQuery({queryId:e,document:d,storePreviousVariables:k,variables:p,isPoll:n===E.poll,isRefetch:n===E.refetch,metadata:u,fetchMoreForQueryId:i}),this.broadcastQueries(),k){if(x=this.fetchRequest({requestId:w,queryId:e,document:d,options:t,fetchMoreForQueryId:i}).catch(function(t){throw t.hasOwnProperty("graphQLErrors")?t:(w>=O.getQuery(e).lastRequestId&&(O.queryStore.markQueryError(e,t,i),O.invalidate(e),O.invalidate(i),O.broadcastQueries()),new T({networkError:t}))}),"cache-and-network"!==c)return[2,x];x.catch(function(){})}return this.queryStore.markQueryResultClient(e,!k),this.invalidate(e),this.invalidate(i),this.transform(d).hasForcedResolvers?[2,this.localState.runResolvers({document:d,remoteResult:{data:h},context:f,variables:p,onlyRunForcedResolvers:!0}).then(function(n){return O.markQueryResult(e,n,t,i),O.broadcastQueries(),n})]:(this.broadcastQueries(),[2,{data:h}])}})})},e.prototype.markQueryResult=function(e,t,n,r){var o=n.fetchPolicy,i=n.variables,a=n.errorPolicy;"no-cache"===o?this.setQuery(e,function(){return{newData:{result:t.data,complete:!0}}}):this.dataStore.markQueryResult(t,this.getQuery(e).document,i,r,"ignore"===a||"all"===a)},e.prototype.queryListenerForObserver=function(e,t,n){var r=this;function o(e,t){if(n[e])try{n[e](t)}catch(e){}}return function(n,i){if(r.invalidate(e,!1),n){var a=r.getQuery(e),u=a.observableQuery,s=a.document,c=u?u.options.fetchPolicy:t.fetchPolicy;if("standby"!==c){var l=_(n.networkStatus),f=u&&u.getLastResult(),d=!(!f||f.networkStatus===n.networkStatus),p=t.returnPartialData||!i&&n.previousVariables||d&&t.notifyOnNetworkStatusChange||"cache-only"===c||"cache-and-network"===c;if(!l||p){var h=O(n.graphQLErrors),v=u&&u.options.errorPolicy||t.errorPolicy||"none";if("none"===v&&h||n.networkError)return o("error",new T({graphQLErrors:n.graphQLErrors,networkError:n.networkError}));try{var y=void 0,m=void 0;if(i)"no-cache"!==c&&"network-only"!==c&&r.setQuery(e,function(){return{newData:null}}),y=i.result,m=!i.complete;else{var g=u&&u.getLastError(),b="none"!==v&&(g&&g.graphQLErrors)!==n.graphQLErrors;if(f&&f.data&&!b)y=f.data,m=!1;else{var k=r.dataStore.getCache().diff({query:s,variables:n.previousVariables||n.variables,returnPartialData:!0,optimistic:!0});y=k.result,m=!k.complete}}var w=m&&!(t.returnPartialData||"cache-only"===c),x={data:w?f&&f.data:y,loading:l,networkStatus:n.networkStatus,stale:w};"all"===v&&h&&(x.errors=n.graphQLErrors),o("next",x)}catch(e){o("error",new T({networkError:e}))}}}}}},e.prototype.transform=function(e){var t=this.transformCache;if(!t.has(e)){var n=this.dataStore.getCache(),r=n.transformDocument(e),i=Object(o.D)(n.transformForLink(r)),a=this.localState.clientQuery(r),u=this.localState.serverQuery(i),s={document:r,hasClientExports:Object(o.r)(r),hasForcedResolvers:this.localState.shouldForceResolvers(r),clientQuery:a,serverQuery:u,defaultVars:Object(o.h)(Object(o.m)(r))},c=function(e){e&&!t.has(e)&&t.set(e,s)};c(e),c(r),c(a),c(u)}return t.get(e)},e.prototype.getVariables=function(e,t){return Object(r.a)({},this.transform(e).defaultVars,t)},e.prototype.watchQuery=function(e,t){void 0===t&&(t=!0),Object(s.b)("standby"!==e.fetchPolicy,11),e.variables=this.getVariables(e.query,e.variables),void 0===e.notifyOnNetworkStatusChange&&(e.notifyOnNetworkStatusChange=!1);var n=Object(r.a)({},e);return new A({queryManager:this,options:n,shouldSubscribe:t})},e.prototype.query=function(e){var t=this;return Object(s.b)(e.query,12),Object(s.b)("Document"===e.query.kind,13),Object(s.b)(!e.returnPartialData,14),Object(s.b)(!e.pollInterval,15),new Promise(function(n,r){var o=t.watchQuery(e,!1);t.fetchQueryRejectFns.set("query:"+o.queryId,r),o.result().then(n,r).then(function(){return t.fetchQueryRejectFns.delete("query:"+o.queryId)})})},e.prototype.generateQueryId=function(){return String(this.idCounter++)},e.prototype.stopQueryInStore=function(e){this.stopQueryInStoreNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryInStoreNoBroadcast=function(e){this.stopPollingQuery(e),this.queryStore.stopQuery(e),this.invalidate(e)},e.prototype.addQueryListener=function(e,t){this.setQuery(e,function(e){return e.listeners.add(t),{invalidated:!1}})},e.prototype.updateQueryWatch=function(e,t,n){var r=this,o=this.getQuery(e).cancel;o&&o();return this.dataStore.getCache().watch({query:t,variables:n.variables,optimistic:!0,previousResult:function(){var t=null,n=r.getQuery(e).observableQuery;if(n){var o=n.getLastResult();o&&(t=o.data)}return t},callback:function(t){r.setQuery(e,function(){return{invalidated:!0,newData:t}})}})},e.prototype.addObservableQuery=function(e,t){this.setQuery(e,function(){return{observableQuery:t}})},e.prototype.removeObservableQuery=function(e){var t=this.getQuery(e).cancel;this.setQuery(e,function(){return{observableQuery:null}}),t&&t()},e.prototype.clearStore=function(){this.fetchQueryRejectFns.forEach(function(e){e(new s.a(16))});var e=[];return this.queries.forEach(function(t,n){t.observableQuery&&e.push(n)}),this.queryStore.reset(e),this.mutationStore.reset(),this.dataStore.reset()},e.prototype.resetStore=function(){var e=this;return this.clearStore().then(function(){return e.reFetchObservableQueries()})},e.prototype.reFetchObservableQueries=function(e){var t=this;void 0===e&&(e=!1);var n=[];return this.queries.forEach(function(r,o){var i=r.observableQuery;if(i){var a=i.options.fetchPolicy;i.resetLastResults(),"cache-only"===a||!e&&"standby"===a||n.push(i.refetch()),t.setQuery(o,function(){return{newData:null}}),t.invalidate(o)}}),this.broadcastQueries(),Promise.all(n)},e.prototype.observeQuery=function(e,t,n){return this.addQueryListener(e,this.queryListenerForObserver(e,t,n)),this.fetchQuery(e,t)},e.prototype.startQuery=function(e,t,n){return this.addQueryListener(e,n),this.fetchQuery(e,t).catch(function(){}),e},e.prototype.startGraphQLSubscription=function(e){var t=this,n=e.query,r=e.fetchPolicy,i=e.variables;n=this.transform(n).document,i=this.getVariables(n,i);var a=function(e){return t.getObservableFromLink(n,{},e,!1).map(function(i){if(r&&"no-cache"===r||(t.dataStore.markSubscriptionResult(i,n,e),t.broadcastQueries()),Object(o.q)(i))throw new T({graphQLErrors:i.errors});return i})};if(this.transform(n).hasClientExports){var u=this.localState.addExportedVariables(n,i).then(a);return new x(function(e){var t=null;return u.then(function(n){return t=n.subscribe(e)},e.error),function(){return t&&t.unsubscribe()}})}return a(i)},e.prototype.stopQuery=function(e){this.stopQueryNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryNoBroadcast=function(e){this.stopQueryInStoreNoBroadcast(e),this.removeQuery(e)},e.prototype.removeQuery=function(e){this.fetchQueryRejectFns.delete("query:"+e),this.fetchQueryRejectFns.delete("fetchRequest:"+e),this.getQuery(e).subscriptions.forEach(function(e){return e.unsubscribe()}),this.queries.delete(e)},e.prototype.getCurrentQueryResult=function(e,t){void 0===t&&(t=!0);var n=e.options,r=n.variables,o=n.query,i=n.fetchPolicy,a=n.returnPartialData,u=e.getLastResult(),s=this.getQuery(e.queryId).newData;if(s&&s.complete)return{data:s.result,partial:!1};if("no-cache"===i||"network-only"===i)return{data:void 0,partial:!1};var c=this.dataStore.getCache().diff({query:o,variables:r,previousResult:u?u.data:void 0,returnPartialData:!0,optimistic:t}),l=c.result,f=c.complete;return{data:f||a?l:void 0,partial:!f}},e.prototype.getQueryWithPreviousResult=function(e){var t;if("string"==typeof e){var n=this.getQuery(e).observableQuery;Object(s.b)(n,17),t=n}else t=e;var r=t.options,o=r.variables,i=r.query;return{previousResult:this.getCurrentQueryResult(t,!1).data,variables:o,document:i}},e.prototype.broadcastQueries=function(){var e=this;this.onBroadcast(),this.queries.forEach(function(t,n){t.invalidated&&t.listeners.forEach(function(r){r&&r(e.queryStore.get(n),t.newData)})})},e.prototype.getLocalState=function(){return this.localState},e.prototype.getObservableFromLink=function(e,t,n,i){var a,u=this;void 0===i&&(i=this.queryDeduplication);var s=this.transform(e).serverQuery;if(s){var c=this.inFlightLinkObservables,l=this.link,f={query:s,variables:n,operationName:Object(o.n)(s)||void 0,context:this.prepareContext(Object(r.a)({},t,{forceFetch:!i}))};if(t=f.context,i){var d=c.get(s)||new Map;c.set(s,d);var p=JSON.stringify(n);if(!(a=d.get(p))){d.set(p,a=R(g(l,f)));var h=function(){d.delete(p),d.size||c.delete(s),v.unsubscribe()},v=a.subscribe({next:h,error:h,complete:h})}}else a=R(g(l,f))}else a=x.of({data:{}}),t=this.prepareContext(t);var y=this.transform(e).clientQuery;return y&&(a=function(e,t){return new x(function(n){var r=n.next,o=n.error,i=n.complete,a=0,u=!1,s={next:function(e){++a,new Promise(function(n){n(t(e))}).then(function(e){--a,r&&r.call(n,e),u&&s.complete()},function(e){--a,o&&o.call(n,e)})},error:function(e){o&&o.call(n,e)},complete:function(){u=!0,a||i&&i.call(n)}},c=e.subscribe(s);return function(){return c.unsubscribe()}})}(a,function(e){return u.localState.runResolvers({document:y,remoteResult:e,context:t,variables:n})})),a},e.prototype.fetchRequest=function(e){var t,n,r=this,o=e.requestId,i=e.queryId,a=e.document,u=e.options,s=e.fetchMoreForQueryId,c=u.variables,l=u.errorPolicy,f=void 0===l?"none":l,d=u.fetchPolicy;return new Promise(function(e,l){var p=r.getObservableFromLink(a,u.context,c),h="fetchRequest:"+i;r.fetchQueryRejectFns.set(h,l);var v=function(){r.fetchQueryRejectFns.delete(h),r.setQuery(i,function(e){e.subscriptions.delete(y)})},y=p.map(function(e){if(o>=r.getQuery(i).lastRequestId&&(r.markQueryResult(i,e,u,s),r.queryStore.markQueryResult(i,e,s),r.invalidate(i),r.invalidate(s),r.broadcastQueries()),"none"===f&&O(e.errors))return l(new T({graphQLErrors:e.errors}));if("all"===f&&(n=e.errors),s||"no-cache"===d)t=e.data;else{var p=r.dataStore.getCache().diff({variables:c,query:a,optimistic:!1,returnPartialData:!0}),h=p.result;(p.complete||u.returnPartialData)&&(t=h)}}).subscribe({error:function(e){v(),l(e)},complete:function(){v(),e({data:t,errors:n,loading:!1,networkStatus:b.ready,stale:!1})}});r.setQuery(i,function(e){e.subscriptions.add(y)})})},e.prototype.getQuery=function(e){return this.queries.get(e)||{listeners:new Set,invalidated:!1,document:null,newData:null,lastRequestId:1,observableQuery:null,subscriptions:new Set}},e.prototype.setQuery=function(e,t){var n=this.getQuery(e),o=Object(r.a)({},n,t(n));this.queries.set(e,o)},e.prototype.invalidate=function(e,t){void 0===t&&(t=!0),e&&this.setQuery(e,function(){return{invalidated:t}})},e.prototype.prepareContext=function(e){void 0===e&&(e={});var t=this.localState.prepareContext(e);return Object(r.a)({},t,{clientAwareness:this.clientAwareness})},e.prototype.checkInFlight=function(e){var t=this.queryStore.get(e);return t&&t.networkStatus!==b.ready&&t.networkStatus!==b.error},e.prototype.startPollingQuery=function(e,t,n){var o=this,i=e.pollInterval;if(Object(s.b)(i,18),!this.ssrMode){var a=this.pollingInfoByQueryId.get(t);a||this.pollingInfoByQueryId.set(t,a={}),a.interval=i,a.options=Object(r.a)({},e,{fetchPolicy:"network-only"});var u=function(){var e=o.pollingInfoByQueryId.get(t);e&&(o.checkInFlight(t)?c():o.fetchQuery(t,e.options,E.poll).then(c,c))},c=function(){var e=o.pollingInfoByQueryId.get(t);e&&(clearTimeout(e.timeout),e.timeout=setTimeout(u,e.interval))};n&&this.addQueryListener(t,n),c()}return t},e.prototype.stopPollingQuery=function(e){this.pollingInfoByQueryId.delete(e)},e}(),B=function(){function e(e){this.cache=e}return e.prototype.getCache=function(){return this.cache},e.prototype.markQueryResult=function(e,t,n,r,i){void 0===i&&(i=!1);var a=!Object(o.q)(e);i&&Object(o.q)(e)&&e.data&&(a=!0),!r&&a&&this.cache.write({result:e.data,dataId:"ROOT_QUERY",query:t,variables:n})},e.prototype.markSubscriptionResult=function(e,t,n){Object(o.q)(e)||this.cache.write({result:e.data,dataId:"ROOT_SUBSCRIPTION",query:t,variables:n})},e.prototype.markMutationInit=function(e){var t,n=this;e.optimisticResponse&&(t="function"==typeof e.optimisticResponse?e.optimisticResponse(e.variables):e.optimisticResponse,this.cache.recordOptimisticTransaction(function(r){var o=n.cache;n.cache=r;try{n.markMutationResult({mutationId:e.mutationId,result:{data:t},document:e.document,variables:e.variables,updateQueries:e.updateQueries,update:e.update})}finally{n.cache=o}},e.mutationId))},e.prototype.markMutationResult=function(e){var t=this;if(!Object(o.q)(e.result)){var n=[{result:e.result.data,dataId:"ROOT_MUTATION",query:e.document,variables:e.variables}],r=e.updateQueries;r&&Object.keys(r).forEach(function(i){var a=r[i],u=a.query,s=a.updater,c=t.cache.diff({query:u.document,variables:u.variables,returnPartialData:!0,optimistic:!1}),l=c.result;if(c.complete){var f=Object(o.I)(function(){return s(l,{mutationResult:e.result,queryName:Object(o.n)(u.document)||void 0,queryVariables:u.variables})});f&&n.push({result:f,dataId:"ROOT_QUERY",query:u.document,variables:u.variables})}}),this.cache.performTransaction(function(t){n.forEach(function(e){return t.write(e)});var r=e.update;r&&Object(o.I)(function(){return r(t,e.result)})})}},e.prototype.markMutationComplete=function(e){var t=e.mutationId;e.optimisticResponse&&this.cache.removeOptimistic(t)},e.prototype.markUpdateQueryResult=function(e,t,n){this.cache.write({result:n,dataId:"ROOT_QUERY",variables:t,query:e})},e.prototype.reset=function(){return this.cache.reset()},e}(),L="2.6.4",z=function(){function e(e){var t=this;this.defaultOptions={},this.resetStoreCallbacks=[],this.clearStoreCallbacks=[];var n=e.cache,r=e.ssrMode,o=void 0!==r&&r,i=e.ssrForceFetchDelay,a=void 0===i?0:i,u=e.connectToDevTools,c=e.queryDeduplication,l=void 0===c||c,f=e.defaultOptions,d=e.assumeImmutableResults,p=void 0!==d&&d,h=e.resolvers,v=e.typeDefs,y=e.fragmentMatcher,g=e.name,b=e.version,k=e.link;if(!k&&h&&(k=m.empty()),!k||!n)throw new s.a(1);this.link=k,this.cache=n,this.store=new B(n),this.disableNetworkFetches=o||a>0,this.queryDeduplication=l,this.defaultOptions=f||{},this.typeDefs=v,a&&setTimeout(function(){return t.disableNetworkFetches=!1},a),this.watchQuery=this.watchQuery.bind(this),this.query=this.query.bind(this),this.mutate=this.mutate.bind(this),this.resetStore=this.resetStore.bind(this),this.reFetchObservableQueries=this.reFetchObservableQueries.bind(this);void 0!==u&&(u&&"undefined"!=typeof window)&&(window.__APOLLO_CLIENT__=this),this.version=L,this.localState=new I({cache:n,client:this,resolvers:h,fragmentMatcher:y}),this.queryManager=new M({link:this.link,store:this.store,queryDeduplication:l,ssrMode:o,clientAwareness:{name:g,version:b},localState:this.localState,assumeImmutableResults:p,onBroadcast:function(){t.devToolsHookCb&&t.devToolsHookCb({action:{},state:{queries:t.queryManager.queryStore.getStore(),mutations:t.queryManager.mutationStore.getStore()},dataWithOptimisticResults:t.cache.extract(!0)})}})}return e.prototype.stop=function(){this.queryManager.stop()},e.prototype.watchQuery=function(e){return this.defaultOptions.watchQuery&&(e=Object(r.a)({},this.defaultOptions.watchQuery,e)),!this.disableNetworkFetches||"network-only"!==e.fetchPolicy&&"cache-and-network"!==e.fetchPolicy||(e=Object(r.a)({},e,{fetchPolicy:"cache-first"})),this.queryManager.watchQuery(e)},e.prototype.query=function(e){return this.defaultOptions.query&&(e=Object(r.a)({},this.defaultOptions.query,e)),Object(s.b)("cache-and-network"!==e.fetchPolicy,2),this.disableNetworkFetches&&"network-only"===e.fetchPolicy&&(e=Object(r.a)({},e,{fetchPolicy:"cache-first"})),this.queryManager.query(e)},e.prototype.mutate=function(e){return this.defaultOptions.mutate&&(e=Object(r.a)({},this.defaultOptions.mutate,e)),this.queryManager.mutate(e)},e.prototype.subscribe=function(e){return this.queryManager.startGraphQLSubscription(e)},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!1),this.cache.readQuery(e,t)},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!1),this.cache.readFragment(e,t)},e.prototype.writeQuery=function(e){var t=this.cache.writeQuery(e);return this.queryManager.broadcastQueries(),t},e.prototype.writeFragment=function(e){var t=this.cache.writeFragment(e);return this.queryManager.broadcastQueries(),t},e.prototype.writeData=function(e){var t=this.cache.writeData(e);return this.queryManager.broadcastQueries(),t},e.prototype.__actionHookForDevTools=function(e){this.devToolsHookCb=e},e.prototype.__requestRaw=function(e){return g(this.link,e)},e.prototype.initQueryManager=function(){return this.queryManager},e.prototype.resetStore=function(){var e=this;return Promise.resolve().then(function(){return e.queryManager.clearStore()}).then(function(){return Promise.all(e.resetStoreCallbacks.map(function(e){return e()}))}).then(function(){return e.reFetchObservableQueries()})},e.prototype.clearStore=function(){var e=this;return Promise.resolve().then(function(){return e.queryManager.clearStore()}).then(function(){return Promise.all(e.clearStoreCallbacks.map(function(e){return e()}))})},e.prototype.onResetStore=function(e){var t=this;return this.resetStoreCallbacks.push(e),function(){t.resetStoreCallbacks=t.resetStoreCallbacks.filter(function(t){return t!==e})}},e.prototype.onClearStore=function(e){var t=this;return this.clearStoreCallbacks.push(e),function(){t.clearStoreCallbacks=t.clearStoreCallbacks.filter(function(t){return t!==e})}},e.prototype.reFetchObservableQueries=function(e){return this.queryManager.reFetchObservableQueries(e)},e.prototype.extract=function(e){return this.cache.extract(e)},e.prototype.restore=function(e){return this.cache.restore(e)},e.prototype.addResolvers=function(e){this.localState.addResolvers(e)},e.prototype.setResolvers=function(e){this.localState.setResolvers(e)},e.prototype.getResolvers=function(){return this.localState.getResolvers()},e.prototype.setLocalStateFragmentMatcher=function(e){this.localState.setFragmentMatcher(e)},e}();function q(e){return{kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GeneratedClientQuery"},selectionSet:U(e)}]}}function U(e){if("number"==typeof e||"boolean"==typeof e||"string"==typeof e||null==e)return null;if(Array.isArray(e))return U(e[0]);var t=[];return Object.keys(e).forEach(function(n){var r={kind:"Field",name:{kind:"Name",value:n},selectionSet:U(e[n])||void 0};t.push(r)}),{kind:"SelectionSet",selections:t}}var V,Q={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:null,variableDefinitions:null,directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:null,name:{kind:"Name",value:"__typename"},arguments:[],directives:[],selectionSet:null}]}}]},K=function(){function e(){}return e.prototype.transformDocument=function(e){return e},e.prototype.transformForLink=function(e){return e},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!1),this.read({query:e.query,variables:e.variables,optimistic:t})},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!1),this.read({query:Object(o.k)(e.fragment,e.fragmentName),variables:e.variables,rootId:e.id,optimistic:t})},e.prototype.writeQuery=function(e){this.write({dataId:"ROOT_QUERY",result:e.data,query:e.query,variables:e.variables})},e.prototype.writeFragment=function(e){this.write({dataId:e.id,result:e.data,variables:e.variables,query:Object(o.k)(e.fragment,e.fragmentName)})},e.prototype.writeData=function(e){var t,n,r=e.id,o=e.data;if(void 0!==r){var i=null;try{i=this.read({rootId:r,optimistic:!1,query:Q})}catch(e){}var a=i&&i.__typename||"__ClientData",u=Object.assign({__typename:a},o);this.writeFragment({id:r,fragment:(t=u,n=a,{kind:"Document",definitions:[{kind:"FragmentDefinition",typeCondition:{kind:"NamedType",name:{kind:"Name",value:n||"__FakeType"}},name:{kind:"Name",value:"GeneratedClientQuery"},selectionSet:U(t)}]}),data:u})}else this.writeQuery({query:q(o),data:o})},e}();V||(V={});var W=null,J={},H=1,$=Array,Y=$["@wry/context:Slot"]||function(){var e=function(){function e(){this.id=["slot",H++,Date.now(),Math.random().toString(36).slice(2)].join(":")}return e.prototype.hasValue=function(){for(var e=W;e;e=e.parent)if(this.id in e.slots){var t=e.slots[this.id];if(t===J)break;return e!==W&&(W.slots[this.id]=t),!0}return W&&(W.slots[this.id]=J),!1},e.prototype.getValue=function(){if(this.hasValue())return W.slots[this.id]},e.prototype.withValue=function(e,t,n,r){var o,i=((o={__proto__:null})[this.id]=e,o),a=W;W={parent:a,slots:i};try{return t.apply(r,n)}finally{W=a}},e.bind=function(e){var t=W;return function(){var n=W;try{return W=t,e.apply(this,arguments)}finally{W=n}}},e.noContext=function(e,t,n){if(!W)return e.apply(n,t);var r=W;try{return W=null,e.apply(n,t)}finally{W=r}},e}();try{Object.defineProperty($,"@wry/context:Slot",{value:$["@wry/context:Slot"]=e,enumerable:!1,writable:!1,configurable:!1})}finally{return e}}();Y.bind,Y.noContext;function G(){}var X=function(){function e(e,t){void 0===e&&(e=1/0),void 0===t&&(t=G),this.max=e,this.dispose=t,this.map=new Map,this.newest=null,this.oldest=null}return e.prototype.has=function(e){return this.map.has(e)},e.prototype.get=function(e){var t=this.getEntry(e);return t&&t.value},e.prototype.getEntry=function(e){var t=this.map.get(e);if(t&&t!==this.newest){var n=t.older,r=t.newer;r&&(r.older=n),n&&(n.newer=r),t.older=this.newest,t.older.newer=t,t.newer=null,this.newest=t,t===this.oldest&&(this.oldest=r)}return t},e.prototype.set=function(e,t){var n=this.getEntry(e);return n?n.value=t:(n={key:e,value:t,newer:null,older:this.newest},this.newest&&(this.newest.newer=n),this.newest=n,this.oldest=this.oldest||n,this.map.set(e,n),n.value)},e.prototype.clean=function(){for(;this.oldest&&this.map.size>this.max;)this.delete(this.oldest.key)},e.prototype.delete=function(e){var t=this.map.get(e);return!!t&&(t===this.newest&&(this.newest=t.older),t===this.oldest&&(this.oldest=t.newer),t.newer&&(t.newer.older=t.older),t.older&&(t.older.newer=t.newer),this.map.delete(e),this.dispose(t.value,e),!0)},e}(),Z=new Y,ee=[],te=[],ne=100;function re(e,t){if(!e)throw new Error(t||"assertion failure")}function oe(e){switch(e.length){case 0:throw new Error("unknown value");case 1:return e[0];case 2:throw e[1]}}var ie=function(){function e(t,n){this.fn=t,this.args=n,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],++e.count}return e.prototype.recompute=function(){if(re(!this.recomputing,"already recomputing"),function(e){var t=Z.getValue();if(t)return e.parents.add(t),t.childValues.has(e)||t.childValues.set(e,[]),ue(e)?le(t,e):fe(t,e),t}(this)||!pe(this))return ue(this)?function(e){var t=he(e);Z.withValue(e,ae,[e]),function(e){if("function"==typeof e.subscribe)try{ye(e),e.unsubscribe=e.subscribe.apply(null,e.args)}catch(t){return e.setDirty(),!1}return!0}(e)&&function(e){if(e.dirty=!1,ue(e))return;ce(e)}(e);return t.forEach(pe),oe(e.value)}(this):oe(this.value)},e.prototype.setDirty=function(){this.dirty||(this.dirty=!0,this.value.length=0,se(this),ye(this))},e.prototype.dispose=function(){var e=this;he(this).forEach(pe),ye(this),this.parents.forEach(function(t){t.setDirty(),ve(t,e)})},e.count=0,e}();function ae(e){e.recomputing=!0,e.value.length=0;try{e.value[0]=e.fn.apply(null,e.args)}catch(t){e.value[1]=t}e.recomputing=!1}function ue(e){return e.dirty||!(!e.dirtyChildren||!e.dirtyChildren.size)}function se(e){e.parents.forEach(function(t){return le(t,e)})}function ce(e){e.parents.forEach(function(t){return fe(t,e)})}function le(e,t){if(re(e.childValues.has(t)),re(ue(t)),e.dirtyChildren){if(e.dirtyChildren.has(t))return}else e.dirtyChildren=te.pop()||new Set;e.dirtyChildren.add(t),se(e)}function fe(e,t){re(e.childValues.has(t)),re(!ue(t));var n,r,o,i=e.childValues.get(t);0===i.length?e.childValues.set(t,t.value.slice(0)):(n=i,r=t.value,(o=n.length)>0&&o===r.length&&n[o-1]===r[o-1]||e.setDirty()),de(e,t),ue(e)||ce(e)}function de(e,t){var n=e.dirtyChildren;n&&(n.delete(t),0===n.size&&(te.length<ne&&te.push(n),e.dirtyChildren=null))}function pe(e){return 0===e.parents.size&&"function"==typeof e.reportOrphan&&!0===e.reportOrphan()}function he(e){var t=ee;return e.childValues.size>0&&(t=[],e.childValues.forEach(function(n,r){ve(e,r),t.push(r)})),re(null===e.dirtyChildren),t}function ve(e,t){t.parents.delete(e),e.childValues.delete(t),de(e,t)}function ye(e){var t=e.unsubscribe;"function"==typeof t&&(e.unsubscribe=void 0,t())}var me=function(){function e(e){this.weakness=e}return e.prototype.lookup=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.lookupArray(e)},e.prototype.lookupArray=function(e){var t=this;return e.forEach(function(e){return t=t.getChildTrie(e)}),t.data||(t.data=Object.create(null))},e.prototype.getChildTrie=function(t){var n=this.weakness&&function(e){switch(typeof e){case"object":if(null===e)break;case"function":return!0}return!1}(t)?this.weak||(this.weak=new WeakMap):this.strong||(this.strong=new Map),r=n.get(t);return r||n.set(t,r=new e(this.weakness)),r},e}();var ge=new me("function"==typeof WeakMap);function be(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return ge.lookupArray(e)}var ke=new Set;function we(e,t){void 0===t&&(t=Object.create(null));var n=new X(t.max||Math.pow(2,16),function(e){return e.dispose()}),r=!!t.disposable,o=t.makeCacheKey||be;function i(){if(!r||Z.hasValue()){var i=o.apply(null,arguments);if(!i)return e.apply(null,arguments);var a=Array.prototype.slice.call(arguments),u=n.get(i);u?u.args=a:(u=new ie(e,a),n.set(i,u),u.subscribe=t.subscribe,r&&(u.reportOrphan=function(){return n.delete(i)}));var s=u.recompute();return n.set(i,u),ke.add(n),Z.hasValue()||(ke.forEach(function(e){return e.clean()}),ke.clear()),r?void 0:s}}return i.dirty=function(){var e=o.apply(null,arguments),t=e&&n.get(e);t&&t.setDirty()},i}var _e=!1;function xe(){var e=!_e;return Object(o.y)()||(_e=!0),e}var Oe=function(){function e(){}return e.prototype.ensureReady=function(){return Promise.resolve()},e.prototype.canBypassInit=function(){return!0},e.prototype.match=function(e,t,n){var r=n.store.get(e.id),o="ROOT_QUERY"===e.id;if(!r)return o;var i=r.__typename,a=void 0===i?o&&"Query":i;return a&&a===t||(xe(),"heuristic")},e}(),Ee=(function(){function e(e){e&&e.introspectionQueryResultData?(this.possibleTypesMap=this.parseIntrospectionResult(e.introspectionQueryResultData),this.isReady=!0):this.isReady=!1,this.match=this.match.bind(this)}e.prototype.match=function(e,t,n){Object(s.b)(this.isReady,6);var r=n.store.get(e.id),o="ROOT_QUERY"===e.id;if(!r)return o;var i=r.__typename,a=void 0===i?o&&"Query":i;if(Object(s.b)(a,7),a===t)return!0;var u=this.possibleTypesMap[t];return!!(a&&u&&u.indexOf(a)>-1)},e.prototype.parseIntrospectionResult=function(e){var t={};return e.__schema.types.forEach(function(e){"UNION"!==e.kind&&"INTERFACE"!==e.kind||(t[e.name]=e.possibleTypes.map(function(e){return e.name}))}),t}}(),Object.prototype.hasOwnProperty),Se=function(){function e(e){var t=this;void 0===e&&(e=Object.create(null)),this.data=e,this.depend=we(function(e){return t.data[e]},{disposable:!0,makeCacheKey:function(e){return e}})}return e.prototype.toObject=function(){return this.data},e.prototype.get=function(e){return this.depend(e),this.data[e]},e.prototype.set=function(e,t){t!==this.data[e]&&(this.data[e]=t,this.depend.dirty(e))},e.prototype.delete=function(e){Ee.call(this.data,e)&&(delete this.data[e],this.depend.dirty(e))},e.prototype.clear=function(){this.replace(null)},e.prototype.replace=function(e){var t=this;e?(Object.keys(e).forEach(function(n){t.set(n,e[n])}),Object.keys(this.data).forEach(function(n){Ee.call(e,n)||t.delete(n)})):Object.keys(this.data).forEach(function(e){t.delete(e)})},e}();function Te(e){return new Se(e)}var Ae=function(){function e(e){var t=this,n=void 0===e?{}:e,r=n.cacheKeyRoot,i=void 0===r?new me(o.e):r,a=n.freezeResults,u=void 0!==a&&a,s=this.executeStoreQuery,c=this.executeSelectionSet,l=this.executeSubSelectedArray;this.freezeResults=u,this.executeStoreQuery=we(function(e){return s.call(t,e)},{makeCacheKey:function(e){var t=e.query,n=e.rootValue,r=e.contextValue,o=e.variableValues,a=e.fragmentMatcher;if(r.store instanceof Se)return i.lookup(r.store,t,a,JSON.stringify(o),n.id)}}),this.executeSelectionSet=we(function(e){return c.call(t,e)},{makeCacheKey:function(e){var t=e.selectionSet,n=e.rootValue,r=e.execContext;if(r.contextValue.store instanceof Se)return i.lookup(r.contextValue.store,t,r.fragmentMatcher,JSON.stringify(r.variableValues),n.id)}}),this.executeSubSelectedArray=we(function(e){return l.call(t,e)},{makeCacheKey:function(e){var t=e.field,n=e.array,r=e.execContext;if(r.contextValue.store instanceof Se)return i.lookup(r.contextValue.store,t,n,JSON.stringify(r.variableValues))}})}return e.prototype.readQueryFromStore=function(e){return this.diffQueryAgainstStore(Object(r.a)({},e,{returnPartialData:!1})).result},e.prototype.diffQueryAgainstStore=function(e){var t=e.store,n=e.query,r=e.variables,a=e.previousResult,u=e.returnPartialData,c=void 0===u||u,l=e.rootId,f=void 0===l?"ROOT_QUERY":l,d=e.fragmentMatcherFunction,p=e.config,h=Object(o.o)(n);r=Object(o.c)({},Object(o.h)(h),r);var v={store:t,dataIdFromObject:p&&p.dataIdFromObject,cacheRedirects:p&&p.cacheRedirects||{}},y=this.executeStoreQuery({query:n,rootValue:{type:"id",id:f,generated:!0,typename:"Query"},contextValue:v,variableValues:r,fragmentMatcher:d}),m=y.missing&&y.missing.length>0;return m&&!c&&y.missing.forEach(function(e){if(!e.tolerable)throw new s.a(8)}),a&&Object(i.a)(a,y.result)&&(y.result=a),{result:y.result,complete:!m}},e.prototype.executeStoreQuery=function(e){var t=e.query,n=e.rootValue,r=e.contextValue,i=e.variableValues,a=e.fragmentMatcher,u=void 0===a?Ce:a,s=Object(o.l)(t),c=Object(o.j)(t),l={query:t,fragmentMap:Object(o.g)(c),contextValue:r,variableValues:i,fragmentMatcher:u};return this.executeSelectionSet({selectionSet:s.selectionSet,rootValue:n,execContext:l})},e.prototype.executeSelectionSet=function(e){var t=this,n=e.selectionSet,i=e.rootValue,a=e.execContext,u=a.fragmentMap,c=a.contextValue,l=a.variableValues,f={result:null},d=[],p=c.store.get(i.id),h=p&&p.__typename||"ROOT_QUERY"===i.id&&"Query"||void 0;function v(e){var t;return e.missing&&(f.missing=f.missing||[],(t=f.missing).push.apply(t,e.missing)),e.result}return n.selections.forEach(function(e){var n;if(Object(o.F)(e,l))if(Object(o.t)(e)){var f=v(t.executeField(p,h,e,a));void 0!==f&&d.push(((n={})[Object(o.E)(e)]=f,n))}else{var y=void 0;if(Object(o.v)(e))y=e;else if(!(y=u[e.name.value]))throw new s.a(9);var m=y.typeCondition&&y.typeCondition.name.value,g=!m||a.fragmentMatcher(i,m,c);if(g){var b=t.executeSelectionSet({selectionSet:y.selectionSet,rootValue:i,execContext:a});"heuristic"===g&&b.missing&&(b=Object(r.a)({},b,{missing:b.missing.map(function(e){return Object(r.a)({},e,{tolerable:!0})})})),d.push(v(b))}}}),f.result=Object(o.B)(d),this.freezeResults,f},e.prototype.executeField=function(e,t,n,r){var i=r.variableValues,a=r.contextValue,u=function(e,t,n,r,i,a){a.resultKey;var u=a.directives,s=n;(r||u)&&(s=Object(o.p)(s,r,u));var c=void 0;if(e&&void 0===(c=e[s])&&i.cacheRedirects&&"string"==typeof t){var l=i.cacheRedirects[t];if(l){var f=l[n];f&&(c=f(e,r,{getCacheKey:function(e){var t=i.dataIdFromObject(e);return t&&Object(o.H)({id:t,typename:e.__typename})}}))}}if(void 0===c)return{result:c,missing:[{object:e,fieldName:s,tolerable:!1}]};Object(o.w)(c)&&(c=c.json);return{result:c}}(e,t,n.name.value,Object(o.b)(n,i),a,{resultKey:Object(o.E)(n),directives:Object(o.i)(n,i)});return Array.isArray(u.result)?this.combineExecResults(u,this.executeSubSelectedArray({field:n,array:u.result,execContext:r})):n.selectionSet?null==u.result?u:this.combineExecResults(u,this.executeSelectionSet({selectionSet:n.selectionSet,rootValue:u.result,execContext:r})):(Ne(n,u.result),this.freezeResults,u)},e.prototype.combineExecResults=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return t.forEach(function(t){t.missing&&(e=e||[]).push.apply(e,t.missing)}),{result:t.pop().result,missing:e}},e.prototype.executeSubSelectedArray=function(e){var t,n=this,r=e.field,o=e.array,i=e.execContext;function a(e){return e.missing&&(t=t||[]).push.apply(t,e.missing),e.result}return o=o.map(function(e){return null===e?null:Array.isArray(e)?a(n.executeSubSelectedArray({field:r,array:e,execContext:i})):r.selectionSet?a(n.executeSelectionSet({selectionSet:r.selectionSet,rootValue:e,execContext:i})):(Ne(r,e),e)}),this.freezeResults,{result:o,missing:t}},e}();function Ne(e,t){if(!e.selectionSet&&Object(o.u)(t))throw new s.a(10)}function Ce(){return!0}var je=function(){function e(e){void 0===e&&(e=Object.create(null)),this.data=e}return e.prototype.toObject=function(){return this.data},e.prototype.get=function(e){return this.data[e]},e.prototype.set=function(e,t){this.data[e]=t},e.prototype.delete=function(e){this.data[e]=void 0},e.prototype.clear=function(){this.data=Object.create(null)},e.prototype.replace=function(e){this.data=e||Object.create(null)},e}();var Pe=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type="WriteError",t}return Object(r.c)(t,e),t}(Error);var Fe=function(){function e(){}return e.prototype.writeQueryToStore=function(e){var t=e.query,n=e.result,r=e.store,o=void 0===r?Te():r,i=e.variables,a=e.dataIdFromObject,u=e.fragmentMatcherFunction;return this.writeResultToStore({dataId:"ROOT_QUERY",result:n,document:t,store:o,variables:i,dataIdFromObject:a,fragmentMatcherFunction:u})},e.prototype.writeResultToStore=function(e){var t=e.dataId,n=e.result,r=e.document,i=e.store,a=void 0===i?Te():i,u=e.variables,s=e.dataIdFromObject,c=e.fragmentMatcherFunction,l=Object(o.m)(r);try{return this.writeSelectionSetToStore({result:n,dataId:t,selectionSet:l.selectionSet,context:{store:a,processedData:{},variables:Object(o.c)({},Object(o.h)(l),u),dataIdFromObject:s,fragmentMap:Object(o.g)(Object(o.j)(r)),fragmentMatcherFunction:c}})}catch(e){throw function(e,t){var n=new Pe("Error writing result to store for query:\n "+JSON.stringify(t));return n.message+="\n"+e.message,n.stack=e.stack,n}(e,r)}},e.prototype.writeSelectionSetToStore=function(e){var t=this,n=e.result,r=e.dataId,i=e.selectionSet,a=e.context,u=a.variables,c=a.store,l=a.fragmentMap;return i.selections.forEach(function(e){var i;if(Object(o.F)(e,u))if(Object(o.t)(e)){var c=Object(o.E)(e),f=n[c];if(void 0!==f)t.writeFieldToStore({dataId:r,value:f,field:e,context:a});else{var d=!1,p=!1;e.directives&&e.directives.length&&(d=e.directives.some(function(e){return e.name&&"defer"===e.name.value}),p=e.directives.some(function(e){return e.name&&"client"===e.name.value})),!d&&!p&&a.fragmentMatcherFunction}}else{var h=void 0;Object(o.v)(e)?h=e:(h=(l||{})[e.name.value],Object(s.b)(h,2));var v=!0;if(a.fragmentMatcherFunction&&h.typeCondition){var y=r||"self",m=Object(o.H)({id:y,typename:void 0}),g={store:new je((i={},i[y]=n,i)),cacheRedirects:{}},b=a.fragmentMatcherFunction(m,h.typeCondition.name.value,g);Object(o.x)(),v=!!b}v&&t.writeSelectionSetToStore({result:n,selectionSet:h.selectionSet,dataId:r,context:a})}}),c},e.prototype.writeFieldToStore=function(e){var t,n,a,u=e.field,c=e.value,l=e.dataId,f=e.context,d=f.variables,p=f.dataIdFromObject,h=f.store,v=Object(o.G)(u,d);if(u.selectionSet&&null!==c)if(Array.isArray(c)){var y=l+"."+v;n=this.processArrayValue(c,y,u.selectionSet,f)}else{var m=l+"."+v,g=!0;if(Ie(m)||(m="$"+m),p){var b=p(c);Object(s.b)(!b||!Ie(b),3),(b||"number"==typeof b&&0===b)&&(m=b,g=!1)}Re(m,u,f.processedData)||this.writeSelectionSetToStore({dataId:m,result:c,selectionSet:u.selectionSet,context:f});var k=c.__typename;n=Object(o.H)({id:m,typename:k},g);var w=(a=h.get(l))&&a[v];if(w!==n&&Object(o.u)(w)){var _=void 0!==w.typename,x=void 0!==k,O=_&&x&&w.typename!==k;Object(s.b)(!g||w.generated||O,4),Object(s.b)(!_||x,5),w.generated&&(O?g||h.delete(w.id):function e(t,n,a){if(t===n)return!1;var u=a.get(t);var s=a.get(n);var c=!1;Object.keys(u).forEach(function(t){var n=u[t],r=s[t];Object(o.u)(n)&&Ie(n.id)&&Object(o.u)(r)&&!Object(i.a)(n,r)&&e(n.id,r.id,a)&&(c=!0)});a.delete(t);var l=Object(r.a)({},u,s);if(Object(i.a)(l,s))return c;a.set(n,l);return!0}(w.id,n.id,h))}}else n=null!=c&&"object"==typeof c?{type:"json",json:c}:c;(a=h.get(l))&&Object(i.a)(n,a[v])||h.set(l,Object(r.a)({},a,((t={})[v]=n,t)))},e.prototype.processArrayValue=function(e,t,n,r){var i=this;return e.map(function(e,a){if(null===e)return null;var u=t+"."+a;if(Array.isArray(e))return i.processArrayValue(e,u,n,r);var s=!0;if(r.dataIdFromObject){var c=r.dataIdFromObject(e);c&&(u=c,s=!1)}return Re(u,n,r.processedData)||i.writeSelectionSetToStore({dataId:u,result:e,selectionSet:n,context:r}),Object(o.H)({id:u,typename:e.__typename},s)})},e}();function Ie(e){return"$"===e[0]}function Re(e,t,n){if(!n)return!1;if(n[e]){if(n[e].indexOf(t)>=0)return!0;n[e].push(t)}else n[e]=[t];return!1}var De={fragmentMatcher:new Oe,dataIdFromObject:function(e){if(e.__typename){if(void 0!==e.id)return e.__typename+":"+e.id;if(void 0!==e._id)return e.__typename+":"+e._id}return null},addTypename:!0,resultCaching:!0,freezeResults:!1};var Me=Object.prototype.hasOwnProperty,Be=function(e){function t(t,n,r){var o=e.call(this,Object.create(null))||this;return o.optimisticId=t,o.parent=n,o.transaction=r,o}return Object(r.c)(t,e),t.prototype.toObject=function(){return Object(r.a)({},this.parent.toObject(),this.data)},t.prototype.get=function(e){return Me.call(this.data,e)?this.data[e]:this.parent.get(e)},t}(je),Le=function(e){function t(t){void 0===t&&(t={});var n=e.call(this)||this;n.watches=new Set,n.typenameDocumentCache=new Map,n.cacheKeyRoot=new me(o.e),n.silenceBroadcast=!1,n.config=Object(r.a)({},De,t),n.config.customResolvers&&(n.config.cacheRedirects=n.config.customResolvers),n.config.cacheResolvers&&(n.config.cacheRedirects=n.config.cacheResolvers),n.addTypename=!!n.config.addTypename,n.data=n.config.resultCaching?new Se:new je,n.optimisticData=n.data,n.storeWriter=new Fe,n.storeReader=new Ae({cacheKeyRoot:n.cacheKeyRoot,freezeResults:t.freezeResults});var i=n,a=i.maybeBroadcastWatch;return n.maybeBroadcastWatch=we(function(e){return a.call(n,e)},{makeCacheKey:function(e){if(!e.optimistic&&!e.previousResult)return i.data instanceof Se?i.cacheKeyRoot.lookup(e.query,JSON.stringify(e.variables)):void 0}}),n}return Object(r.c)(t,e),t.prototype.restore=function(e){return e&&this.data.replace(e),this},t.prototype.extract=function(e){return void 0===e&&(e=!1),(e?this.optimisticData:this.data).toObject()},t.prototype.read=function(e){if("string"==typeof e.rootId&&void 0===this.data.get(e.rootId))return null;var t=this.config.fragmentMatcher,n=t&&t.match;return this.storeReader.readQueryFromStore({store:e.optimistic?this.optimisticData:this.data,query:this.transformDocument(e.query),variables:e.variables,rootId:e.rootId,fragmentMatcherFunction:n,previousResult:e.previousResult,config:this.config})||null},t.prototype.write=function(e){var t=this.config.fragmentMatcher,n=t&&t.match;this.storeWriter.writeResultToStore({dataId:e.dataId,result:e.result,variables:e.variables,document:this.transformDocument(e.query),store:this.data,dataIdFromObject:this.config.dataIdFromObject,fragmentMatcherFunction:n}),this.broadcastWatches()},t.prototype.diff=function(e){var t=this.config.fragmentMatcher,n=t&&t.match;return this.storeReader.diffQueryAgainstStore({store:e.optimistic?this.optimisticData:this.data,query:this.transformDocument(e.query),variables:e.variables,returnPartialData:e.returnPartialData,previousResult:e.previousResult,fragmentMatcherFunction:n,config:this.config})},t.prototype.watch=function(e){var t=this;return this.watches.add(e),function(){t.watches.delete(e)}},t.prototype.evict=function(e){throw new s.a(1)},t.prototype.reset=function(){return this.data.clear(),this.broadcastWatches(),Promise.resolve()},t.prototype.removeOptimistic=function(e){for(var t=[],n=0,r=this.optimisticData;r instanceof Be;)r.optimisticId===e?++n:t.push(r),r=r.parent;if(n>0){for(this.optimisticData=r;t.length>0;){var o=t.pop();this.performTransaction(o.transaction,o.optimisticId)}this.broadcastWatches()}},t.prototype.performTransaction=function(e,t){var n=this.data,r=this.silenceBroadcast;this.silenceBroadcast=!0,"string"==typeof t&&(this.data=this.optimisticData=new Be(t,this.optimisticData,e));try{e(this)}finally{this.silenceBroadcast=r,this.data=n}this.broadcastWatches()},t.prototype.recordOptimisticTransaction=function(e,t){return this.performTransaction(e,t)},t.prototype.transformDocument=function(e){if(this.addTypename){var t=this.typenameDocumentCache.get(e);return t||(t=Object(o.a)(e),this.typenameDocumentCache.set(e,t),this.typenameDocumentCache.set(t,t)),t}return e},t.prototype.broadcastWatches=function(){var e=this;this.silenceBroadcast||this.watches.forEach(function(t){return e.maybeBroadcastWatch(t)})},t.prototype.maybeBroadcastWatch=function(e){e.callback(this.diff({query:e.query,variables:e.variables,previousResult:e.previousResult&&e.previousResult(),optimistic:e.optimistic}))},t}(K),ze=n(39);function qe(e){return Object(w.b)(e,{leave:Ue})}var Ue={Name:function(e){return e.value},Variable:function(e){return"$"+e.name},Document:function(e){return Qe(e.definitions,"\n\n")+"\n"},OperationDefinition:function(e){var t=e.operation,n=e.name,r=We("(",Qe(e.variableDefinitions,", "),")"),o=Qe(e.directives," "),i=e.selectionSet;return n||o||r||"query"!==t?Qe([t,Qe([n,r]),o,i]," "):i},VariableDefinition:function(e){var t=e.variable,n=e.type,r=e.defaultValue,o=e.directives;return t+": "+n+We(" = ",r)+We(" ",Qe(o," "))},SelectionSet:function(e){return Ke(e.selections)},Field:function(e){var t=e.alias,n=e.name,r=e.arguments,o=e.directives,i=e.selectionSet;return Qe([We("",t,": ")+n+We("(",Qe(r,", "),")"),Qe(o," "),i]," ")},Argument:function(e){return e.name+": "+e.value},FragmentSpread:function(e){return"..."+e.name+We(" ",Qe(e.directives," "))},InlineFragment:function(e){var t=e.typeCondition,n=e.directives,r=e.selectionSet;return Qe(["...",We("on ",t),Qe(n," "),r]," ")},FragmentDefinition:function(e){var t=e.name,n=e.typeCondition,r=e.variableDefinitions,o=e.directives,i=e.selectionSet;return"fragment ".concat(t).concat(We("(",Qe(r,", "),")")," ")+"on ".concat(n," ").concat(We("",Qe(o," ")," "))+i},IntValue:function(e){return e.value},FloatValue:function(e){return e.value},StringValue:function(e,t){var n=e.value;return e.block?Object(ze.b)(n,"description"===t?"":"  "):JSON.stringify(n)},BooleanValue:function(e){return e.value?"true":"false"},NullValue:function(){return"null"},EnumValue:function(e){return e.value},ListValue:function(e){return"["+Qe(e.values,", ")+"]"},ObjectValue:function(e){return"{"+Qe(e.fields,", ")+"}"},ObjectField:function(e){return e.name+": "+e.value},Directive:function(e){return"@"+e.name+We("(",Qe(e.arguments,", "),")")},NamedType:function(e){return e.name},ListType:function(e){return"["+e.type+"]"},NonNullType:function(e){return e.type+"!"},SchemaDefinition:function(e){var t=e.directives,n=e.operationTypes;return Qe(["schema",Qe(t," "),Ke(n)]," ")},OperationTypeDefinition:function(e){return e.operation+": "+e.type},ScalarTypeDefinition:Ve(function(e){return Qe(["scalar",e.name,Qe(e.directives," ")]," ")}),ObjectTypeDefinition:Ve(function(e){var t=e.name,n=e.interfaces,r=e.directives,o=e.fields;return Qe(["type",t,We("implements ",Qe(n," & ")),Qe(r," "),Ke(o)]," ")}),FieldDefinition:Ve(function(e){var t=e.name,n=e.arguments,r=e.type,o=e.directives;return t+($e(n)?We("(\n",Je(Qe(n,"\n")),"\n)"):We("(",Qe(n,", "),")"))+": "+r+We(" ",Qe(o," "))}),InputValueDefinition:Ve(function(e){var t=e.name,n=e.type,r=e.defaultValue,o=e.directives;return Qe([t+": "+n,We("= ",r),Qe(o," ")]," ")}),InterfaceTypeDefinition:Ve(function(e){var t=e.name,n=e.directives,r=e.fields;return Qe(["interface",t,Qe(n," "),Ke(r)]," ")}),UnionTypeDefinition:Ve(function(e){var t=e.name,n=e.directives,r=e.types;return Qe(["union",t,Qe(n," "),r&&0!==r.length?"= "+Qe(r," | "):""]," ")}),EnumTypeDefinition:Ve(function(e){var t=e.name,n=e.directives,r=e.values;return Qe(["enum",t,Qe(n," "),Ke(r)]," ")}),EnumValueDefinition:Ve(function(e){return Qe([e.name,Qe(e.directives," ")]," ")}),InputObjectTypeDefinition:Ve(function(e){var t=e.name,n=e.directives,r=e.fields;return Qe(["input",t,Qe(n," "),Ke(r)]," ")}),DirectiveDefinition:Ve(function(e){var t=e.name,n=e.arguments,r=e.repeatable,o=e.locations;return"directive @"+t+($e(n)?We("(\n",Je(Qe(n,"\n")),"\n)"):We("(",Qe(n,", "),")"))+(r?" repeatable":"")+" on "+Qe(o," | ")}),SchemaExtension:function(e){var t=e.directives,n=e.operationTypes;return Qe(["extend schema",Qe(t," "),Ke(n)]," ")},ScalarTypeExtension:function(e){return Qe(["extend scalar",e.name,Qe(e.directives," ")]," ")},ObjectTypeExtension:function(e){var t=e.name,n=e.interfaces,r=e.directives,o=e.fields;return Qe(["extend type",t,We("implements ",Qe(n," & ")),Qe(r," "),Ke(o)]," ")},InterfaceTypeExtension:function(e){var t=e.name,n=e.directives,r=e.fields;return Qe(["extend interface",t,Qe(n," "),Ke(r)]," ")},UnionTypeExtension:function(e){var t=e.name,n=e.directives,r=e.types;return Qe(["extend union",t,Qe(n," "),r&&0!==r.length?"= "+Qe(r," | "):""]," ")},EnumTypeExtension:function(e){var t=e.name,n=e.directives,r=e.values;return Qe(["extend enum",t,Qe(n," "),Ke(r)]," ")},InputObjectTypeExtension:function(e){var t=e.name,n=e.directives,r=e.fields;return Qe(["extend input",t,Qe(n," "),Ke(r)]," ")}};function Ve(e){return function(t){return Qe([t.description,e(t)],"\n")}}function Qe(e,t){return e?e.filter(function(e){return e}).join(t||""):""}function Ke(e){return e&&0!==e.length?"{\n"+Je(Qe(e,"\n"))+"\n}":""}function We(e,t,n){return t?e+t+(n||""):""}function Je(e){return e&&"  "+e.replace(/\n/g,"\n  ")}function He(e){return-1!==e.indexOf("\n")}function $e(e){return e&&e.some(He)}var Ye={http:{includeQuery:!0,includeExtensions:!1},headers:{accept:"*/*","content-type":"application/json"},options:{method:"POST"}},Ge=function(e,t,n){var r=new Error(n);throw r.name="ServerError",r.response=e,r.statusCode=e.status,r.result=t,r},Xe=function(e,t){var n;try{n=JSON.stringify(e)}catch(e){var r=new s.a(2);throw r.parseError=e,r}return n},Ze=function(e){void 0===e&&(e={});var t=e.uri,n=void 0===t?"/graphql":t,o=e.fetch,i=e.includeExtensions,a=e.useGETForQueries,c=Object(r.e)(e,["uri","fetch","includeExtensions","useGETForQueries"]);!function(e){if(!e&&"undefined"==typeof fetch){throw"undefined"==typeof window&&"node-fetch",new s.a(1)}}(o),o||(o=fetch);var f={http:{includeExtensions:i},options:c.fetchOptions,credentials:c.credentials,headers:c.headers};return new m(function(e){var t=function(e,t){var n=e.getContext().uri;return n||("function"==typeof t?t(e):t||"/graphql")}(e,n),i=e.getContext(),s={};if(i.clientAwareness){var c=i.clientAwareness,d=c.name,p=c.version;d&&(s["apollographql-client-name"]=d),p&&(s["apollographql-client-version"]=p)}var h,v=Object(r.a)({},s,i.headers),y={http:i.http,options:i.fetchOptions,credentials:i.credentials,headers:v},m=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];var i=Object(r.a)({},t.options,{headers:t.headers,credentials:t.credentials}),a=t.http;n.forEach(function(e){i=Object(r.a)({},i,e.options,{headers:Object(r.a)({},i.headers,e.headers)}),e.credentials&&(i.credentials=e.credentials),a=Object(r.a)({},a,e.http)});var u=e.operationName,s=e.extensions,c=e.variables,l=e.query,f={operationName:u,variables:c};return a.includeExtensions&&(f.extensions=s),a.includeQuery&&(f.query=qe(l)),{options:i,body:f}}(e,Ye,f,y),g=m.options,b=m.body;if(!g.signal){var k=function(){if("undefined"==typeof AbortController)return{controller:!1,signal:!1};var e=new AbortController;return{controller:e,signal:e.signal}}(),w=k.controller,_=k.signal;(h=w)&&(g.signal=_)}if(a&&!e.query.definitions.some(function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation})&&(g.method="GET"),"GET"===g.method){var x=function(e,t){var n=[],r=function(e,t){n.push(e+"="+encodeURIComponent(t))};"query"in t&&r("query",t.query);t.operationName&&r("operationName",t.operationName);if(t.variables){var o=void 0;try{o=Xe(t.variables,"Variables map")}catch(e){return{parseError:e}}r("variables",o)}if(t.extensions){var i=void 0;try{i=Xe(t.extensions,"Extensions map")}catch(e){return{parseError:e}}r("extensions",i)}var a="",u=e,s=e.indexOf("#");-1!==s&&(a=e.substr(s),u=e.substr(0,s));var c=-1===u.indexOf("?")?"?":"&";return{newURI:u+c+n.join("&")+a}}(t,b),O=x.newURI,E=x.parseError;if(E)return l(E);t=O}else try{g.body=Xe(b,"Payload")}catch(E){return l(E)}return new u(function(n){var r;return o(t,g).then(function(t){return e.setContext({response:t}),t}).then((r=e,function(e){return e.text().then(function(t){try{return JSON.parse(t)}catch(r){var n=r;return n.name="ServerParseError",n.response=e,n.statusCode=e.status,n.bodyText=t,Promise.reject(n)}}).then(function(t){return e.status>=300&&Ge(e,t,"Response not successful: Received status code "+e.status),Array.isArray(t)||t.hasOwnProperty("data")||t.hasOwnProperty("errors")||Ge(e,t,"Server response was missing for query '"+(Array.isArray(r)?r.map(function(e){return e.operationName}):r.operationName)+"'."),t})})).then(function(e){return n.next(e),n.complete(),e}).catch(function(e){"AbortError"!==e.name&&(e.result&&e.result.errors&&e.result.data&&n.next(e.result),n.error(e))}),function(){h&&h.abort()}})})};var et=function(e){function t(t){return e.call(this,Ze(t).request)||this}return Object(r.c)(t,e),t}(m);function tt(e){return new m(function(t,n){return new u(function(r){var o,i,a;try{o=n(t).subscribe({next:function(o){o.errors&&(a=e({graphQLErrors:o.errors,response:o,operation:t,forward:n}))?i=a.subscribe({next:r.next.bind(r),error:r.error.bind(r),complete:r.complete.bind(r)}):r.next(o)},error:function(o){(a=e({operation:t,networkError:o,graphQLErrors:o&&o.result&&o.result.errors,forward:n}))?i=a.subscribe({next:r.next.bind(r),error:r.error.bind(r),complete:r.complete.bind(r)}):r.error(o)},complete:function(){a||r.complete.bind(r)()}})}catch(o){e({networkError:o,operation:t,forward:n}),r.error(o)}return function(){o&&o.unsubscribe(),i&&o.unsubscribe()}})})}!function(e){function t(t){var n=e.call(this)||this;return n.link=tt(t),n}Object(r.c)(t,e),t.prototype.request=function(e,t){return this.link.request(e,t)}}(m);var nt=n(81),rt=n.n(nt),ot=["request","uri","credentials","headers","fetch","fetchOptions","clientState","onError","cacheRedirects","cache","name","version","resolvers","typeDefs","fragmentMatcher"],it=function(e){function t(t){void 0===t&&(t={});t&&Object.keys(t).filter(function(e){return-1===ot.indexOf(e)}).length;var n=t.request,r=t.uri,o=t.credentials,i=t.headers,a=t.fetch,c=t.fetchOptions,l=t.clientState,f=t.cacheRedirects,d=t.onError,p=t.name,h=t.version,v=t.resolvers,y=t.typeDefs,g=t.fragmentMatcher,b=t.cache;Object(s.b)(!b||!f,1),b||(b=f?new Le({cacheRedirects:f}):new Le);var k=tt(d||function(e){var t=e.graphQLErrors;e.networkError;t&&t.map(function(e){e.message,e.locations,e.path;return!0})}),w=!!n&&new m(function(e,t){return new u(function(r){var o;return Promise.resolve(e).then(function(e){return n(e)}).then(function(){o=t(e).subscribe({next:r.next.bind(r),error:r.error.bind(r),complete:r.complete.bind(r)})}).catch(r.error.bind(r)),function(){o&&o.unsubscribe()}})}),_=new et({uri:r||"/graphql",fetch:a,fetchOptions:c||{},credentials:o||"same-origin",headers:i||{}}),x=m.from([k,w,_].filter(function(e){return!!e})),O=v,E=y,S=g;return l&&(l.defaults&&b.writeData({data:l.defaults}),O=l.resolvers,E=l.typeDefs,S=l.fragmentMatcher),e.call(this,{cache:b,link:x,name:p,version:h,resolvers:O,typeDefs:E,fragmentMatcher:S})||this}return Object(r.c)(t,e),t}(z),at=n(1),ut=n.n(at),st=n(22),ct=n.n(st),lt=function(){return Math.random().toString(36).substring(7).split("").join(".")},ft={INIT:"@@redux/INIT"+lt(),REPLACE:"@@redux/REPLACE"+lt(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+lt()}};function dt(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function pt(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function ht(e,t){return function(){return t(e.apply(this,arguments))}}var vt=n(6),yt=n.n(vt),mt=ut.a.createContext(null);var gt=function(e){e()},bt=function(){return gt},kt=null,wt={notify:function(){}};var _t=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=wt,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=bt(),t=[],n=[],{clear:function(){n=kt,t=kt},notify:function(){var r=t=n;e(function(){for(var e=0;e<r.length;e++)r[e]()})},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==kt&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=wt)},e}();function xt(e){var t=e.store,n=e.context,r=e.children,o=Object(at.useMemo)(function(){var e=new _t(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}},[t]),i=Object(at.useMemo)(function(){return t.getState()},[t]);Object(at.useEffect)(function(){var e=o.subscription;return e.trySubscribe(),i!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}},[o,i]);var a=n||mt;return ut.a.createElement(a.Provider,{value:o},r)}xt.propTypes={store:yt.a.shape({subscribe:yt.a.func.isRequired,dispatch:yt.a.func.isRequired,getState:yt.a.func.isRequired}),context:yt.a.object,children:yt.a.any};var Ot=xt;function Et(){return(Et=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function St(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var Tt=n(57),At=n.n(Tt),Nt=n(15),Ct=n.n(Nt),jt=n(56),Pt=[],Ft=[null,null];function It(e,t){var n=e[1];return[t.payload,n+1]}var Rt=function(){return[null,0]},Dt="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?at.useLayoutEffect:at.useEffect;function Mt(e,t){void 0===t&&(t={});var n=t,r=n.getDisplayName,o=void 0===r?function(e){return"ConnectAdvanced("+e+")"}:r,i=n.methodName,a=void 0===i?"connectAdvanced":i,u=n.renderCountProp,s=void 0===u?void 0:u,c=n.shouldHandleStateChanges,l=void 0===c||c,f=n.storeKey,d=void 0===f?"store":f,p=n.withRef,h=void 0!==p&&p,v=n.forwardRef,y=void 0!==v&&v,m=n.context,g=void 0===m?mt:m,b=St(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);Ct()(void 0===s,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),Ct()(!h,"withRef is removed. To access the wrapped instance, use a ref on the connected component");Ct()("store"===d,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var k=g;return function(t){var n=t.displayName||t.name||"Component",r=o(n),i=Et({},b,{getDisplayName:o,methodName:a,renderCountProp:s,shouldHandleStateChanges:l,storeKey:d,displayName:r,wrappedComponentName:n,WrappedComponent:t}),u=b.pure;var c=u?at.useMemo:function(e){return e()};function f(n){var o=Object(at.useMemo)(function(){var e=n.forwardedRef,t=St(n,["forwardedRef"]);return[n.context,e,t]},[n]),a=o[0],u=o[1],s=o[2],f=Object(at.useMemo)(function(){return a&&a.Consumer&&Object(jt.isContextConsumer)(ut.a.createElement(a.Consumer,null))?a:k},[a,k]),d=Object(at.useContext)(f),p=Boolean(n.store),h=Boolean(d)&&Boolean(d.store);Ct()(p||h,'Could not find "store" in the context of "'+r+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+r+" in connect options.");var v=n.store||d.store,y=Object(at.useMemo)(function(){return function(t){return e(t.dispatch,i)}(v)},[v]),m=Object(at.useMemo)(function(){if(!l)return Ft;var e=new _t(v,p?null:d.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]},[v,p,d]),g=m[0],b=m[1],w=Object(at.useMemo)(function(){return p?d:Et({},d,{subscription:g})},[p,d,g]),_=Object(at.useReducer)(It,Pt,Rt),x=_[0][0],O=_[1];if(x&&x.error)throw x.error;var E=Object(at.useRef)(),S=Object(at.useRef)(s),T=Object(at.useRef)(),A=Object(at.useRef)(!1),N=c(function(){return T.current&&s===S.current?T.current:y(v.getState(),s)},[v,x,s]);Dt(function(){S.current=s,E.current=N,A.current=!1,T.current&&(T.current=null,b())}),Dt(function(){if(l){var e=!1,t=null,n=function(){if(!e){var n,r,o=v.getState();try{n=y(o,S.current)}catch(e){r=e,t=e}r||(t=null),n===E.current?A.current||b():(E.current=n,T.current=n,A.current=!0,O({type:"STORE_UPDATED",payload:{latestStoreState:o,error:r}}))}};g.onStateChange=n,g.trySubscribe(),n();return function(){if(e=!0,g.tryUnsubscribe(),g.onStateChange=null,t)throw t}}},[v,g,y]);var C=Object(at.useMemo)(function(){return ut.a.createElement(t,Et({},N,{ref:u}))},[u,t,N]);return Object(at.useMemo)(function(){return l?ut.a.createElement(f.Provider,{value:w},C):C},[f,C,w])}var p=u?ut.a.memo(f):f;if(p.WrappedComponent=t,p.displayName=r,y){var h=ut.a.forwardRef(function(e,t){return ut.a.createElement(p,Et({},e,{forwardedRef:t}))});return h.displayName=r,h.WrappedComponent=t,At()(h,t)}return At()(p,t)}}var Bt=Object.prototype.hasOwnProperty;function Lt(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function zt(e,t){if(Lt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Bt.call(t,n[o])||!Lt(e[n[o]],t[n[o]]))return!1;return!0}function qt(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function Ut(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function Vt(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=Ut(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=Ut(o),o=r(t,n)),o},r}}var Qt=[function(e){return"function"==typeof e?Vt(e):void 0},function(e){return e?void 0:qt(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?qt(function(t){return function(e,t){if("function"==typeof e)return ht(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=ht(o,t))}return n}(e,t)}):void 0}];var Kt=[function(e){return"function"==typeof e?Vt(e):void 0},function(e){return e?void 0:qt(function(){return{}})}];function Wt(e,t,n){return Et({},n,{},e,{},t)}var Jt=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var s=e(t,n,u);return a?o&&i(s,r)||(r=s):(a=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return Wt}}];function Ht(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function $t(e,t,n,r,o){var i,a,u,s,c,l=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,v,y=!f(p,a),m=!l(o,i);return i=o,a=p,y&&m?(u=e(i,a),t.dependsOnOwnProps&&(s=t(r,a)),c=n(u,s,a)):y?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(s=t(r,a)),c=n(u,s,a)):m?(h=e(i,a),v=!d(h,u),u=h,v&&(c=n(u,s,a)),c):c}return function(o,l){return p?h(o,l):(u=e(i=o,a=l),s=t(r,a),c=n(u,s,a),p=!0,c)}}function Yt(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=St(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),s=o(e,i);return(i.pure?$t:Ht)(a,u,s,e,i)}function Gt(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Xt(e,t){return e===t}var Zt,en,tn,nn,rn,on,an,un,sn,cn,ln,fn,dn=(tn=(en=void 0===Zt?{}:Zt).connectHOC,nn=void 0===tn?Mt:tn,rn=en.mapStateToPropsFactories,on=void 0===rn?Kt:rn,an=en.mapDispatchToPropsFactories,un=void 0===an?Qt:an,sn=en.mergePropsFactories,cn=void 0===sn?Jt:sn,ln=en.selectorFactory,fn=void 0===ln?Yt:ln,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,u=o.areStatesEqual,s=void 0===u?Xt:u,c=o.areOwnPropsEqual,l=void 0===c?zt:c,f=o.areStatePropsEqual,d=void 0===f?zt:f,p=o.areMergedPropsEqual,h=void 0===p?zt:p,v=St(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),y=Gt(e,on,"mapStateToProps"),m=Gt(t,un,"mapDispatchToProps"),g=Gt(n,cn,"mergeProps");return nn(fn,Et({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:y,initMapDispatchToProps:m,initMergeProps:g,pure:a,areStatesEqual:s,areOwnPropsEqual:l,areStatePropsEqual:d,areMergedPropsEqual:h},v))});function pn(){var e=Object(at.useContext)(mt);return Ct()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function hn(e){void 0===e&&(e=mt);var t=e===mt?pn:function(){return Object(at.useContext)(e)};return function(){return t().store}}var vn=hn();!function(e){void 0===e&&(e=mt);var t=e===mt?vn:hn(e)}();var yn="undefined"!=typeof window?at.useLayoutEffect:at.useEffect,mn=function(e,t){return e===t};var gn;!function(e){void 0===e&&(e=mt);var t=e===mt?pn:function(){return Object(at.useContext)(e)}}();gn=st.unstable_batchedUpdates,gt=gn;var bn=function(e){var t=e.text;return ut.a.createElement("li",null,t)},kn=function(e){var t=e.documents;ut.a.createElement("ul",null,t.map(function(e){return ut.a.createElement(bn,e)}))},wn=dn(function(e){return{documents:e.documents}},function(e){return{}})(kn),_n=n(7);function xn(e,t){function n(n,r,o,i,a){var u=r[o];return null!=u||n?null==u&&n?new Error("The "+a+" `"+o+"` is marked as required in `"+i+"`, but it was not supplied."):t(u)?null:new Error("Invalid "+a+" `"+o+"` supplied to `"+i+"`, expected a Slate `"+e+"` but received: "+u):null}function r(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.apply(void 0,[!1].concat(t))}return r.isRequired=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.apply(void 0,[!0].concat(t))},r}var On={block:xn("Block",function(e){return _n.a.isBlock(e)}),blocks:xn("List<Block>",function(e){return _n.a.isBlockList(e)}),change:xn("Change",function(e){return _n.b.isChange(e)}),data:xn("Data",function(e){return _n.c.isData(e)}),document:xn("Document",function(e){return _n.d.isDocument(e)}),inline:xn("Inline",function(e){return _n.f.isInline(e)}),inlines:xn("Inline",function(e){return _n.f.isInlineList(e)}),leaf:xn("Leaf",function(e){return _n.g.isLeaf(e)}),leaves:xn("List<Leaf>",function(e){return _n.g.isLeafList(e)}),mark:xn("Mark",function(e){return _n.h.isMark(e)}),marks:xn("Set<Mark>",function(e){return _n.h.isMarkSet(e)}),node:xn("Node",function(e){return _n.i.isNode(e)}),nodes:xn("List<Node>",function(e){return _n.i.isNodeList(e)}),range:xn("Range",function(e){return _n.k.isRange(e)}),ranges:xn("List<Range>",function(e){return _n.k.isRangeList(e)}),selection:xn("Selection",function(e){return _n.l.isSelection(e)}),value:xn("Value",function(e){return _n.n.isValue(e)}),text:xn("Text",function(e){return _n.m.isText(e)}),texts:xn("List<Text>",function(e){return _n.m.isTextList(e)})},En=n(19),Sn=n.n(En),Tn=n(11),An=n.n(Tn),Nn=n(4),Cn=n(9),jn=n.n(Cn),Pn=n(85),Fn=n.n(Pn),In="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Rn="object"===("undefined"==typeof window?"undefined":In(window))&&"object"===("undefined"==typeof document?"undefined":In(document))&&9===document.nodeType,Dn=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},Mn=void 0;if(Rn){var Bn=!0,Ln=!1,zn=void 0;try{for(var qn,Un=[["edge",/Edge\/([0-9\._]+)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)$/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+)\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["android",/Android\s([0-9\.]+)/],["safari",/Version\/([0-9\._]+).*Safari/]][Symbol.iterator]();!(Bn=(qn=Un.next()).done);Bn=!0){var Vn=qn.value,Qn=Dn(Vn,2),Kn=Qn[0];if(Qn[1].test(window.navigator.userAgent)){Mn=Kn;break}}}catch(e){Ln=!0,zn=e}finally{try{!Bn&&Un.return&&Un.return()}finally{if(Ln)throw zn}}}var Wn=void 0;if(Rn){var Jn=!0,Hn=!1,$n=void 0;try{for(var Yn,Gn=[["ios",/os ([\.\_\d]+) like mac os/i],["macos",/mac os x/i],["android",/android/i],["firefoxos",/mozilla\/[a-z\.\_\d]+ \((?:mobile)|(?:tablet)/i],["windows",/windows\s*(?:nt)?\s*([\.\_\d]+)/i]][Symbol.iterator]();!(Jn=(Yn=Gn.next()).done);Jn=!0){var Xn=Yn.value,Zn=Dn(Xn,2),er=Zn[0];if(Zn[1].test(window.navigator.userAgent)){Wn=er;break}}}catch(e){Hn=!0,$n=e}finally{try{!Jn&&Gn.return&&Gn.return()}finally{if(Hn)throw $n}}}var tr=[];if(Rn){var nr=!0,rr=!1,or=void 0;try{for(var ir,ar=[["inputeventslevel1",function(e){return"inputType"in(e.InputEvent?new e.InputEvent("input"):{})}],["inputeventslevel2",function(e){var t=e.document.createElement("div");return t.contentEditable=!0,"onbeforeinput"in t}]][Symbol.iterator]();!(nr=(ir=ar.next()).done);nr=!0){var ur=ir.value,sr=Dn(ur,2),cr=sr[0];(0,sr[1])(window)&&tr.push(cr)}}catch(e){rr=!0,or=e}finally{try{!nr&&ar.return&&ar.return()}finally{if(rr)throw or}}}var lr=[[/^9([.]0|)/,28],[/^8[.]1/,27],[/^8([.]0|)/,26],[/^7[.]1/,25],[/^7([.]0|)/,24],[/^6([.]0|)/,23],[/^5[.]1/,22],[/^5([.]0|)/,21],[/^4[.]4/,20]];var fr="firefox"===Mn,dr="safari"===Mn,pr="ie"===Mn,hr="edge"===Mn,vr="android"===Wn,yr="ios"===Wn,mr="macos"===Wn,gr=function(){if("android"!==Wn)return null;var e=window.navigator.userAgent.match(/Android\s([0-9\.]+)/);if(null==e)return null;var t=e[1],n=!0,r=!1,o=void 0;try{for(var i,a=lr[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var u=i.value,s=Dn(u,2),c=s[0],l=s[1];if(t.match(c))return l}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}return null}(),br=(tr.includes("inputeventslevel1"),tr.includes("inputeventslevel2")||vr&&(28===gr||null===gr)),kr=n(86),wr=n.n(kr),_r=n(23),xr=n.n(_r),Or=n(0),Er=n(41),Sr={bold:"mod+b",compose:["down","left","right","up","backspace","enter"],moveBackward:"left",moveForward:"right",moveWordBackward:"ctrl+left",moveWordForward:"ctrl+right",deleteBackward:"shift?+backspace",deleteForward:"shift?+delete",extendBackward:"shift+left",extendForward:"shift+right",italic:"mod+i",splitBlock:"shift?+enter",undo:"mod+z"},Tr={moveLineBackward:"opt+up",moveLineForward:"opt+down",moveWordBackward:"opt+left",moveWordForward:"opt+right",deleteBackward:["ctrl+backspace","ctrl+h"],deleteForward:["ctrl+delete","ctrl+d"],deleteLineBackward:"cmd+shift?+backspace",deleteLineForward:["cmd+shift?+delete","ctrl+k"],deleteWordBackward:"opt+shift?+backspace",deleteWordForward:"opt+shift?+delete",extendLineBackward:"opt+shift+up",extendLineForward:"opt+shift+down",redo:"cmd+shift+z",transposeCharacter:"ctrl+t"},Ar={deleteWordBackward:"ctrl+shift?+backspace",deleteWordForward:"ctrl+shift?+delete",redo:"ctrl+y"},Nr={},Cr=yr||mr,jr=!Cr;[].concat(Object.keys(Sr)).concat(Object.keys(Tr)).concat(Object.keys(Ar)).forEach(function(e){var t="is"+e[0].toUpperCase()+e.slice(1);if(!Nr[t]){var n=Sr[e],r=Tr[e],o=Ar[e],i=n&&Object(Er.isKeyHotkey)(n),a=r&&Object(Er.isKeyHotkey)(r),u=o&&Object(Er.isKeyHotkey)(o);Nr[t]=function(e){return!(!i||!i(e))||(!!(Cr&&a&&a(e))||!!(jr&&u&&u(e)))}}});var Pr=Nr,Fr=n(59);function Ir(e){var t=JSON.stringify(e);return Object(Fr.btoa)(encodeURIComponent(t))}function Rr(e){var t=decodeURIComponent(Object(Fr.atob)(e));return JSON.parse(t)}var Dr={deserialize:function(e,t){var n=Rr(e);return _n.n.fromJSON(n,t)},deserializeNode:function(e,t){var n=Rr(e);return _n.i.fromJSON(n,t)},serialize:function(e,t){return Ir(e.toJSON(t))},serializeNode:function(e,t){return Ir(e.toJSON(t))}},Mr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function Br(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).delimiter,n=void 0===t?"\n":t;return"document"===e.object||"block"===e.object&&_n.a.isBlockList(e.nodes)?e.nodes.map(Br).join(n):e.text}var Lr={deserialize:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.defaultBlock,r=void 0===n?"line":n,o=t.defaultMarks,i=void 0===o?[]:o,a=t.delimiter,u=void 0===a?"\n":a,s=t.toJSON,c=void 0!==s&&s;Or.Set.isSet(i)&&(i=i.toArray()),r=_n.i.createProperties(r),i=i.map(_n.h.createProperties);var l={object:"value",document:{object:"document",data:{},nodes:e.split(u).map(function(e){return Mr({},r,{object:"block",data:{},nodes:[{object:"text",text:e,marks:i}]})})}};return c?l:_n.n.fromJSON(l)},serialize:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Br(e.document,t)}},zr=n(10),qr=function(e,t){if(!e)throw new Error("Invariant failed: "+(t||""))},Ur=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Vr=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},Qr=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},Kr=0;var Wr=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Kr++,n=e.placeholder,r=e.when,o=e.style,i=void 0===o?{}:o;return qr("string"==typeof n,"You must pass `SlateReactPlaceholder` an `options.placeholder` string."),qr("string"==typeof r||"function"==typeof r,"You must pass `SlateReactPlaceholder` an `options.when` query."),{decorateNode:function(e,n,o){if(!n.query(r,e))return o();var i=o(),a=e.texts(),u=Vr(a,1)[0],s=e.texts({direction:"backward"}),c=Vr(s,1)[0],l=Vr(u,2),f=l[0],d=l[1],p=Vr(c,2),h=p[0],v=p[1],y={type:"placeholder",data:{key:t},anchor:{key:f.key,offset:0,path:d},focus:{key:h.key,offset:h.text.length,path:v}};return[].concat(Qr(i),[y])},renderDecoration:function(e,r,o){var a=e.children,u=e.decoration;if("placeholder"===u.type&&u.data.get("key")===t){var s=Ur({pointerEvents:"none",display:"inline-block",width:"0",maxWidth:"100%",whiteSpace:"nowrap",opacity:"0.333",verticalAlign:"text-top"},i);return ut.a.createElement("span",null,ut.a.createElement("span",{contentEditable:!1,style:s},n),a)}return o()}}},Jr=function(e,t){return e===t};var Hr=function(e,t){var n;void 0===t&&(t=Jr);var r,o=[],i=!1,a=function(e,n){return t(e,o[n],n)};return function(){for(var t=arguments.length,u=new Array(t),s=0;s<t;s++)u[s]=arguments[s];return i&&n===this&&u.length===o.length&&u.every(a)?r:(r=e.apply(this,u),i=!0,n=this,o=u,r)}},$r=["onBeforeInput","onBlur","onClick","onContextMenu","onCompositionEnd","onCompositionStart","onCopy","onCut","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onInput","onFocus","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onPaste","onSelect"],Yr={EDITOR:"data-slate-editor",FRAGMENT:"data-slate-fragment",KEY:"data-key",LEAF:"data-slate-leaf",LENGTH:"data-slate-length",OBJECT:"data-slate-object",OFFSET_KEY:"data-offset-key",SPACER:"data-slate-spacer",STRING:"data-slate-string",TEXT:"data-slate-object",VOID:"data-slate-void",ZERO_WIDTH:"data-slate-zero-width"},Gr={BLOCK:"["+Yr.OBJECT+'="block"]',EDITOR:"["+Yr.EDITOR+"]",INLINE:"["+Yr.OBJECT+'="inline"]',KEY:"["+Yr.KEY+"]",LEAF:"["+Yr.LEAF+"]",OBJECT:"["+Yr.OBJECT+"]",STRING:"["+Yr.STRING+"]",TEXT:"["+Yr.OBJECT+'="text"]',VOID:"["+Yr.VOID+"]",ZERO_WIDTH:"["+Yr.ZERO_WIDTH+"]"},Xr=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},Zr=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),eo=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},to=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},no=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},ro=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},oo=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},io=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},ao=/^([\w-]+)(?::(\d+))?$/;var uo={parse:function(e){var t=ao.exec(e);if(!t)throw new Error('Invalid offset key string "'+e+'".');var n=oo(t,3),r=(n[0],n[1]),o=n[2];return{key:r,index:parseInt(o,10)}},stringify:function(e){return e.key+":"+e.index}},so=function(e){var t=e.text,n=void 0===t?"":t,r=e.isTrailing,o=void 0!==r&&r;return ut.a.createElement("span",eo({},Yr.STRING,!0),n,o?"\n":null)},co=function(e){var t,n=e.length,r=void 0===n?0:n,o=e.isLineBreak,i=void 0!==o&&o;return ut.a.createElement("span",(eo(t={},Yr.ZERO_WIDTH,i?"n":"z"),eo(t,Yr.LENGTH,r),t),"\ufeff",i?ut.a.createElement("br",null):null)},lo=function(e){var t,n=e.marks,r=e.annotations,o=e.decorations,i=e.node,a=e.index,u=e.offset,s=e.text,c=e.editor,l=e.parent,f=e.block,d=e.leaves,p=uo.stringify({key:i.key,index:a}),h=void 0;if(c.query("isVoid",l))h=ut.a.createElement(co,{length:l.text.length});else if(""===s&&"block"===l.object&&""===l.text&&l.nodes.last()===i)h=ut.a.createElement(co,{isLineBreak:!0});else if(""===s)h=ut.a.createElement(co,null);else{var v=f.getLastText(),y=s.charAt(s.length-1),m=i===v,g=a===d.size-1;h=m&&g&&"\n"===y?ut.a.createElement(so,{isTrailing:!0,text:s}):ut.a.createElement(so,{text:s})}var b={editor:c,marks:n,annotations:r,decorations:o,node:i,offset:u,text:s},k=!0,w=!1,_=void 0;try{for(var x,O=n[Symbol.iterator]();!(k=(x=O.next()).done);k=!0){var E=x.value;(M=c.run("renderMark",to({},b,{mark:E,children:h,attributes:eo({},Yr.OBJECT,"mark")})))&&(h=M)}}catch(e){w=!0,_=e}finally{try{!k&&O.return&&O.return()}finally{if(w)throw _}}var S=!0,T=!1,A=void 0;try{for(var N,C=o[Symbol.iterator]();!(S=(N=C.next()).done);S=!0){var j=N.value;(M=c.run("renderDecoration",to({},b,{decoration:j,children:h,attributes:eo({},Yr.OBJECT,"decoration")})))&&(h=M)}}catch(e){T=!0,A=e}finally{try{!S&&C.return&&C.return()}finally{if(T)throw A}}var P=!0,F=!1,I=void 0;try{for(var R,D=r[Symbol.iterator]();!(P=(R=D.next()).done);P=!0){var M,B=R.value;(M=c.run("renderAnnotation",to({},b,{annotation:B,children:h,attributes:eo({},Yr.OBJECT,"annotation")})))&&(h=M)}}catch(e){F=!0,I=e}finally{try{!P&&D.return&&D.return()}finally{if(F)throw I}}var L=(eo(t={},Yr.LEAF,!0),eo(t,Yr.OFFSET_KEY,p),t);return ut.a.createElement("span",L,h)};lo.propTypes={annotations:Sn.a.list.isRequired,block:On.block.isRequired,decorations:Sn.a.list.isRequired,editor:yt.a.object.isRequired,index:yt.a.number.isRequired,leaves:yt.a.object.isRequired,marks:On.marks.isRequired,node:On.node.isRequired,offset:yt.a.number.isRequired,parent:On.node.isRequired,text:yt.a.string.isRequired};var fo=ut.a.memo(lo,function(e,t){return t.block===e.block&&t.index===e.index&&t.marks===e.marks&&t.parent===e.parent&&t.text===e.text&&t.annotations.equals(e.annotations)&&t.decorations.equals(e.decorations)}),po=ut.a.forwardRef(function(e,t){var n,r=e.annotations,o=e.block,i=e.decorations,a=e.node,u=e.parent,s=e.editor,c=e.style,l=a.key,f=a.getLeaves(r,i),d=0;return ut.a.createElement("span",to({ref:t,style:c},(eo(n={},Yr.OBJECT,a.object),eo(n,Yr.KEY,l),n)),f.map(function(e,t){var n=e.text,r=d;return d+=n.length,ut.a.createElement(fo,{key:a.key+"-"+t,block:o,editor:s,index:t,annotations:e.annotations,decorations:e.decorations,marks:e.marks,node:a,offset:r,parent:u,leaves:f,text:n})}))});po.propTypes={annotations:Sn.a.map.isRequired,block:On.block,decorations:Sn.a.list.isRequired,editor:yt.a.object.isRequired,node:On.node.isRequired,parent:On.node.isRequired,style:yt.a.object};var ho=ut.a.memo(po,function(e,t){return t.node===e.node&&"block"===t.parent.object&&e.parent.nodes.last()===e.node&&t.parent.nodes.last()!==t.node&&t.annotations.equals(e.annotations)&&t.decorations.equals(e.decorations)}),vo=An()("slate:void"),yo=function(e){function t(){var e,n,r;Xr(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=ro(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),mo.call(r),ro(r,n)}return no(t,e),Zr(t,[{key:"render",value:function(){var e,t=this.props,n=t.children,r=t.node,o=t.readOnly,i="block"===r.object?"div":"span",a=eo({},Yr.SPACER,!0),u=ut.a.createElement(i,to({style:{height:"0",color:"transparent",outline:"none",position:"absolute"}},a),this.renderText()),s=ut.a.createElement(i,{contentEditable:!!o&&null},n);this.debug("render",{props:t});var c=(eo(e={},Yr.VOID,!0),eo(e,Yr.KEY,r.key),e);return ut.a.createElement(i,to({contentEditable:!(!o&&"block"!==r.object)&&null},c),o?null:u,s)}}]),t}(ut.a.Component);yo.propTypes={block:On.block,children:yt.a.any.isRequired,editor:yt.a.object.isRequired,node:On.node.isRequired,parent:On.node.isRequired,readOnly:yt.a.bool.isRequired};var mo=function(){var e=this;this.debug=function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var i=e.props.node,a=i.key,u=i.type,s=a+" ("+u+")";vo.apply(void 0,[t,""+s].concat(r))},this.renderText=function(){var t=e.props,n=t.annotations,r=t.block,o=t.decorations,i=t.node,a=t.readOnly,u=t.editor,s=t.textRef,c=i.getFirstText();return ut.a.createElement(ho,{ref:s,annotations:n,block:"block"===i.object?i:r,decorations:o,editor:u,key:c.key,node:c,parent:i,readOnly:a})}},go=An()("slate:node"),bo=function(e){function t(){var e,n,r;Xr(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=ro(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),ko.call(r),ro(r,n)}return no(t,e),Zr(t,[{key:"shouldComponentUpdate",value:function(e){var t=this.props,n=t.editor.run("shouldNodeComponentUpdate",t,e),r=e,o=t;if(null!=n){if(Object(Nn.a)(!1,'As of slate-react@0.22 the `shouldNodeComponentUpdate` middleware is deprecated. You can pass specific values down the tree using React\'s built-in "context" construct instead.'),n)return!0;Object(Nn.a)(!1!==n,"Returning false in `shouldNodeComponentUpdate` does not disable Slate's internal `shouldComponentUpdate` logic. If you want to prevent updates, use React's `shouldComponentUpdate` instead.")}return r.readOnly!==o.readOnly||(r.node!==o.node||(!!(!r.selection&&o.selection||r.selection&&!o.selection||r.selection&&o.selection&&!r.selection.equals(o.selection))||(!r.annotations.equals(o.annotations)||!r.decorations.equals(o.decorations))))}},{key:"render",value:function(){var e,n=this;this.debug("render",this);var r=this.props,o=r.annotations,i=r.block,a=r.decorations,u=r.editor,s=r.node,c=r.parent,l=r.readOnly,f=r.selection,d=s.getDecorations(u),p=s.nodes.toArray().map(function(e,r){var c="text"===e.object?ho:t,p=f&&wo(s,r,f),h=d.concat(a).map(function(e){return wo(s,r,e)}).filter(function(e){return e}),v=o.map(function(e){return wo(s,r,e)}).filter(function(e){return e});return ut.a.createElement(c,{block:"block"===s.object?s:i,editor:u,annotations:v,decorations:h,selection:p,key:e.key,node:e,parent:s,readOnly:l,ref:function(e){e?n.tmp.nodeRefs[r]=e:delete n.tmp.nodeRefs[r]}})}),h=(eo(e={},Yr.OBJECT,s.object),eo(e,Yr.KEY,s.key),eo(e,"ref",this.ref),e);s.isLeafBlock()&&("rtl"===s.getTextDirection()&&(h.dir="rtl"));var v=void 0;"block"===s.object?v="renderBlock":"document"===s.object?v="renderDocument":"inline"===s.object&&(v="renderInline");var y=u.run(v,{attributes:h,children:p,editor:u,isFocused:!!f&&f.isFocused,isSelected:!!f,node:s,parent:c,readOnly:l});return u.isVoid(s)?ut.a.createElement(yo,to({},this.props,{textRef:function(e){e?n.tmp.nodeRefs[0]=e:delete n.tmp.nodeRefs[0]}}),y):y}}]),t}(ut.a.Component);bo.propTypes={annotations:Sn.a.map.isRequired,block:On.block,decorations:Sn.a.list.isRequired,editor:yt.a.object.isRequired,node:On.node.isRequired,parent:On.node,readOnly:yt.a.bool.isRequired,selection:On.selection};var ko=function(){var e=this;this.tmp={nodeRefs:{}},this.ref=ut.a.createRef(),this.debug=function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var i=e.props.node,a=i.key,u=i.type;go.apply(void 0,[t,a+" ("+u+")"].concat(r))}};function wo(e,t,n){if(n.isUnset)return null;var r=e.nodes.get(t),o=n,i=o.start,a=o.end,u=i.path,s=a.path,c=u.first(),l=s.first();if(c===t)i=i.setPath(u.rest());else if(c<t&&t<=l)if("text"===r.object)i=i.moveTo(_n.j.create([t]),0).setKey(r.key);else{var f=r.texts(),d=oo(f,1)[0],p=oo(d,2),h=p[0],v=p[1];i=i.moveTo(v,0).setKey(h.key)}else i=null;if(l===t)a=a.setPath(s.rest());else if(c<=t&&t<l)if("text"===r.object){var y=r.text.length;a=a.moveTo(_n.j.create([t]),y).setKey(r.key)}else{var m=r.texts({direction:"backward"}),g=oo(m,1)[0],b=oo(g,2),k=b[0],w=b[1];a=a.moveTo(w,k.text.length).setKey(k.key)}else a=null;return i&&a?n=(n=n.setAnchor(i)).setFocus(a):null}var _o=["auto","overlay","scroll"],xo=yr&&!!window.navigator.userAgent.match(/os 11_/i);function Oo(e){if(!xo&&e.anchorNode){var t=jn()(e.anchorNode),n=function(e,t){for(var n=e.parentNode,r=void 0;!r&&n.parentNode;){var o=t.getComputedStyle(n).overflowY;if(_o.includes(o)){r=n;break}n=n.parentNode}return r||t.document.body}(e.anchorNode,t),r=n===t.document.body||n===t.document.documentElement,o=Fn()(e),i=e.getRangeAt(0).cloneRange();i.collapse(o);var a=i.getBoundingClientRect();dr&&i.collapsed&&0===a.top&&0===a.height&&(0===i.startOffset?i.setEnd(i.endContainer,1):i.setStart(i.startContainer,i.startOffset-1),0===(a=i.getBoundingClientRect()).top&&0===a.height&&i.getClientRects().length&&(a=i.getClientRects()[0]));var u=void 0,s=void 0,c=void 0,l=void 0,f=0,d=0,p=0,h=0,v=0,y=0,m=0,g=0;if(r){u=t.innerWidth,s=t.innerHeight,c=t.pageYOffset,l=t.pageXOffset}else{var b=n.offsetWidth,k=n.offsetHeight,w=n.scrollTop,_=n.scrollLeft,x=t.getComputedStyle(n),O=x.borderTopWidth,E=x.borderBottomWidth,S=x.borderLeftWidth,T=x.borderRightWidth,A=x.paddingTop,N=x.paddingBottom,C=x.paddingLeft,j=x.paddingRight,P=n.getBoundingClientRect();u=b,s=k,f=P.top+parseInt(O,10),d=P.left+parseInt(S,10),p=parseInt(O,10)+parseInt(E,10),h=parseInt(S,10)+parseInt(T,10),v=parseInt(A,10),y=parseInt(N,10),m=parseInt(C,10),g=parseInt(j,10),c=w,l=_}var F=a.top+c-f,I=a.left+l-d,R=l,D=c;I<l?R=I-m:I+a.width+h>l+u&&(R=I+h+g-u),F<c?D=F-v:F+a.height+p>c+s&&(D=F+p+y+a.height-s),r?t.scrollTo(R,D):(n.scrollTop=D,n.scrollLeft=R)}}function Eo(e){if(pr){var t=window.document.body.createTextRange();t.collapse(),t.select()}else e.removeAllRanges()}var So=/Permission denied to access property "nodeType"/,To=An()("slate:content");To.update=An()("slate:update");var Ao=function(e){function t(){var e,n,r;Xr(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=ro(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r.tmp={isUpdatingSelection:!1,nodeRef:ut.a.createRef(),nodeRefs:{},contentKey:0},r.ref=ut.a.createRef(),r.setRef=function(e){r.ref.current=e,r.props.editor.el=e},r.handlers=$r.reduce(function(e,t){return e[t]=function(e){return r.onEvent(t,e)},e},{}),r.updateSelection=function(){var e=r.props.editor,t=e.value.selection,n=t.isBackward,o=jn()(r.ref.current),i=o.getSelection(),a=o.document.activeElement;if(To.update.enabled&&To.update("updateSelection",{selection:t.toJSON()}),i){var u=i.rangeCount,s=i.anchorNode,c=!1;if(t.isBlurred&&a===r.ref.current&&(r.ref.current.blur(),c=!0),t.isUnset&&u&&r.isInEditor(s)&&(Eo(i),c=!0),t.isFocused&&a!==r.ref.current&&(r.ref.current.focus({preventScroll:!0}),c=!0),t.isFocused&&t.isSet){var l=!!i.rangeCount&&i.getRangeAt(0),f=e.findDOMRange(t);if(!f)return void Object(Nn.a)(!1,"Unable to find a native DOM range from the current selection.");var d=f.startContainer,p=f.startOffset,h=f.endContainer,v=f.endOffset;if(l&&(d===l.startContainer&&p===l.startOffset&&h===l.endContainer&&v===l.endOffset||d===l.endContainer&&p===l.endOffset&&h===l.startContainer&&v===l.startOffset))return;c=!0,r.tmp.isUpdatingSelection=!0,fr||(Eo(i),i.setBaseAndExtent?n?i.setBaseAndExtent(f.endContainer,f.endOffset,f.startContainer,f.startOffset):i.setBaseAndExtent(f.startContainer,f.startOffset,f.endContainer,f.endOffset):i.addRange(f)),Oo(i),setTimeout(function(){r.tmp.isUpdatingSelection=!1,To.update("updateSelection:setTimeout",{anchorOffset:o.getSelection().anchorOffset})})}c&&(To.enabled||To.update.enabled)&&(To("updateSelection",{selection:t,native:i,activeElement:a}),To.update("updateSelection:applied",{selection:t.toJSON(),native:{anchorOffset:i.anchorOffset,focusOffset:i.focusOffset}}))}},r.isInEditor=function(e){var t=void 0;try{t=3===e.nodeType?e.parentNode:e}catch(e){if(fr&&So.test(e.message))return!1;throw e}return t.isContentEditable&&(t===r.ref.current||t.closest(Gr.EDITOR)===r.ref.current)},r.onNativeSelectionChange=wr()(function(e){if(!r.props.readOnly){var t=jn()(e.target),n=t.document.activeElement;To.update("onNativeSelectionChange",{anchorOffset:t.getSelection().anchorOffset}),n===r.ref.current&&r.props.onEvent("onSelect",e)}},100),ro(r,n)}return no(t,e),Zr(t,[{key:"componentDidCatch",value:function(e,t){To("componentDidCatch",{error:e,info:t}),this.setState({})}},{key:"componentDidMount",value:function(){jn()(this.ref.current).document.addEventListener("selectionchange",this.onNativeSelectionChange),br&&this.ref.current.addEventListener("beforeinput",this.handlers.onBeforeInput),this.updateSelection(),this.props.onEvent("onComponentDidMount")}},{key:"componentWillUnmount",value:function(){var e=jn()(this.ref.current);e&&e.document.removeEventListener("selectionchange",this.onNativeSelectionChange),br&&this.ref.current.removeEventListener("beforeinput",this.handlers.onBeforeInput),this.props.onEvent("onComponentWillUnmount")}},{key:"componentDidUpdate",value:function(){To.update("componentDidUpdate"),this.updateSelection(),this.props.onEvent("onComponentDidUpdate")}},{key:"onEvent",value:function(e,t){To("onEvent",e);var n=t.nativeEvent||t,r="keydown"===t.type&&(Pr.isUndo(n)||Pr.isRedo(n));if(!this.tmp.isUpdatingSelection&&!r||"onSelect"!==e&&"onBlur"!==e&&"onFocus"!==e){if(!vr&&"onSelect"===e){var o=this.props.editor,i=o.value.selection,a=jn()(t.target).getSelection(),u=o.findRange(a);if(u&&u.equals(i.toRange()))return void this.updateSelection()}if("onDragEnd"===e||"onDragEnter"===e||"onDragExit"===e||"onDragLeave"===e||"onDragOver"===e||"onDragStart"===e||"onDrop"===e)if(t.target.closest(Gr.EDITOR)!==this.ref.current)return;("onBeforeInput"!==e&&"onBlur"!==e&&"onCompositionEnd"!==e&&"onCompositionStart"!==e&&"onCopy"!==e&&"onCut"!==e&&"onFocus"!==e&&"onInput"!==e&&"onKeyDown"!==e&&"onKeyUp"!==e&&"onPaste"!==e&&"onSelect"!==e||this.isInEditor(t.target))&&this.props.onEvent(e,t)}}},{key:"render",value:function(){var e,n=this.props,r=this.handlers,o=n.id,i=n.className,a=n.readOnly,u=n.editor,s=n.tabIndex,c=n.role,l=n.tagName,f=n.spellCheck,d=u.value,p=l,h=d.document,v=d.selection,y=to({outline:"none",whiteSpace:"pre-wrap",wordWrap:"break-word"},a?{}:{WebkitUserModify:"read-write-plaintext-only"},n.style);To("render",{props:n}),To.update("render",this.tmp.contentKey,h.text),this.props.onEvent("onRender");var m=(eo(e={},Yr.EDITOR,!0),eo(e,Yr.KEY,h.key),e),g=xr()(this.props,Object.keys(t.propTypes));return ut.a.createElement(p,to({},g,{key:this.tmp.contentKey},r,m,{ref:this.setRef,contentEditable:!a||null,suppressContentEditableWarning:!0,id:o,className:i,autoCorrect:n.autoCorrect?"on":"off",spellCheck:f,style:y,role:a?null:c||"textbox",tabIndex:s,"data-gramm":!!g["data-gramm"]&&void 0}),ut.a.createElement(bo,{annotations:d.annotations,block:null,decorations:Object(Or.List)(),editor:u,node:h,parent:null,readOnly:a,selection:v,ref:this.tmp.nodeRef}))}}]),t}(ut.a.Component);Ao.propTypes={autoCorrect:yt.a.bool.isRequired,className:yt.a.string,contentKey:yt.a.number,editor:yt.a.object.isRequired,id:yt.a.string,onEvent:yt.a.func.isRequired,readOnly:yt.a.bool.isRequired,role:yt.a.string,spellCheck:yt.a.bool.isRequired,style:yt.a.object,tabIndex:yt.a.number,tagName:yt.a.string},Ao.defaultProps={style:{},tagName:"div"};var No=[].concat(io($r),["commands","decorateNode","queries","renderAnnotation","renderBlock","renderDecoration","renderDocument","renderEditor","renderInline","renderMark","schema"]);function Co(){return{queries:{findDOMNode:function(e,t){t=_n.j.create(t);var n=e.tmp.contentRef.current;return n?t.size?function e(t,n){if(!t)return null;if(!n.size)return t.ref?t.ref.current||null:t||null;var r=n.first(),o=n.rest();return e(t.tmp.nodeRefs[r],o)}(n.tmp.nodeRef.current,t):n.ref.current||null:null},findDOMPoint:function(e,t){var n=e.findDOMNode(t.path),r=0;if(!n)return null;var o=Array.from(n.querySelectorAll(Gr.STRING+", "+Gr.ZERO_WIDTH)),i=!0,a=!1,u=void 0;try{for(var s,c=o[Symbol.iterator]();!(i=(s=c.next()).done);i=!0){var l=s.value,f=l.childNodes[0],d=f.textContent.length,p=d;l.hasAttribute(Yr.LENGTH)&&(p=parseInt(l.getAttribute(Yr.LENGTH),10));var h=r+p;if(t.offset<=h)return{node:f,offset:Math.min(d,Math.max(0,t.offset-r))};r=h}}catch(e){a=!0,u=e}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}return null},findDOMRange:function(e,t){var n=t.anchor,r=t.focus,o=t.isBackward,i=t.isCollapsed,a=e.findDOMPoint(n),u=i?a:e.findDOMPoint(r);if(!a||!u)return null;var s=jn()(a.node).document.createRange(),c=o?u:a,l=o?a:u;return s.setStart(c.node,c.offset),s.setEnd(l.node,l.offset),s},findEventRange:function(e,t){t.nativeEvent&&(t=t.nativeEvent);var n=t,r=n.clientX,o=n.clientY,i=n.target;if(null==r||null==o)return null;var a=e.value.document,u=e.findPath(t.target);if(!u)return null;var s=a.getNode(u);if(e.isVoid(s)){var c=i.getBoundingClientRect(),l="inline"===s.object?r-c.left<c.left+c.width-r:o-c.top<c.top+c.height-o,f=a.createRange(),d=l?"moveToEndOfNode":"moveToStartOfNode",p=a[l?"getPreviousText":"getNextText"](u);return p?f[d](p):null}var h=jn()(i),v=void 0;if(h.document.caretRangeFromPoint)v=h.document.caretRangeFromPoint(r,o);else if(h.document.caretPositionFromPoint){var y=h.document.caretPositionFromPoint(r,o);(v=h.document.createRange()).setStart(y.offsetNode,y.offset),v.setEnd(y.offsetNode,y.offset)}else if(h.document.body.createTextRange){v=h.document.body.createTextRange();try{v.moveToPoint(r,o)}catch(e){return null}}return e.findRange(v)},findNode:function(e,t){var n=e.findPath(t);return n?e.value.document.getNode(n):null},findPath:function(e,t){var n=e.tmp.contentRef.current,r=t;if(r.hasAttribute(Yr.KEY)||(r=r.closest(Gr.KEY)),!r||!r.getAttribute(Yr.KEY))return null;if(r===n.ref.current)return _n.j.create([]);var o=function e(t,n){if(r===t)return n;if(!t.ref)return null;if(r===t.ref.current)return n;if(!t.tmp)return null;var o=t.tmp.nodeRefs,i=Object.keys(o),a=!0,u=!1,s=void 0;try{for(var c,l=i[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var f=c.value,d=o[f],p=parseInt(f,10),h=e(d,[].concat(io(n),[p]));if(h)return h}}catch(e){u=!0,s=e}finally{try{!a&&l.return&&l.return()}finally{if(u)throw s}}return null}(n.tmp.nodeRef.current,[]);return o?_n.j.create(o):null},findPoint:function(e,t,n){var r=function(e,t){if(1===e.nodeType&&e.childNodes.length){var n=t===e.childNodes.length,r=n?"backward":"forward";for(e=jo(e,n?t-1:t,r);1===e.nodeType&&e.childNodes.length;){var o=n?e.childNodes.length-1:0;e=jo(e,o,r)}t=n?e.textContent.length:0}return{node:e,offset:t}}(t,n),o=r.node,i=r.offset,a=jn()(t),u=o.parentNode,s=u.closest(Gr.LEAF),c=void 0,l=void 0,f=void 0;if(s){c=s.closest(Gr.TEXT);var d=a.document.createRange();d.setStart(c,0),d.setEnd(o,i);var p=d.cloneContents(),h=p.querySelectorAll(Gr.ZERO_WIDTH);Array.from(h).forEach(function(e){e.parentNode.removeChild(e)}),l=p.textContent.length,f=c}else{var v=u.closest(Gr.VOID);if(!v)return null;if(!(s=v.querySelector(Gr.LEAF)))return null;c=s.closest(Gr.TEXT),l=(f=s).textContent.length}l===f.textContent.length&&u.hasAttribute(Yr.ZERO_WIDTH)&&l--;var y=e.findPath(c);return y?e.value.document.createPoint({path:y,offset:l}):null},findRange:function(e,t){var n=t.anchorNode||t.startContainer;if(!n)return null;var r=jn()(n);(t instanceof r.Range||r.StaticRange&&t instanceof r.StaticRange)&&(t={anchorNode:t.startContainer,anchorOffset:t.startOffset,focusNode:t.endContainer,focusOffset:t.endOffset});var o=t,i=o.anchorNode,a=o.anchorOffset,u=o.focusNode,s=o.focusOffset,c=o.isCollapsed,l=e.value,f=e.findPoint(i,a),d=c?f:e.findPoint(u,s);return f&&d?l.document.createRange({anchor:f,focus:d}):null},findSelection:function(e,t){var n=e.value,r=n.document;if(!t.rangeCount)return null;var o=e.findRange(t);if(!o)return null;var i=o,a=i.anchor,u=i.focus,s=r.getNode(a.path),c=r.getNode(u.path),l=r.getClosestInline(a.path),f=r.getClosestInline(u.path),d=r.getClosestBlock(u.path),p=r.getClosestBlock(a.path);if(p&&!e.isVoid(p)&&0===a.offset&&d&&e.isVoid(d)&&0!==u.offset&&(o=o.setFocus(u.setOffset(0))),l&&!e.isVoid(l)&&a.offset===s.text.length){var h=r.getClosestBlock(a.path),v=r.getDepth(h.key),y=_n.j.drop(a.path,v),m=h.texts({path:y}),g=oo(m,1)[0];if(g){var b=oo(g,2)[1],k=a.path.slice(0,v).concat(b);o=o.moveAnchorTo(k,0)}}if(f&&!e.isVoid(f)&&u.offset===c.text.length){var w=r.getClosestBlock(u.path),_=r.getDepth(w.key),x=_n.j.drop(u.path,_),O=w.texts({path:x}),E=oo(O,1)[0];if(E){var S=oo(E,2)[1],T=u.path.slice(0,_).concat(S);o=o.moveFocusTo(T,0)}}var A=r.createSelection(o);return A=(A=A.setIsFocused(!0)).set("marks",n.selection.marks)}}}}function jo(e,t,n){for(var r=e.childNodes,o=r[t],i=t,a=!1,u=!1;(8===o.nodeType||1===o.nodeType&&0===o.childNodes.length||1===o.nodeType&&"false"===o.getAttribute("contenteditable"))&&(!a||!u);)i>=r.length?(a=!0,i=t-1,n="backward"):i<0?(u=!0,i=t+1,n="forward"):(o=r[i],"forward"===n&&i++,"backward"===n&&i--);return o||null}function Po(e,t){if(e===t)return null;var n=function(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++)if(e.charAt(r)!==t.charAt(r))return r;return e.length!==t.length?n:null}(e,t),r=function(e,t,n){for(var r=e.length,o=t.length,i=Math.min(r,o,n),a=0;a<i;a++){if(e.charAt(r-a-1)!==t.charAt(o-a-1))return a}return e.length!==t.length?i:null}(e,t,Math.min(e.length-n,t.length-n));return{start:n,end:r,total:n+r}}function Fo(e,t){return e.slice(t.start,e.length-t.end)}var Io=An()("slate:composition-manager"),Ro=String.fromCharCode(65279),Do=ct.a.unstable_flushControlled;function Mo(e,t){Do(function(){t(),e.controller.flush()})}function Bo(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=t,o=e,i=0;-1!==i&&-1!==(i=o.indexOf(Ro,i));)r>i&&r--,o=""+o.slice(0,i)+o.slice(i+1);var a=o.charAt(o.length-1);n&&"\n"===a&&(o=o.slice(0,-1));var u=o.length;return r>u&&(r=u),{text:o,offset:r}}function Lo(e){var t=new window.MutationObserver(function(e){var t;Io("flush"),(t=s).push.apply(t,io(e)),f()}),n=null,r={rootEl:null,diff:null,range:null,domNode:null};function o(){Io("clearAction"),r.diff=null,r.domNode=null}function i(){Io("applyDiff");var t=r.diff;if(null!=t){Io("applyDiff:run");var n=e.value.document,o=e.value.selection.moveAnchorTo(t.path,t.start).moveFocusTo(t.path,t.end);o=n.resolveRange(o),e.insertTextAtRange(o,t.insertText)}}function a(){Io("splitBlock"),Mo(e,function(){i(),r.range?e.select(r.range):Io("splitBlock:NO-SELECTION"),e.splitBlock().focus().restoreDOM(),o()})}var u=null,s=[],c=null,l=!1;function f(){u&&(window.cancelAnimationFrame(u),u=null),l=!0,c&&window.cancelAnimationFrame(c),c=window.requestAnimationFrame(function(){s.length>0&&function(t){if(Io("flushAction",t.length,t),r.range&&!r.range.isCollapsed)return void Mo(e,function(){e.select(r.range).deleteBackward().focus().restoreDOM()});if(t.length>1){if(t.find(function(t){if("childList"!==t.type)return!1;if(0===t.addedNodes.length)return!1;var n=t.addedNodes[0];if(n.nodeType===window.Node.TEXT_NODE&&"\n"===n.textContent)return!0;if(n.nodeType!==window.Node.ELEMENT_NODE)return!1;var r=n.dataset.key;return null!=r&&!!e.value.document.getClosestBlock(r)}))return void a()}var u=t[0];"characterData"===u.type?function(t){Io("resolveDOMNode");var n=e.value.document,o=t.closest("[data-key]").dataset.key,i=n.getPath(o),a=n.getClosestBlock(o),u=n.getDescendant(o),s=u.text,c=a.nodes.last()===u,l=Bo(t.textContent,0,c).text;if(l===s)return void(r.diff=null);var f=function(e,t){var n=Po(e,t);if(null==n)return null;var r=Fo(t,n),o=Fo(e,n);return{start:n.start,end:e.length-n.end,cursor:n.start+r.length,insertText:r,removeText:o}}(s,l);r.diff={path:i,start:f.start,end:f.end,insertText:f.insertText},Io("resolveDOMNode:diff",r.diff)}(u.target.parentNode):"childList"===u.type&&(u.removedNodes.length>0?1===t.length?function(t){if(Io("removeNode"),t.nodeType!==window.Node.ELEMENT_NODE)return;var n=e.value,r=n.document,o=n.selection,i=e.findNode(t),a=r.resolveRange(o.moveToRangeOfNode(i));Mo(e,function(){e.select(a).delete().restoreDOM()})}(u.removedNodes[0]):(Io("mergeBlock"),n.requestAnimationFrame(function(){Mo(e,function(){i(),e.select(r.range).deleteBackward().focus().restoreDOM(),o()})})):u.addedNodes.length>0&&a())}(s),c=null,s=[],l=!1})}return{clearDiff:function(){Io("clearDIff"),r.diff=null},connect:function(){Io("connect",{rootEl:o});var o=e.findDOMNode([]);r.rootEl!==o&&(Io("connect:run"),n=jn()(o),t.observe(o,{childList:!0,characterData:!0,attributes:!0,subtree:!0,characterDataOldValue:!0}))},disconnect:function(){Io("disconnect"),t.disconnect(),r.rootEl=null},onKeyDown:f,onCompositionStart:function(){Io("onCompositionStart")},onCompositionEnd:function(){Io("onCompositionEnd"),window.setTimeout(function(){r.diff&&(Io("onCompositionEnd:applyDiff"),Mo(e,function(){i();var t=n.getSelection().getRangeAt(0),r=Bo(t.startContainer.textContent,t.startOffset),o=e.findRange({anchorNode:t.startContainer,anchorOffset:0,focusNode:t.startContainer,focusOffset:0,isCollapsed:!0}).moveTo(r.offset);e.select(o).focus().restoreDOM()})),o()},20)},onSelect:function(t){Io("onSelect:try"),t=t.nativeEvent?t.nativeEvent:t,window.cancelAnimationFrame(u),u=null,l||(u=window.requestAnimationFrame(function(){Io("onSelect:save-selection");var n,a=jn()(t.target).getSelection(),u=e.findRange(a),s=Bo(a.anchorNode.textContent,a.anchorOffset),c=Bo(a.focusNode.textContent,a.focusOffset);u.anchor.offset!==s.offset&&(u=u.set("anchor",u.anchor.set("offset",s.offset))),u.focus.offset!==c.offset&&(u=u.set("focus",u.focus.set("offset",c.offset))),Io("onSelect:save-data",{domSelection:(n=a,{anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}),range:u.toJS()}),a.isCollapsed&&r.node!==a.anchorNode&&null!=r.diff&&(Io("onSelect:applyDiff",r.diff),i(),e.select(u),o()),r.range=u,r.node=a.anchorNode}))}}}function zo(e){var t=new Lo(e.editor);return{onComponentDidMount:function(){t.connect()},onComponentDidUpdate:function(){t.connect()},onComponentWillUnmount:function(){t.disconnect()},onCompositionEnd:function(){t.onCompositionEnd()},onCompositionStart:function(){t.onCompositionStart()},onRender:function(){t.disconnect(),t.clearDiff()},onSelect:function(e){!function(e){var t=e.getSelection(),n=t.anchorNode;if(null!=n){var r=n.parentElement.dataset;if(!!r&&"n"===r.slateZeroWidth&&1===n.textContent.length&&0!==t.anchorOffset){var o=e.document.createRange();o.setStart(n,0),o.setEnd(n,0),t.removeAllRanges(),t.addRange(o)}}}(jn()(e.target)),t.onSelect(e)}}}function qo(){var e={},t=!0,n=!1,r=void 0;try{for(var o,i=$r[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){e[o.value]=function(e,t,n){}}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}return e}var Uo={FRAGMENT:"application/x-slate-fragment",HTML:"text/html",NODE:"application/x-slate-node",RICH:"text/rtf",TEXT:"text/plain"};function Vo(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window;Object(Nn.a)(!1,"As of slate-react@0.22 the `findDOMNode(key)` helper is deprecated in favor of `editor.findDOMNode(path)`."),_n.i.isNode(e)&&(e=e.key);var n=t.document.querySelector("["+Yr.KEY+'="'+e+'"]');if(!n)throw new Error('Unable to find a DOM node for "'+e+'". This is often because of forgetting to add `props.attributes` to a custom component.');return n}var Qo=Uo.FRAGMENT,Ko=Uo.HTML,Wo=Uo.TEXT;function Jo(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};Object(zr.a)(!_n.n.isValue(t),"As of Slate 0.42.0, the `cloneFragment` utility takes an `editor` instead of a `value`.");var r=jn()(e.target),o=r.getSelection(),i=t.value,a=i.document,u=i.fragment,s=i.selection,c=s.start,l=s.end,f=a.getClosestVoid(c.path,t),d=a.getClosestVoid(l.path,t);if(!o.isCollapsed||f){var p=Dr.serializeNode(u),h=o.getRangeAt(0),v=h.cloneContents(),y=v.childNodes[0];if(v.childNodes.forEach(function(e){e.textContent&&""!==e.textContent.trim()&&(y=e)}),d){var m=h.cloneRange(),g=Vo(d,r);m.setEndAfter(g),v=m.cloneContents()}if(f&&(y=v.childNodes[0].childNodes[1].firstChild),[].slice.call(v.querySelectorAll(Gr.ZERO_WIDTH)).forEach(function(e){var t="n"===e.getAttribute(Yr.ZERO_WIDTH);e.textContent=t?"\n":""}),3===y.nodeType){var b=r.document.createElement("span");b.style.whiteSpace="pre",b.appendChild(y),v.appendChild(b),y=b}y.setAttribute(Yr.FRAGMENT,p);var k=_n.n.create({document:u}),w=Lr.serialize(k),_=r.document.createElement("div");if(_.appendChild(v),e.clipboardData&&e.clipboardData.setData&&!pr)return e.preventDefault(),e.clipboardData.setData(Wo,w),e.clipboardData.setData(Qo,p),e.clipboardData.setData(Ko,_.innerHTML),void n();var x=e.target.closest(Gr.EDITOR);_.setAttribute("contenteditable",!0),_.style.position="absolute",_.style.left="-9999px",x.appendChild(_),o.selectAllChildren(_),r.requestAnimationFrame(function(){x.removeChild(_),Eo(o),o.addRange(h),n()})}}var Ho=Uo.FRAGMENT,$o=Uo.HTML,Yo=Uo.NODE,Go=Uo.RICH,Xo=Uo.TEXT,Zo=/ data-slate-fragment="([^\s"]+)"/;function ei(e){!pr&&e.nativeEvent&&(e=e.nativeEvent);var t=e.dataTransfer||e.clipboardData,n=ti(t,Ho),r=ti(t,Yo),o=ti(t,$o),i=ti(t,Go),a=ti(t,Xo),u=void 0;if(!n&&o&&~o.indexOf(" "+Yr.FRAGMENT+'="')){var s=Zo.exec(o),c=oo(s,2),l=(c[0],c[1]);l&&(n=l)}if(a){var f=function(e){var t="SLATE-DATA-EMBED::";if(e.substring(0,t.length)!==t)return{TEXT:e};try{return JSON.parse(e.substring(t.length))}catch(e){throw new Error("Unable to parse custom Slate drag event data.")}}(a);f[Ho]&&(n=f[Ho]),f[Yo]&&(r=f[Yo]),f[Xo]&&(a=f[Xo])}n&&(n=Dr.deserializeNode(n)),r&&(r=Dr.deserializeNode(r));try{t.items&&t.items.length?u=Array.from(t.items).map(function(e){return"file"===e.kind?e.getAsFile():null}).filter(function(e){return e}):t.files&&t.files.length&&(u=Array.from(t.files))}catch(e){t.files&&t.files.length&&(u=Array.from(t.files))}var d={files:u,fragment:n,html:o,node:r,rich:i,text:a};return d.type=function(e){return e.fragment?"fragment":e.node?"node":e.rich&&e.html?"html":e.rich&&e.text?"text":e.files&&e.files.length?"files":e.html?"html":e.text?"text":"unknown"}(d),d}function ti(e,t){return e.types&&e.types.length?-1!==Array.from(e.types).indexOf(t)&&e.getData(t)||null:t===Xo&&e.getData("Text")||null}var ni=Uo.TEXT;function ri(e,t,n){var r=Uo[t.toUpperCase()];if(!r)throw new Error('Cannot set unknown transfer type "'+r+'".');e.nativeEvent&&(e=e.nativeEvent);var o=e.dataTransfer||e.clipboardData;try{o.setData(r,n),o.setData("text",o.getData("text"))}catch(e){var i="SLATE-DATA-EMBED::",a=o.getData(ni),u={};if(a.substring(0,i.length)===i)try{u=JSON.parse(a.substring(i.length))}catch(e){throw new Error("Failed to parse Slate data from `DataTransfer` object.")}else u[ni]=a;u[r]=n;var s=""+i+JSON.stringify(u);o.setData(ni,s)}}var oi=An()("slate:after");var ii=An()("slate:before");function ai(){var e,t,n,r,o,i,a,u=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=u.plugins,c=void 0===s?[]:s,l=(e=null,t=0,n=!1,r=!1,o=!1,{onBeforeInput:function(e,t,n){var r=!!e.nativeEvent;t.readOnly||r&&br||(ii("onBeforeInput",{event:e}),n())},onBlur:function(t,n,o){if(!r&&!n.readOnly){var i=t.relatedTarget,a=t.target,u=jn()(a);if(e!==u.document.activeElement){if(i){var s=n.findDOMNode([]);if(i===s)return;if(i.hasAttribute(Yr.SPACER))return;var c=n.findNode(i);if(s.contains(i)&&c&&!n.isVoid(c))return}ii("onBlur",{event:t}),o()}}},onClick:function(e,t,n){ii("onClick",{event:e}),n()},onCompositionEnd:function(e,r,o){var i=t;window.requestAnimationFrame(function(){t>i||(n=!1)}),ii("onCompositionEnd",{event:e}),o()},onCompositionStart:function(e,r,o){n=!0,t++,r.value.selection.isCollapsed||r.delete(),ii("onCompositionStart",{event:e}),o()},onCopy:function(e,t,n){var o=jn()(e.target);r=!0,o.requestAnimationFrame(function(){return r=!1}),ii("onCopy",{event:e}),n()},onCut:function(e,t,n){if(!t.readOnly){var o=jn()(e.target);r=!0,o.requestAnimationFrame(function(){return r=!1}),ii("onCut",{event:e}),n()}},onDragEnd:function(e,t,n){o=!1,ii("onDragEnd",{event:e}),n()},onDragEnter:function(e,t,n){ii("onDragEnter",{event:e}),n()},onDragExit:function(e,t,n){ii("onDragExit",{event:e}),n()},onDragLeave:function(e,t,n){ii("onDragLeave",{event:e}),n()},onDragOver:function(e,t,n){var r=t.findNode(e.target);r&&!t.isVoid(r)||e.preventDefault(),pr&&e.preventDefault(),o||(o=!0,pr||(e.nativeEvent.dataTransfer.dropEffect="move")),ii("onDragOver",{event:e}),n()},onDragStart:function(e,t,n){o=!0,ii("onDragStart",{event:e}),n()},onDrop:function(e,t,n){t.readOnly||(e.preventDefault(),ii("onDrop",{event:e}),n())},onFocus:function(t,n,o){if(!r&&!n.readOnly){var i=n.findDOMNode([]),a=jn()(t.target);e=a.document.activeElement,fr&&t.target!==i?i.focus():(ii("onFocus",{event:t}),o())}},onInput:function(e,t,r){n||t.value.selection.isBlurred||(ii("onInput",{event:e}),r())},onKeyDown:function(e,t,r){t.readOnly||(n?Pr.isCompose(e)&&e.preventDefault():(!yr&&(Pr.isBold(e)||Pr.isDeleteBackward(e)||Pr.isDeleteForward(e)||Pr.isDeleteLineBackward(e)||Pr.isDeleteLineForward(e)||Pr.isDeleteWordBackward(e)||Pr.isDeleteWordForward(e)||Pr.isItalic(e)||Pr.isRedo(e)||Pr.isSplitBlock(e)||Pr.isTransposeCharacter(e)||Pr.isUndo(e))&&e.preventDefault(),ii("onKeyDown",{event:e}),r()))},onPaste:function(e,t,n){t.readOnly||(e.preventDefault(),ii("onPaste",{event:e}),n())},onSelect:function(t,o,i){if(!r&&!n&&!o.readOnly){var a=jn()(t.target);e=a.document.activeElement,ii("onSelect",{event:t}),i()}}}),f=(i=null,a=!1,{onBeforeInput:function(e,t,n){var r=t.value;if(e.nativeEvent)return e.preventDefault(),t.insertText(e.data),n();var o=e.getTargetRanges(),i=oo(o,1)[0];if(!i)return n();oi("onBeforeInput",{event:e}),e.preventDefault();var a=r.document,u=r.selection,s=t.findRange(i);switch(e.inputType){case"deleteByDrag":case"deleteByCut":case"deleteContent":case"deleteContentBackward":case"deleteContentForward":t.deleteAtRange(s);break;case"deleteWordBackward":t.deleteWordBackwardAtRange(s);break;case"deleteWordForward":t.deleteWordForwardAtRange(s);break;case"deleteSoftLineBackward":case"deleteHardLineBackward":t.deleteLineBackwardAtRange(s);break;case"deleteSoftLineForward":case"deleteHardLineForward":t.deleteLineForwardAtRange(s);break;case"insertLineBreak":case"insertParagraph":a.hasVoidParent(u.start.path,t)?t.moveToStartOfNextText():t.splitBlockAtRange(s);break;case"insertFromYank":case"insertReplacementText":case"insertText":var c=null==e.data?e.dataTransfer.getData("text/plain"):e.data;if(null==c)break;t.insertTextAtRange(s,c,u.marks),u.marks&&r.document!==t.value.document&&t.select({marks:null})}n()},onBlur:function(e,t,n){oi("onBlur",{event:e}),t.blur(),n()},onClick:function(e,t,n){if(t.readOnly)return n();var r=t.value.document,o=t.findPath(e.target);if(!o)return n();oi("onClick",{event:e});var i=r.getNode(o),a=r.getAncestors(o);i&&(t.isVoid(i)||a.some(function(e){return t.isVoid(e)}))&&t.focus().moveToEndOfNode(i),n()},onCopy:function(e,t,n){oi("onCopy",{event:e}),Jo(e,t),n()},onCut:function(e,t,n){oi("onCut",{event:e}),Jo(e,t,function(){var e=t.value,n=e.document,r=e.selection,o=r.end,i=void 0;if(r.isCollapsed){var a=!0,u=!1,s=void 0;try{for(var c,l=n.ancestors(o.path)[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var f=c.value,d=oo(f,2),p=d[0],h=d[1];if(t.isVoid(p)){i=h;break}}}catch(e){u=!0,s=e}finally{try{!a&&l.return&&l.return()}finally{if(u)throw s}}}i?t.removeNodeByKey(i):t.delete()}),n()},onDragEnd:function(e,t,n){oi("onDragEnd",{event:e}),i=null,n()},onDragStart:function(e,t,n){oi("onDragStart",{event:e}),i=!0;var r=t.value,o=r.document,a=t.findPath(e.target),u=o.getNode(a),s=o.getAncestors(a),c=u&&(t.isVoid(u)||s.some(function(e){return t.isVoid(e)})),l=r.blocks.some(function(e){return e===u});c&&!l&&t.moveToRangeOfNode(u);var f=t.value.fragment;ri(e,"fragment",Dr.serializeNode(f)),n()},onDrop:function(e,t,n){var r=t.value,o=r.document,a=r.selection,u=jn()(e.target),s=t.findEventRange(e);if(!s)return n();oi("onDrop",{event:e});var c=ei(e),l=c.type,f=c.fragment,d=c.text;if(t.focus(),i&&a.end.offset<s.end.offset&&a.end.path.equals(s.end.path)&&(s=s.moveForward(a.start.path.equals(a.end.path)?0-a.end.offset+a.start.offset:0-a.end.offset)),i&&t.delete(),t.select(s),"text"===l||"html"===l){var p=s.anchor,h=o.hasVoidParent(p.path,t);if(h){for(var v=p.path,y=o.getNode(p.path);h;){var m=o.texts({path:v}),g=oo(m,1)[0];if(!g)break;var b=oo(g,2);y=b[0],v=b[1],h=o.hasVoidParent(v,t)}y&&t.moveToStartOfNode(y)}d&&d.split("\n").forEach(function(e,n){n>0&&t.splitBlock(),t.insertText(e)})}"fragment"===l&&t.insertFragment(f);var k=t.findDOMNode(s.focus.path);k&&k.dispatchEvent(new MouseEvent("mouseup",{view:u,bubbles:!0,cancelable:!0})),n()},onFocus:function(e,t,n){oi("onFocus",{event:e}),!a||pr||hr?t.focus():t.deselect().focus(),n()},onInput:function(e,t,n){oi("onInput");var r=jn()(e.target).getSelection(),o=t.findSelection(r);o?t.select(o):t.blur();var i=r.anchorNode;t.reconcileDOMNode(i),n()},onKeyDown:function(e,t,n){oi("onKeyDown",{event:e});var r=t.value,o=r.document,i=r.selection,a=i.start,u=o.hasVoidParent(a.path,t);if(Pr.isSplitBlock(e)&&!yr)return u?t.moveToStartOfNextText():t.splitBlock();if(Pr.isDeleteBackward(e)&&!yr)return t.deleteCharBackward();if(Pr.isDeleteForward(e)&&!yr)return t.deleteCharForward();if(Pr.isDeleteLineBackward(e))return t.deleteLineBackward();if(Pr.isDeleteLineForward(e))return t.deleteLineForward();if(Pr.isDeleteWordBackward(e))return t.deleteWordBackward();if(Pr.isDeleteWordForward(e))return t.deleteWordForward();if(Pr.isRedo(e))return t.redo();if(Pr.isUndo(e))return t.undo();if(Pr.isMoveLineBackward(e))return e.preventDefault(),t.moveToStartOfBlock();if(Pr.isMoveLineForward(e))return e.preventDefault(),t.moveToEndOfBlock();if(Pr.isExtendLineBackward(e))return e.preventDefault(),t.moveFocusToStartOfBlock();if(Pr.isExtendLineForward(e))return e.preventDefault(),t.moveFocusToEndOfBlock();if(Pr.isMoveBackward(e))return e.preventDefault(),i.isCollapsed?t.moveBackward():t.moveToStart();if(Pr.isMoveForward(e))return e.preventDefault(),i.isCollapsed?t.moveForward():t.moveToEnd();if(Pr.isMoveWordBackward(e))return e.preventDefault(),t.moveWordBackward();if(Pr.isMoveWordForward(e))return e.preventDefault(),t.moveWordForward();if(Pr.isExtendBackward(e)){var s=o.getNode(a.path),c=o.texts({path:a.path,direction:"backward"}),l=oo(c,1)[0],f=!1;if(l){var d=oo(l,2)[1];f=o.hasVoidParent(d,t)}if(u||f||""===s.text)return e.preventDefault(),t.moveFocusBackward()}if(Pr.isExtendForward(e)){var p=o.getNode(a.path),h=o.texts({path:a.path}),v=oo(h,1)[0],y=!1;if(v){var m=oo(v,2)[1];y=o.hasVoidParent(m,t)}if(u||y||""===p.text)return e.preventDefault(),t.moveFocusForward()}n()},onMouseDown:function(e,t,n){oi("onMouseDown",{event:e}),a=!0,n()},onMouseUp:function(e,t,n){oi("onMouseUp",{event:e}),a=!1,n()},onPaste:function(e,t,n){oi("onPaste",{event:e});var r=t.value,o=ei(e),i=o.type,a=o.fragment,u=o.text;if("fragment"===i&&t.insertFragment(a),"text"===i||"html"===i){if(!u)return n();var s=r.document,c=r.selection,l=r.startBlock;if(t.isVoid(l))return n();var f=l,d=s.getInsertMarksAtRange(c),p=Lr.deserialize(u,{defaultBlock:f,defaultMarks:d}).document;t.insertFragment(p)}n()},onSelect:function(e,t,n){oi("onSelect",{event:e});var r=jn()(e.target).getSelection(),o=t.findSelection(r);o?t.select(o):t.blur(),a=!1,n()}}),d=vr?[zo(u),qo()]:[];return[].concat(d,[l],io(c),[f])}function ui(e){var t=e.nativeEvent||e;switch(t.type){case"keydown":return t.type+" "+JSON.stringify(t.key);case"input":case"beforeinput":case"textInput":return t.type+":"+t.inputType+" "+JSON.stringify(t.data);default:return t.type}}var si=An()("slate:events");var ci=2e3,li=An()("slate:batch-events");var fi=An()("slate:mutations"),di=["type","oldValue","target","addedNodes","removedNodes","attributeName","attributeNamespace","nextSibling","previousSibling"];function pi(e){if(e.nodeType===window.Node.TEXT_NODE)return e.textContent;if(e.nodeType===window.Node.ELEMENT_NODE){var t=e.outerHTML,n=e.innerHTML;return null==t?JSON.stringify(e.textContent):t.slice(0,t.indexOf(n))}return"Node(type="+e.nodeType}function hi(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.placeholder,n=void 0===t?"":t,r=An.a.enabled("slate:events")?function(){var e={},t=!0,n=!1,r=void 0;try{for(var o,i=$r[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){e[o.value]=function(e,t,n){var r=ui(e);si(r),n()}}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}return e}():null,o=An.a.enabled("slate:batch-events")?function(){var e=null,t=null,n=[];function r(){li("\n"+n.join("\n")),n.length=0}function o(o){0===n.length&&(e=new Date);var i=ui(o),a=new Date;n.push("- "+(a-e)+" - "+i),clearTimeout(t),t=setTimeout(r,ci)}var i={},a=!0,u=!1,s=void 0;try{for(var c,l=$r[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){i[c.value]=function(e,t,n){o(e),n()}}}catch(e){u=!0,s=e}finally{try{!a&&l.return&&l.return()}finally{if(u)throw s}}return i}():null,i=An.a.enabled("slate:mutations")?function(){var e=new window.MutationObserver(function(e){var t=Array.from(e).map(function(e){var t={};return di.forEach(function(n){var r=e[n];if(null!=r)if(r instanceof window.NodeList){if(0===r.length)return;t[n]=Array.from(r).map(pi).join(", ")}else r instanceof window.Node&&(r=pi(r)),t[n]=r}),t});fi.apply(void 0,[t.length+" Mutations"].concat(io(t)))}),t=null;function n(n,r,o){var i=r.findDOMNode([]);if(i===t)return o();fi("start"),e.observe(i,{childList:!0,characterData:!0,attributes:!0,subtree:!0,characterDataOldValue:!0}),t=i,o()}return{onComponentDidMount:n,onComponentDidUpdate:n,onComponentWillUnmount:function(n,r,o){fi("stop"),e.disconnect(),t=null,o()}}}():null,a={decorateNode:function(){return[]},renderAnnotation:function(e){var t=e.attributes,n=e.children;return ut.a.createElement("span",t,n)},renderBlock:function(e){var t=e.attributes,n=e.children;return ut.a.createElement("div",to({},t,{style:{position:"relative"}}),n)},renderDecoration:function(e){var t=e.attributes,n=e.children;return ut.a.createElement("span",t,n)},renderDocument:function(e){return e.children},renderEditor:function(e){return e.children},renderInline:function(e){var t=e.attributes,n=e.children;return ut.a.createElement("span",to({},t,{style:{position:"relative"}}),n)},renderMark:function(e){var t=e.attributes,n=e.children;return ut.a.createElement("span",t,n)}},u={commands:{reconcileNode:function(e,t){var n=e.value,r=n.document,o=n.selection,i=r.getPath(t.key),a=e.findDOMNode(i),u=r.getClosestBlock(i),s=t.text,c=a.textContent,l=u.nodes.last()===t,f=c.charAt(c.length-1);if(l&&"\n"===f&&(c=c.slice(0,-1)),s!==c){var d=o.moveAnchorTo(i,0).moveFocusTo(i,s.length);d=r.resolveRange(d),e.insertTextAtRange(d,c,t.marks)}},reconcileDOMNode:function(e,t){var n=t.parentElement.closest("[data-key]"),r=e.findNode(n);e.reconcileNode(r)}}},s=Co();return[r,o,i,function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return No.reduce(function(t,n){return n in e&&(t[n]=e[n]),t},{})}(e),ai(e),{commands:{restoreDOM:function(e){var t=e.tmp.contentRef.current.tmp;t.contentKey=t.contentKey+1}}},vr?null:Wr({placeholder:n,when:function(e,t){return"document"===t.object&&""===t.text&&1===t.nodes.size&&1===Array.from(t.texts()).length}}),a,u,s]}var vi=An()("slate:editor"),yi=function(e){function t(){var e,n,r;Xr(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=ro(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),r.state={value:r.props.defaultValue,contentKey:0},r.tmp={mounted:!1,change:null,resolves:0,updates:0,contentRef:ut.a.createRef()},r.resolveController=Hr(function(){var e=arguments[5];Object(Nn.a)(r.tmp.resolves<5||r.tmp.resolves!==r.tmp.updates,"A Slate <Editor> component is re-resolving the `plugins`, `schema`, `commands`, `queries` or `placeholder` prop on each update, which leads to poor performance. This is often due to passing in a new references for these props with each render by declaring them inline in your render function. Do not do this! Declare them outside your render function, or memoize them instead."),r.tmp.resolves++;var t=e(to({},r.props,{editor:r,value:r.props.value||r.state.value})),n=function(e){r.tmp.mounted?r.handleChange(e):r.tmp.change=e};r.controller=new _n.e({plugins:[t],onChange:n},{controller:r,construct:!1}),r.controller.run("onConstruct")}),ro(r,n)}return no(t,e),Zr(t,[{key:"componentDidMount",value:function(){this.tmp.mounted=!0,this.tmp.updates++,this.props.autoFocus&&this.focus(),this.tmp.change&&(this.handleChange(this.tmp.change),this.tmp.change=null)}},{key:"componentDidUpdate",value:function(){this.tmp.updates++,this.tmp.change&&(this.handleChange(this.tmp.change),this.tmp.change=null)}},{key:"componentWillUnmount",value:function(){this.tmp.mounted=!1}},{key:"render",value:function(){var e=this;vi("render",this);var n=this.props,r=n.commands,o=n.placeholder,i=n.plugins,a=n.queries,u=n.schema;this.resolveController(i,u,r,a,o,hi);var s=this.props,c=s.options,l=s.readOnly,f=s.value,d=this.state.value,p=f||d,h=this.state.contentKey;this.controller.setReadOnly(l),this.controller.setValue(p,c);var v=this.props,y=v.autoCorrect,m=v.className,g=v.id,b=v.role,k=v.spellCheck,w=v.tabIndex,_=v.style,x=v.tagName,O=xr()(this.props,Object.keys(t.propTypes)),E=ut.a.createElement(Ao,to({},O,{ref:this.tmp.contentRef,autoCorrect:y,className:m,contentKey:h,editor:this,id:g,onEvent:function(t,n){return e.run(t,n)},readOnly:l,role:b,spellCheck:k,style:_,tabIndex:w,tagName:x}));return this.controller.run("renderEditor",to({},this.props,{editor:this,children:E}))}},{key:"handleChange",value:function(e){var t=this.props.onChange;this.state.value&&this.setState({value:e.value}),t(e)}},{key:"applyOperation",value:function(){var e;return(e=this.controller).applyOperation.apply(e,arguments)}},{key:"command",value:function(){var e;return(e=this.controller).command.apply(e,arguments)}},{key:"hasCommand",value:function(){var e;return(e=this.controller).hasCommand.apply(e,arguments)}},{key:"hasQuery",value:function(){var e;return(e=this.controller).hasQuery.apply(e,arguments)}},{key:"normalize",value:function(){var e;return(e=this.controller).normalize.apply(e,arguments)}},{key:"query",value:function(){var e;return(e=this.controller).query.apply(e,arguments)}},{key:"registerCommand",value:function(){var e;return(e=this.controller).registerCommand.apply(e,arguments)}},{key:"registerQuery",value:function(){var e;return(e=this.controller).registerQuery.apply(e,arguments)}},{key:"run",value:function(){var e;return(e=this.controller).run.apply(e,arguments)}},{key:"withoutNormalizing",value:function(){var e;return(e=this.controller).withoutNormalizing.apply(e,arguments)}},{key:"call",value:function(){var e;return(e=this.controller).call.apply(e,arguments)}},{key:"change",value:function(){var e;return(e=this.controller).change.apply(e,arguments)}},{key:"onChange",value:function(){var e;return(e=this.controller).onChange.apply(e,arguments)}},{key:"applyOperations",value:function(){var e;return(e=this.controller).applyOperations.apply(e,arguments)}},{key:"setOperationFlag",value:function(){var e;return(e=this.controller).setOperationFlag.apply(e,arguments)}},{key:"getFlag",value:function(){var e;return(e=this.controller).getFlag.apply(e,arguments)}},{key:"unsetOperationFlag",value:function(){var e;return(e=this.controller).unsetOperationFlag.apply(e,arguments)}},{key:"withoutNormalization",value:function(){var e;return(e=this.controller).withoutNormalization.apply(e,arguments)}},{key:"operations",get:function(){return this.controller.operations}},{key:"readOnly",get:function(){return this.controller.readOnly}},{key:"value",get:function(){return this.controller.value}},{key:"editor",get:function(){return this.controller.editor}},{key:"schema",get:function(){Object(zr.a)(!1,"As of Slate 0.42, the `editor.schema` property no longer exists, and its functionality has been folded into the editor itself. Use the `editor` instead.")}},{key:"stack",get:function(){Object(zr.a)(!1,"As of Slate 0.42, the `editor.stack` property no longer exists, and its functionality has been folded into the editor itself. Use the `editor` instead.")}}]),t}(ut.a.Component);yi.propTypes=to({autoCorrect:yt.a.bool,autoFocus:yt.a.bool,className:yt.a.string,defaultValue:On.value,id:yt.a.string,onChange:yt.a.func,options:yt.a.object,placeholder:yt.a.any,plugins:yt.a.array,readOnly:yt.a.bool,role:yt.a.string,schema:yt.a.object,spellCheck:yt.a.bool,style:yt.a.object,tabIndex:yt.a.number,value:On.value},$r.reduce(function(e,t){return e[t]=yt.a.func,e},{}),["decorateNode","renderAnnotation","renderBlock","renderDecoration","renderDocument","renderEditor","renderInline","renderMark"].reduce(function(e,t){return e[t]=yt.a.func,e},{})),yi.defaultProps={autoFocus:!1,autoCorrect:!0,onChange:function(){},options:{},placeholder:"",plugins:[],readOnly:!1,schema:{},spellCheck:!0};var mi=function(e){var t=e.value;return ut.a.createElement(yi,{value:t})},gi=dn(function(e){return{editor:e.editor}},function(e){return{}})(mi),bi=function(){return ut.a.createElement("div",null,ut.a.createElement(gi,null),ut.a.createElement(wn,null))},ki=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:ft.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:ft.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+ft.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var s=a[u],c=n[s],l=e[s],f=c(l,t);if(void 0===f){var d=pt(s,t);throw new Error(d)}o[s]=f,r=r||f!==l}return r?o:e}}({documents:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];arguments.length>1&&arguments[1];return e}});function wi(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["{user(id:1){id email}}"]);return wi=function(){return e},e}new it({uri:"http://localhost:8080/graphql"}).query({query:rt()(wi())}).then(function(e){return console.log(e.data)});var _i=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var i=t,a=n,u=[],s=u,c=!1;function l(){s===u&&(s=u.slice())}function f(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function d(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return l(),s.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,l();var n=s.indexOf(e);s.splice(n,1)}}}function p(e){if(!dt(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,a=i(a,e)}finally{c=!1}for(var t=u=s,n=0;n<t.length;n++){(0,t[n])()}return e}return p({type:ft.INIT}),(o={dispatch:p,subscribe:d,getState:f,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,p({type:ft.REPLACE})}})[k.a]=function(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[k.a]=function(){return this},e},o}(ki,{editor:_n.n.fromJSON({document:{nodes:[{object:"block",type:"paragraph",nodes:[{object:"text",text:"A line of text in a paragraph."}]}]}})});Object(st.render)(ut.a.createElement(Ot,{store:_i},ut.a.createElement(bi,null)),document.getElementById("app"))},function(e,t,n){"use strict";n.r(t);var r=n(38);function o(e,t){if(!Boolean(e))throw new Error(t)}var i=n(28);function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.prototype.toString;e.prototype.toJSON=t,e.prototype.inspect=t,i.a&&(e.prototype[i.a]=t)}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n,r=/\r\n|[\n\r]/g,o=1,i=t+1;(n=r.exec(e.body))&&n.index<t;)o+=1,i=t+1-(n.index+n[0].length);return{line:o,column:i}}function c(e){return l(e.source,s(e.source,e.start))}function l(e,t){var n=e.locationOffset.column-1,r=d(n)+e.body,o=t.line-1,i=e.locationOffset.line-1,a=t.line+i,u=1===t.line?n:0,s=t.column+u,c="".concat(e.name,":").concat(a,":").concat(s,"\n"),l=r.split(/\r\n|[\n\r]/g),p=l[o];if(p.length>120){for(var h=Math.floor(s/80),v=s%80,y=[],m=0;m<p.length;m+=80)y.push(p.slice(m,m+80));return c+f([["".concat(a),y[0]]].concat(y.slice(1,h+1).map(function(e){return["",e]}),[[" ",d(v-1)+"^"],["",y[h+1]]]))}return c+f([["".concat(a-1),l[o-1]],["".concat(a),p],["",d(s-1)+"^"],["".concat(a+1),l[o+1]]])}function f(e){var t=e.filter(function(e){e[0];return void 0!==e[1]}),n=Math.max.apply(Math,t.map(function(e){return e[0].length}));return t.map(function(e){var t,r=e[0],o=e[1];return d(n-(t=r).length)+t+" | "+o}).join("\n")}function d(e){return Array(e+1).join(" ")}function p(e,t,n,r,o,i,a){var c=Array.isArray(t)?0!==t.length?t:void 0:t?[t]:void 0,l=n;if(!l&&c){var f=c[0];l=f&&f.loc&&f.loc.source}var d,h=r;!h&&c&&(h=c.reduce(function(e,t){return t.loc&&e.push(t.loc.start),e},[])),h&&0===h.length&&(h=void 0),r&&n?d=r.map(function(e){return s(n,e)}):c&&(d=c.reduce(function(e,t){return t.loc&&e.push(s(t.loc.source,t.loc.start)),e},[]));var v,y=a;if(null==y&&null!=i){var m=i.extensions;"object"==u(v=m)&&null!==v&&(y=m)}Object.defineProperties(this,{message:{value:e,enumerable:!0,writable:!0},locations:{value:d||void 0,enumerable:Boolean(d)},path:{value:o||void 0,enumerable:Boolean(o)},nodes:{value:c||void 0},source:{value:l||void 0},positions:{value:h||void 0},originalError:{value:i},extensions:{value:y||void 0,enumerable:Boolean(y)}}),i&&i.stack?Object.defineProperty(this,"stack",{value:i.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,p):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}function h(e,t,n){return new p("Syntax Error: ".concat(n),void 0,e,[t])}p.prototype=Object.create(Error.prototype,{constructor:{value:p},name:{value:"GraphQLError"},toString:{value:function(){return function(e){var t=e.message;if(e.nodes)for(var n=0,r=e.nodes;n<r.length;n++){var o=r[n];o.loc&&(t+="\n\n"+c(o.loc))}else if(e.source&&e.locations)for(var i=0,a=e.locations;i<a.length;i++){var u=a[i];t+="\n\n"+l(e.source,u)}return t}(this)}}});var v=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"});var y,m=function(e,t,n){this.body=e,this.name=t||"GraphQL request",this.locationOffset=n||{line:1,column:1},this.locationOffset.line>0||o(0,"line in locationOffset is 1-indexed and must be positive"),this.locationOffset.column>0||o(0,"column in locationOffset is 1-indexed and must be positive")};y=m,"function"==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(y.prototype,Symbol.toStringTag,{get:function(){return this.constructor.name}});var g=n(39),b=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"});function k(){return this.lastToken=this.token,this.token=this.lookahead()}function w(){var e=this.token;if(e.kind!==b.EOF)do{e=e.next||(e.next=O(this,e))}while(e.kind===b.COMMENT);return e}function _(e,t,n,r,o,i,a){this.kind=e,this.start=t,this.end=n,this.line=r,this.column=o,this.value=a,this.prev=i,this.next=null}function x(e){return isNaN(e)?b.EOF:e<127?JSON.stringify(String.fromCharCode(e)):'"\\u'.concat(("00"+e.toString(16).toUpperCase()).slice(-4),'"')}function O(e,t){var n=e.source,r=n.body,o=r.length,i=function(e,t,n){var r=e.length,o=t;for(;o<r;){var i=e.charCodeAt(o);if(9===i||32===i||44===i||65279===i)++o;else if(10===i)++o,++n.line,n.lineStart=o;else{if(13!==i)break;10===e.charCodeAt(o+1)?o+=2:++o,++n.line,n.lineStart=o}}return o}(r,t.end,e),a=e.line,u=1+i-e.lineStart;if(i>=o)return new _(b.EOF,o,o,a,u,t);var s=r.charCodeAt(i);switch(s){case 33:return new _(b.BANG,i,i+1,a,u,t);case 35:return function(e,t,n,r,o){var i,a=e.body,u=t;do{i=a.charCodeAt(++u)}while(!isNaN(i)&&(i>31||9===i));return new _(b.COMMENT,t,u,n,r,o,a.slice(t+1,u))}(n,i,a,u,t);case 36:return new _(b.DOLLAR,i,i+1,a,u,t);case 38:return new _(b.AMP,i,i+1,a,u,t);case 40:return new _(b.PAREN_L,i,i+1,a,u,t);case 41:return new _(b.PAREN_R,i,i+1,a,u,t);case 46:if(46===r.charCodeAt(i+1)&&46===r.charCodeAt(i+2))return new _(b.SPREAD,i,i+3,a,u,t);break;case 58:return new _(b.COLON,i,i+1,a,u,t);case 61:return new _(b.EQUALS,i,i+1,a,u,t);case 64:return new _(b.AT,i,i+1,a,u,t);case 91:return new _(b.BRACKET_L,i,i+1,a,u,t);case 93:return new _(b.BRACKET_R,i,i+1,a,u,t);case 123:return new _(b.BRACE_L,i,i+1,a,u,t);case 124:return new _(b.PIPE,i,i+1,a,u,t);case 125:return new _(b.BRACE_R,i,i+1,a,u,t);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return function(e,t,n,r,o){var i=e.body,a=i.length,u=t+1,s=0;for(;u!==a&&!isNaN(s=i.charCodeAt(u))&&(95===s||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122);)++u;return new _(b.NAME,t,u,n,r,o,i.slice(t,u))}(n,i,a,u,t);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e,t,n,r,o,i){var a=e.body,u=n,s=t,c=!1;45===u&&(u=a.charCodeAt(++s));if(48===u){if((u=a.charCodeAt(++s))>=48&&u<=57)throw h(e,s,"Invalid number, unexpected digit after 0: ".concat(x(u),"."))}else s=E(e,s,u),u=a.charCodeAt(s);46===u&&(c=!0,u=a.charCodeAt(++s),s=E(e,s,u),u=a.charCodeAt(s));69!==u&&101!==u||(c=!0,43!==(u=a.charCodeAt(++s))&&45!==u||(u=a.charCodeAt(++s)),s=E(e,s,u));return new _(c?b.FLOAT:b.INT,t,s,r,o,i,a.slice(t,s))}(n,i,s,a,u,t);case 34:return 34===r.charCodeAt(i+1)&&34===r.charCodeAt(i+2)?function(e,t,n,r,o,i){var a=e.body,u=t+3,s=u,c=0,l="";for(;u<a.length&&!isNaN(c=a.charCodeAt(u));){if(34===c&&34===a.charCodeAt(u+1)&&34===a.charCodeAt(u+2))return l+=a.slice(s,u),new _(b.BLOCK_STRING,t,u+3,n,r,o,Object(g.a)(l));if(c<32&&9!==c&&10!==c&&13!==c)throw h(e,u,"Invalid character within String: ".concat(x(c),"."));10===c?(++u,++i.line,i.lineStart=u):13===c?(10===a.charCodeAt(u+1)?u+=2:++u,++i.line,i.lineStart=u):92===c&&34===a.charCodeAt(u+1)&&34===a.charCodeAt(u+2)&&34===a.charCodeAt(u+3)?(l+=a.slice(s,u)+'"""',s=u+=4):++u}throw h(e,u,"Unterminated string.")}(n,i,a,u,t,e):function(e,t,n,r,o){var i=e.body,a=t+1,u=a,s=0,c="";for(;a<i.length&&!isNaN(s=i.charCodeAt(a))&&10!==s&&13!==s;){if(34===s)return c+=i.slice(u,a),new _(b.STRING,t,a+1,n,r,o,c);if(s<32&&9!==s)throw h(e,a,"Invalid character within String: ".concat(x(s),"."));if(++a,92===s){switch(c+=i.slice(u,a-1),s=i.charCodeAt(a)){case 34:c+='"';break;case 47:c+="/";break;case 92:c+="\\";break;case 98:c+="\b";break;case 102:c+="\f";break;case 110:c+="\n";break;case 114:c+="\r";break;case 116:c+="\t";break;case 117:var l=(d=i.charCodeAt(a+1),p=i.charCodeAt(a+2),v=i.charCodeAt(a+3),y=i.charCodeAt(a+4),S(d)<<12|S(p)<<8|S(v)<<4|S(y));if(l<0){var f=i.slice(a+1,a+5);throw h(e,a,"Invalid character escape sequence: \\u".concat(f,"."))}c+=String.fromCharCode(l),a+=4;break;default:throw h(e,a,"Invalid character escape sequence: \\".concat(String.fromCharCode(s),"."))}u=++a}}var d,p,v,y;throw h(e,a,"Unterminated string.")}(n,i,a,u,t)}throw h(n,i,function(e){if(e<32&&9!==e&&10!==e&&13!==e)return"Cannot contain the invalid character ".concat(x(e),".");if(39===e)return"Unexpected single quote character ('), did you mean to use a double quote (\")?";return"Cannot parse the unexpected character ".concat(x(e),".")}(s))}function E(e,t,n){var r=e.body,o=t,i=n;if(i>=48&&i<=57){do{i=r.charCodeAt(++o)}while(i>=48&&i<=57);return o}throw h(e,o,"Invalid number, expected digit but got: ".concat(x(i),"."))}function S(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}a(_,function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}});var T=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"});function A(e,t){return new j(e,t).parseDocument()}function N(e,t){var n=new j(e,t);n.expectToken(b.SOF);var r=n.parseValueLiteral(!1);return n.expectToken(b.EOF),r}function C(e,t){var n=new j(e,t);n.expectToken(b.SOF);var r=n.parseTypeReference();return n.expectToken(b.EOF),r}n.d(t,"parse",function(){return A}),n.d(t,"parseValue",function(){return N}),n.d(t,"parseType",function(){return C});var j=function(){function e(e,t){var n="string"==typeof e?new m(e):e;n instanceof m||o(0,"Must provide Source. Received: ".concat(Object(r.a)(n))),this._lexer=function(e,t){var n=new _(b.SOF,0,0,0,0,null);return{source:e,options:t,lastToken:n,token:n,line:1,lineStart:0,advance:k,lookahead:w}}(n),this._options=t||{}}var t=e.prototype;return t.parseName=function(){var e=this.expectToken(b.NAME);return{kind:v.NAME,value:e.value,loc:this.loc(e)}},t.parseDocument=function(){var e=this._lexer.token;return{kind:v.DOCUMENT,definitions:this.many(b.SOF,this.parseDefinition,b.EOF),loc:this.loc(e)}},t.parseDefinition=function(){if(this.peek(b.NAME))switch(this._lexer.token.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return this.parseTypeSystemDefinition();case"extend":return this.parseTypeSystemExtension()}else{if(this.peek(b.BRACE_L))return this.parseOperationDefinition();if(this.peekDescription())return this.parseTypeSystemDefinition()}throw this.unexpected()},t.parseOperationDefinition=function(){var e=this._lexer.token;if(this.peek(b.BRACE_L))return{kind:v.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet(),loc:this.loc(e)};var t,n=this.parseOperationType();return this.peek(b.NAME)&&(t=this.parseName()),{kind:v.OPERATION_DEFINITION,operation:n,name:t,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},t.parseOperationType=function(){var e=this.expectToken(b.NAME);switch(e.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw this.unexpected(e)},t.parseVariableDefinitions=function(){return this.optionalMany(b.PAREN_L,this.parseVariableDefinition,b.PAREN_R)},t.parseVariableDefinition=function(){var e=this._lexer.token;return{kind:v.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(b.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(b.EQUALS)?this.parseValueLiteral(!0):void 0,directives:this.parseDirectives(!0),loc:this.loc(e)}},t.parseVariable=function(){var e=this._lexer.token;return this.expectToken(b.DOLLAR),{kind:v.VARIABLE,name:this.parseName(),loc:this.loc(e)}},t.parseSelectionSet=function(){var e=this._lexer.token;return{kind:v.SELECTION_SET,selections:this.many(b.BRACE_L,this.parseSelection,b.BRACE_R),loc:this.loc(e)}},t.parseSelection=function(){return this.peek(b.SPREAD)?this.parseFragment():this.parseField()},t.parseField=function(){var e,t,n=this._lexer.token,r=this.parseName();return this.expectOptionalToken(b.COLON)?(e=r,t=this.parseName()):t=r,{kind:v.FIELD,alias:e,name:t,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(b.BRACE_L)?this.parseSelectionSet():void 0,loc:this.loc(n)}},t.parseArguments=function(e){var t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(b.PAREN_L,t,b.PAREN_R)},t.parseArgument=function(){var e=this._lexer.token,t=this.parseName();return this.expectToken(b.COLON),{kind:v.ARGUMENT,name:t,value:this.parseValueLiteral(!1),loc:this.loc(e)}},t.parseConstArgument=function(){var e=this._lexer.token;return{kind:v.ARGUMENT,name:this.parseName(),value:(this.expectToken(b.COLON),this.parseValueLiteral(!0)),loc:this.loc(e)}},t.parseFragment=function(){var e=this._lexer.token;this.expectToken(b.SPREAD);var t=this.expectOptionalKeyword("on");return!t&&this.peek(b.NAME)?{kind:v.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1),loc:this.loc(e)}:{kind:v.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},t.parseFragmentDefinition=function(){var e=this._lexer.token;return this.expectKeyword("fragment"),this._options.experimentalFragmentVariables?{kind:v.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}:{kind:v.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},t.parseFragmentName=function(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()},t.parseValueLiteral=function(e){var t=this._lexer.token;switch(t.kind){case b.BRACKET_L:return this.parseList(e);case b.BRACE_L:return this.parseObject(e);case b.INT:return this._lexer.advance(),{kind:v.INT,value:t.value,loc:this.loc(t)};case b.FLOAT:return this._lexer.advance(),{kind:v.FLOAT,value:t.value,loc:this.loc(t)};case b.STRING:case b.BLOCK_STRING:return this.parseStringLiteral();case b.NAME:return"true"===t.value||"false"===t.value?(this._lexer.advance(),{kind:v.BOOLEAN,value:"true"===t.value,loc:this.loc(t)}):"null"===t.value?(this._lexer.advance(),{kind:v.NULL,loc:this.loc(t)}):(this._lexer.advance(),{kind:v.ENUM,value:t.value,loc:this.loc(t)});case b.DOLLAR:if(!e)return this.parseVariable()}throw this.unexpected()},t.parseStringLiteral=function(){var e=this._lexer.token;return this._lexer.advance(),{kind:v.STRING,value:e.value,block:e.kind===b.BLOCK_STRING,loc:this.loc(e)}},t.parseList=function(e){var t=this,n=this._lexer.token;return{kind:v.LIST,values:this.any(b.BRACKET_L,function(){return t.parseValueLiteral(e)},b.BRACKET_R),loc:this.loc(n)}},t.parseObject=function(e){var t=this,n=this._lexer.token;return{kind:v.OBJECT,fields:this.any(b.BRACE_L,function(){return t.parseObjectField(e)},b.BRACE_R),loc:this.loc(n)}},t.parseObjectField=function(e){var t=this._lexer.token,n=this.parseName();return this.expectToken(b.COLON),{kind:v.OBJECT_FIELD,name:n,value:this.parseValueLiteral(e),loc:this.loc(t)}},t.parseDirectives=function(e){for(var t=[];this.peek(b.AT);)t.push(this.parseDirective(e));return t},t.parseDirective=function(e){var t=this._lexer.token;return this.expectToken(b.AT),{kind:v.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e),loc:this.loc(t)}},t.parseTypeReference=function(){var e,t=this._lexer.token;return this.expectOptionalToken(b.BRACKET_L)?(e=this.parseTypeReference(),this.expectToken(b.BRACKET_R),e={kind:v.LIST_TYPE,type:e,loc:this.loc(t)}):e=this.parseNamedType(),this.expectOptionalToken(b.BANG)?{kind:v.NON_NULL_TYPE,type:e,loc:this.loc(t)}:e},t.parseNamedType=function(){var e=this._lexer.token;return{kind:v.NAMED_TYPE,name:this.parseName(),loc:this.loc(e)}},t.parseTypeSystemDefinition=function(){var e=this.peekDescription()?this._lexer.lookahead():this._lexer.token;if(e.kind===b.NAME)switch(e.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}throw this.unexpected(e)},t.peekDescription=function(){return this.peek(b.STRING)||this.peek(b.BLOCK_STRING)},t.parseDescription=function(){if(this.peekDescription())return this.parseStringLiteral()},t.parseSchemaDefinition=function(){var e=this._lexer.token;this.expectKeyword("schema");var t=this.parseDirectives(!0),n=this.many(b.BRACE_L,this.parseOperationTypeDefinition,b.BRACE_R);return{kind:v.SCHEMA_DEFINITION,directives:t,operationTypes:n,loc:this.loc(e)}},t.parseOperationTypeDefinition=function(){var e=this._lexer.token,t=this.parseOperationType();this.expectToken(b.COLON);var n=this.parseNamedType();return{kind:v.OPERATION_TYPE_DEFINITION,operation:t,type:n,loc:this.loc(e)}},t.parseScalarTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");var n=this.parseName(),r=this.parseDirectives(!0);return{kind:v.SCALAR_TYPE_DEFINITION,description:t,name:n,directives:r,loc:this.loc(e)}},t.parseObjectTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");var n=this.parseName(),r=this.parseImplementsInterfaces(),o=this.parseDirectives(!0),i=this.parseFieldsDefinition();return{kind:v.OBJECT_TYPE_DEFINITION,description:t,name:n,interfaces:r,directives:o,fields:i,loc:this.loc(e)}},t.parseImplementsInterfaces=function(){var e=[];if(this.expectOptionalKeyword("implements")){this.expectOptionalToken(b.AMP);do{e.push(this.parseNamedType())}while(this.expectOptionalToken(b.AMP)||this._options.allowLegacySDLImplementsInterfaces&&this.peek(b.NAME))}return e},t.parseFieldsDefinition=function(){return this._options.allowLegacySDLEmptyFields&&this.peek(b.BRACE_L)&&this._lexer.lookahead().kind===b.BRACE_R?(this._lexer.advance(),this._lexer.advance(),[]):this.optionalMany(b.BRACE_L,this.parseFieldDefinition,b.BRACE_R)},t.parseFieldDefinition=function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseArgumentDefs();this.expectToken(b.COLON);var o=this.parseTypeReference(),i=this.parseDirectives(!0);return{kind:v.FIELD_DEFINITION,description:t,name:n,arguments:r,type:o,directives:i,loc:this.loc(e)}},t.parseArgumentDefs=function(){return this.optionalMany(b.PAREN_L,this.parseInputValueDef,b.PAREN_R)},t.parseInputValueDef=function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName();this.expectToken(b.COLON);var r,o=this.parseTypeReference();this.expectOptionalToken(b.EQUALS)&&(r=this.parseValueLiteral(!0));var i=this.parseDirectives(!0);return{kind:v.INPUT_VALUE_DEFINITION,description:t,name:n,type:o,defaultValue:r,directives:i,loc:this.loc(e)}},t.parseInterfaceTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");var n=this.parseName(),r=this.parseDirectives(!0),o=this.parseFieldsDefinition();return{kind:v.INTERFACE_TYPE_DEFINITION,description:t,name:n,directives:r,fields:o,loc:this.loc(e)}},t.parseUnionTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");var n=this.parseName(),r=this.parseDirectives(!0),o=this.parseUnionMemberTypes();return{kind:v.UNION_TYPE_DEFINITION,description:t,name:n,directives:r,types:o,loc:this.loc(e)}},t.parseUnionMemberTypes=function(){var e=[];if(this.expectOptionalToken(b.EQUALS)){this.expectOptionalToken(b.PIPE);do{e.push(this.parseNamedType())}while(this.expectOptionalToken(b.PIPE))}return e},t.parseEnumTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");var n=this.parseName(),r=this.parseDirectives(!0),o=this.parseEnumValuesDefinition();return{kind:v.ENUM_TYPE_DEFINITION,description:t,name:n,directives:r,values:o,loc:this.loc(e)}},t.parseEnumValuesDefinition=function(){return this.optionalMany(b.BRACE_L,this.parseEnumValueDefinition,b.BRACE_R)},t.parseEnumValueDefinition=function(){var e=this._lexer.token,t=this.parseDescription(),n=this.parseName(),r=this.parseDirectives(!0);return{kind:v.ENUM_VALUE_DEFINITION,description:t,name:n,directives:r,loc:this.loc(e)}},t.parseInputObjectTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");var n=this.parseName(),r=this.parseDirectives(!0),o=this.parseInputFieldsDefinition();return{kind:v.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:n,directives:r,fields:o,loc:this.loc(e)}},t.parseInputFieldsDefinition=function(){return this.optionalMany(b.BRACE_L,this.parseInputValueDef,b.BRACE_R)},t.parseTypeSystemExtension=function(){var e=this._lexer.lookahead();if(e.kind===b.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)},t.parseSchemaExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var t=this.parseDirectives(!0),n=this.optionalMany(b.BRACE_L,this.parseOperationTypeDefinition,b.BRACE_R);if(0===t.length&&0===n.length)throw this.unexpected();return{kind:v.SCHEMA_EXTENSION,directives:t,operationTypes:n,loc:this.loc(e)}},t.parseScalarTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var t=this.parseName(),n=this.parseDirectives(!0);if(0===n.length)throw this.unexpected();return{kind:v.SCALAR_TYPE_EXTENSION,name:t,directives:n,loc:this.loc(e)}},t.parseObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var t=this.parseName(),n=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),o=this.parseFieldsDefinition();if(0===n.length&&0===r.length&&0===o.length)throw this.unexpected();return{kind:v.OBJECT_TYPE_EXTENSION,name:t,interfaces:n,directives:r,fields:o,loc:this.loc(e)}},t.parseInterfaceTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseFieldsDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:v.INTERFACE_TYPE_EXTENSION,name:t,directives:n,fields:r,loc:this.loc(e)}},t.parseUnionTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseUnionMemberTypes();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:v.UNION_TYPE_EXTENSION,name:t,directives:n,types:r,loc:this.loc(e)}},t.parseEnumTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseEnumValuesDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:v.ENUM_TYPE_EXTENSION,name:t,directives:n,values:r,loc:this.loc(e)}},t.parseInputObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var t=this.parseName(),n=this.parseDirectives(!0),r=this.parseInputFieldsDefinition();if(0===n.length&&0===r.length)throw this.unexpected();return{kind:v.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:n,fields:r,loc:this.loc(e)}},t.parseDirectiveDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(b.AT);var n=this.parseName(),r=this.parseArgumentDefs(),o=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var i=this.parseDirectiveLocations();return{kind:v.DIRECTIVE_DEFINITION,description:t,name:n,arguments:r,repeatable:o,locations:i,loc:this.loc(e)}},t.parseDirectiveLocations=function(){this.expectOptionalToken(b.PIPE);var e=[];do{e.push(this.parseDirectiveLocation())}while(this.expectOptionalToken(b.PIPE));return e},t.parseDirectiveLocation=function(){var e=this._lexer.token,t=this.parseName();if(void 0!==T[t.value])return t;throw this.unexpected(e)},t.loc=function(e){if(!this._options.noLocation)return new P(e,this._lexer.lastToken,this._lexer.source)},t.peek=function(e){return this._lexer.token.kind===e},t.expectToken=function(e){var t=this._lexer.token;if(t.kind===e)return this._lexer.advance(),t;throw h(this._lexer.source,t.start,"Expected ".concat(e,", found ").concat(F(t)))},t.expectOptionalToken=function(e){var t=this._lexer.token;if(t.kind===e)return this._lexer.advance(),t},t.expectKeyword=function(e){var t=this._lexer.token;if(t.kind!==b.NAME||t.value!==e)throw h(this._lexer.source,t.start,'Expected "'.concat(e,'", found ').concat(F(t)));this._lexer.advance()},t.expectOptionalKeyword=function(e){var t=this._lexer.token;return t.kind===b.NAME&&t.value===e&&(this._lexer.advance(),!0)},t.unexpected=function(e){var t=e||this._lexer.token;return h(this._lexer.source,t.start,"Unexpected ".concat(F(t)))},t.any=function(e,t,n){this.expectToken(e);for(var r=[];!this.expectOptionalToken(n);)r.push(t.call(this));return r},t.optionalMany=function(e,t,n){if(this.expectOptionalToken(e)){var r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r}return[]},t.many=function(e,t,n){this.expectToken(e);var r=[];do{r.push(t.call(this))}while(!this.expectOptionalToken(n));return r},e}();function P(e,t,n){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=n}function F(e){var t=e.value;return t?"".concat(e.kind,' "').concat(t,'"'):e.kind}a(P,function(){return{start:this.start,end:this.end}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,